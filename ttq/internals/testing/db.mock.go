// Code generated by MockGen. DO NOT EDIT.
// Source: ../databases/db.go

package testing

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	"go.chromium.org/luci/ttq/internals/reminder"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Kind mocks base method.
func (m *MockDatabase) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockDatabaseMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockDatabase)(nil).Kind))
}

// SaveReminder mocks base method.
func (m *MockDatabase) SaveReminder(arg0 context.Context, arg1 *reminder.Reminder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveReminder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveReminder indicates an expected call of SaveReminder.
func (mr *MockDatabaseMockRecorder) SaveReminder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveReminder", reflect.TypeOf((*MockDatabase)(nil).SaveReminder), arg0, arg1)
}

// DeleteReminder mocks base method.
func (m *MockDatabase) DeleteReminder(arg0 context.Context, arg1 *reminder.Reminder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReminder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReminder indicates an expected call of DeleteReminder.
func (mr *MockDatabaseMockRecorder) DeleteReminder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReminder", reflect.TypeOf((*MockDatabase)(nil).DeleteReminder), arg0, arg1)
}

// FetchRemindersMeta mocks base method.
func (m *MockDatabase) FetchRemindersMeta(ctx context.Context, low, high string, limit int) ([]*reminder.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRemindersMeta", ctx, low, high, limit)
	ret0, _ := ret[0].([]*reminder.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRemindersMeta indicates an expected call of FetchRemindersMeta.
func (mr *MockDatabaseMockRecorder) FetchRemindersMeta(ctx, low, high, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRemindersMeta", reflect.TypeOf((*MockDatabase)(nil).FetchRemindersMeta), ctx, low, high, limit)
}

// FetchReminderPayloads mocks base method.
func (m *MockDatabase) FetchReminderPayloads(arg0 context.Context, arg1 []*reminder.Reminder) ([]*reminder.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchReminderPayloads", arg0, arg1)
	ret0, _ := ret[0].([]*reminder.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchReminderPayloads indicates an expected call of FetchReminderPayloads.
func (mr *MockDatabaseMockRecorder) FetchReminderPayloads(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchReminderPayloads", reflect.TypeOf((*MockDatabase)(nil).FetchReminderPayloads), arg0, arg1)
}
