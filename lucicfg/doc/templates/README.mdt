# LUCI configuration definition language

{{/* Renders documentation for all functions in the given struct. */}}
{{define "gen-funcs-doc"}}
{{.Doc.Description | LinkifySymbols }}

{{range $sym := .Symbols "func"}}
### {{.FullName}} {#{{$sym.Anchor}}}

```python
{{$sym.InvocationSnippet}}
```

{{if $sym.HasDocTag "advanced"}}
*** note
**Advanced function.** It is not used for common use cases.
***
{{end}}

{{$sym.Doc.Description | LinkifySymbols}}
{{if $sym.Doc.Args}}
#### Arguments {#{{$sym.Anchor "args"}}}
{{range $sym.Doc.Args}}
* **{{.Name | EscapeMD}}**: {{.Desc | LinkifySymbols}}
{{- end}}
{{- end}}

{{if $sym.Doc.Returns}}
#### Returns  {#{{$sym.Anchor "returns"}}}

{{$sym.Doc.Returns | LinkifySymbols}}
{{end}}

{{end}}
{{end}}


{{/* Renders TODO note. */}}
{{define "todo"}}
*** note
TODO: To be written.
***
{{end}}


{{/*
  Load all symbols we are going to document in advance to let LinkifySymbols
  know that they can be referred to through anchors.
*/}}
{{ $lucicfg := Symbol "@stdlib//builtins.star" "lucicfg" }}
{{ $io := Symbol "@stdlib//builtins.star" "io" }}
{{ $time := Symbol "@stdlib//builtins.star" "time" }}
{{ $luci := Symbol "@stdlib//builtins.star" "luci" }}
{{ $acl := Symbol "@stdlib//builtins.star" "acl" }}
{{ $swarming := Symbol "@stdlib//builtins.star" "swarming" }}
{{ $scheduler := Symbol "@stdlib//builtins.star" "scheduler" }}
{{ $cq := Symbol "@stdlib//builtins.star" "cq" }}
{{ $native := Symbol "@stdlib//native_doc.star" "" }}
{{ $proto := Symbol "@stdlib//proto_doc.star" "proto" }}


[TOC]

## Overview

### Working with lucicfg

lucicfg is a tool for generating low-level LUCI configuration files based on a
high-level config given as a [Starlark] script using API exposed by lucicfg
(which is extensively documented in this doc).

[Starlark]: https://github.com/google/starlark-go

### Concepts
{{template "todo"}}

### Execution model {#execution_doc}
{{template "todo"}}

### Resolving naming ambiguities
{{template "todo"}}


### Defining cron schedules {#schedules_doc}

{{LinkifySymbols "luci.builder(...)"}} and
{{LinkifySymbols "luci.gitiles_poller(...)"}} rules have `schedule` field that
defines how often the builder or poller should run. Schedules are given as
strings. Supported kinds of schedules (illustrated via examples):

  - `* 0 * * * *`: a crontab expression, in a syntax supported by
    https://github.com/gorhill/cronexpr (see its docs for full reference).
    LUCI will attempt to start the job at specified moments in time (based on
    **UTC clock**). Some examples:
      - `0 */3 * * * *` - every 3 hours: at 12:00 AM UTC, 3:00 AM UTC, ...
      - `0 */3 * * *` - the exact same thing (the last field is optional).
      - `0 1/3 * * *` - every 3 hours but starting 1:00 AM UTC.
      - `0 2,10,18 * * *` - at 2 AM UTC, 10 AM UTC, 6 PM UTC.
      - `0 7 * * *` - at 7 AM UTC, once a day.

    If a previous invocation is still running when triggering a new one,
    an overrun is recorded and the new scheduled invocation is skipped. The next
    attempt to start the job happens based on the schedule (not when the
    currently running invocation finishes).

  - `with 10s interval`: run the job in a loop, waiting 10s after finishing
     an invocation before starting a new one. Moments when the job starts aren't
     synchronized with the wall clock at all.

  - `with 1m interval`, `with 1h interval`: same format, just using minutes and
    hours instead of seconds.

  - `continuously` is alias for `with 0s interval`, meaning to run the job in
    a loop without any pauses at all.

  - `triggered` schedule indicates that the job is only started via some
    external triggering event (e.g. via LUCI Scheduler API), not periodically.
      - in {{LinkifySymbols "luci.builder(...)"}} this schedule is useful to
        make lucicfg setup a scheduler job associated with the builder (even if
        the builder is not triggered by anything else in the configs). This
        exposes the builder in LUCI Scheduler API.
      - in {{LinkifySymbols "luci.gitiles_poller(...)"}} this is useful to setup
        a poller that polls only on manual requests, not periodically.


## Interfacing with lucicfg internals
{{template "gen-funcs-doc" $lucicfg}}

## Working with time
{{template "gen-funcs-doc" $time}}

## Core LUCI rules
{{template "gen-funcs-doc" $luci}}

## ACLs

### Roles {#roles_doc}

Below is the table with role constants that can be passed as `roles` in
{{LinkifySymbols "acl.entry(...)"}}.

Due to some inconsistencies in how LUCI service are currently implemented, some
roles can be assigned only in {{LinkifySymbols "luci.project(...)"}} rule, but
some also in individual {{LinkifySymbols "luci.bucket(...)"}} or
{{LinkifySymbols "luci.cq_group(...)"}} rules.

Similarly some roles can be assigned to individual users, other only to groups.

| Role  | Scope | Principals | Allows |
|-------|-------|------------|--------|
{{- range $sym := $acl.Symbols "inv"}}
| {{.FullName}} |
{{- if .HasDocTag "project_level_only"}}project only{{else if .HasDocTag "cq_role"}}project, cq_group{{else}}project, bucket{{end}} |
{{- if .HasDocTag "groups_only"}}groups{{else}}groups, users{{end}} |
{{- .Doc.Description | LinkifySymbols}} |
{{- end}}

{{template "gen-funcs-doc" $acl}}

## Swarming
{{template "gen-funcs-doc" $swarming}}

## Scheduler
{{template "gen-funcs-doc" $scheduler}}

## CQ  {#cq_doc}
{{template "gen-funcs-doc" $cq}}

## Built-in constants and functions

Refer to the list of [built-in constants and functions][starlark-builtins]
exposed in the global namespace by Starlark itself.

[starlark-builtins]: https://github.com/google/starlark-go/blob/master/doc/spec.md#built-in-constants-and-functions

In addition, `lucicfg` exposes the following functions.

{{template "gen-funcs-doc" $native}}
{{template "gen-funcs-doc" $proto}}
{{template "gen-funcs-doc" $io}}
