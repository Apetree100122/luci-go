// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/buildbucket/proto/rpc.proto

package buildbucketpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	status "google.golang.org/genproto/googleapis/rpc/status"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A request message for GetBuild rpc.
type GetBuildRequest struct {
	// Build id.
	// Mutually exclusive with builder and number.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Builder of the build.
	// Requires number. Mutually exclusive with id.
	Builder *BuilderID `protobuf:"bytes,2,opt,name=builder,proto3" json:"builder,omitempty"`
	// Build number.
	// Requires builder. Mutually exclusive with id.
	BuildNumber int32 `protobuf:"varint,3,opt,name=build_number,json=buildNumber,proto3" json:"build_number,omitempty"`
	// Fields to include in the response.
	// If not set, the default mask is used, see Build message comments for the
	// list of fields returned by default.
	//
	// Supports advanced semantics, see
	// https://chromium.googlesource.com/infra/luci/luci-py/+/f9ae69a37c4bdd0e08a8b0f7e123f6e403e774eb/appengine/components/components/protoutil/field_masks.py#7
	// In particular, if the client needs only some output properties, they
	// can be requested with paths "output.properties.fields.foo".
	Fields               *field_mask.FieldMask `protobuf:"bytes,100,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetBuildRequest) Reset()         { *m = GetBuildRequest{} }
func (m *GetBuildRequest) String() string { return proto.CompactTextString(m) }
func (*GetBuildRequest) ProtoMessage()    {}
func (*GetBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{0}
}

func (m *GetBuildRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBuildRequest.Unmarshal(m, b)
}
func (m *GetBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBuildRequest.Marshal(b, m, deterministic)
}
func (m *GetBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBuildRequest.Merge(m, src)
}
func (m *GetBuildRequest) XXX_Size() int {
	return xxx_messageInfo_GetBuildRequest.Size(m)
}
func (m *GetBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBuildRequest proto.InternalMessageInfo

func (m *GetBuildRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetBuildRequest) GetBuilder() *BuilderID {
	if m != nil {
		return m.Builder
	}
	return nil
}

func (m *GetBuildRequest) GetBuildNumber() int32 {
	if m != nil {
		return m.BuildNumber
	}
	return 0
}

func (m *GetBuildRequest) GetFields() *field_mask.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

// A request message for SearchBuilds rpc.
type SearchBuildsRequest struct {
	// Returned builds must satisfy this predicate. Required.
	Predicate *BuildPredicate `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// Fields to include in the response, see GetBuildRequest.fields.
	// Note that this applies to the response, not each build, so e.g. steps must
	// be requested with a path "builds.*.steps".
	Fields *field_mask.FieldMask `protobuf:"bytes,100,opt,name=fields,proto3" json:"fields,omitempty"`
	// Number of builds to return.
	// Defaults to 100.
	// Any value >1000 is interpreted as 1000.
	PageSize int32 `protobuf:"varint,101,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Value of SearchBuildsResponse.next_page_token from the previous response.
	// Use it to continue searching.
	PageToken            string   `protobuf:"bytes,102,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchBuildsRequest) Reset()         { *m = SearchBuildsRequest{} }
func (m *SearchBuildsRequest) String() string { return proto.CompactTextString(m) }
func (*SearchBuildsRequest) ProtoMessage()    {}
func (*SearchBuildsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{1}
}

func (m *SearchBuildsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchBuildsRequest.Unmarshal(m, b)
}
func (m *SearchBuildsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchBuildsRequest.Marshal(b, m, deterministic)
}
func (m *SearchBuildsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchBuildsRequest.Merge(m, src)
}
func (m *SearchBuildsRequest) XXX_Size() int {
	return xxx_messageInfo_SearchBuildsRequest.Size(m)
}
func (m *SearchBuildsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchBuildsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchBuildsRequest proto.InternalMessageInfo

func (m *SearchBuildsRequest) GetPredicate() *BuildPredicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *SearchBuildsRequest) GetFields() *field_mask.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *SearchBuildsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SearchBuildsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// A response message for SearchBuilds rpc.
type SearchBuildsResponse struct {
	// Search results.
	//
	// Ordered by build id, descending. Ids are monotonically decreasing, so in
	// other words the order is newest-to-oldest.
	Builds []*Build `protobuf:"bytes,1,rep,name=builds,proto3" json:"builds,omitempty"`
	// Value for SearchBuildsRequest.page_token to continue searching.
	NextPageToken        string   `protobuf:"bytes,100,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchBuildsResponse) Reset()         { *m = SearchBuildsResponse{} }
func (m *SearchBuildsResponse) String() string { return proto.CompactTextString(m) }
func (*SearchBuildsResponse) ProtoMessage()    {}
func (*SearchBuildsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{2}
}

func (m *SearchBuildsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchBuildsResponse.Unmarshal(m, b)
}
func (m *SearchBuildsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchBuildsResponse.Marshal(b, m, deterministic)
}
func (m *SearchBuildsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchBuildsResponse.Merge(m, src)
}
func (m *SearchBuildsResponse) XXX_Size() int {
	return xxx_messageInfo_SearchBuildsResponse.Size(m)
}
func (m *SearchBuildsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchBuildsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchBuildsResponse proto.InternalMessageInfo

func (m *SearchBuildsResponse) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

func (m *SearchBuildsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// A request message for Batch rpc.
type BatchRequest struct {
	// Requests to execute in a single batch.
	//
	// All requests are executed in their own individual transactions.
	// BatchRequest as a whole is not transactional.
	// Mutations are executed before read-only requests.
	Requests             []*BatchRequest_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *BatchRequest) Reset()         { *m = BatchRequest{} }
func (m *BatchRequest) String() string { return proto.CompactTextString(m) }
func (*BatchRequest) ProtoMessage()    {}
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{3}
}

func (m *BatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchRequest.Unmarshal(m, b)
}
func (m *BatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchRequest.Marshal(b, m, deterministic)
}
func (m *BatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequest.Merge(m, src)
}
func (m *BatchRequest) XXX_Size() int {
	return xxx_messageInfo_BatchRequest.Size(m)
}
func (m *BatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequest proto.InternalMessageInfo

func (m *BatchRequest) GetRequests() []*BatchRequest_Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

// One request in a batch.
type BatchRequest_Request struct {
	// Types that are valid to be assigned to Request:
	//	*BatchRequest_Request_GetBuild
	//	*BatchRequest_Request_SearchBuilds
	//	*BatchRequest_Request_ScheduleBuild
	//	*BatchRequest_Request_CancelBuild
	Request              isBatchRequest_Request_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *BatchRequest_Request) Reset()         { *m = BatchRequest_Request{} }
func (m *BatchRequest_Request) String() string { return proto.CompactTextString(m) }
func (*BatchRequest_Request) ProtoMessage()    {}
func (*BatchRequest_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{3, 0}
}

func (m *BatchRequest_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchRequest_Request.Unmarshal(m, b)
}
func (m *BatchRequest_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchRequest_Request.Marshal(b, m, deterministic)
}
func (m *BatchRequest_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequest_Request.Merge(m, src)
}
func (m *BatchRequest_Request) XXX_Size() int {
	return xxx_messageInfo_BatchRequest_Request.Size(m)
}
func (m *BatchRequest_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequest_Request.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequest_Request proto.InternalMessageInfo

type isBatchRequest_Request_Request interface {
	isBatchRequest_Request_Request()
}

type BatchRequest_Request_GetBuild struct {
	GetBuild *GetBuildRequest `protobuf:"bytes,1,opt,name=get_build,json=getBuild,proto3,oneof"`
}

type BatchRequest_Request_SearchBuilds struct {
	SearchBuilds *SearchBuildsRequest `protobuf:"bytes,2,opt,name=search_builds,json=searchBuilds,proto3,oneof"`
}

type BatchRequest_Request_ScheduleBuild struct {
	ScheduleBuild *ScheduleBuildRequest `protobuf:"bytes,3,opt,name=schedule_build,json=scheduleBuild,proto3,oneof"`
}

type BatchRequest_Request_CancelBuild struct {
	CancelBuild *CancelBuildRequest `protobuf:"bytes,4,opt,name=cancel_build,json=cancelBuild,proto3,oneof"`
}

func (*BatchRequest_Request_GetBuild) isBatchRequest_Request_Request() {}

func (*BatchRequest_Request_SearchBuilds) isBatchRequest_Request_Request() {}

func (*BatchRequest_Request_ScheduleBuild) isBatchRequest_Request_Request() {}

func (*BatchRequest_Request_CancelBuild) isBatchRequest_Request_Request() {}

func (m *BatchRequest_Request) GetRequest() isBatchRequest_Request_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *BatchRequest_Request) GetGetBuild() *GetBuildRequest {
	if x, ok := m.GetRequest().(*BatchRequest_Request_GetBuild); ok {
		return x.GetBuild
	}
	return nil
}

func (m *BatchRequest_Request) GetSearchBuilds() *SearchBuildsRequest {
	if x, ok := m.GetRequest().(*BatchRequest_Request_SearchBuilds); ok {
		return x.SearchBuilds
	}
	return nil
}

func (m *BatchRequest_Request) GetScheduleBuild() *ScheduleBuildRequest {
	if x, ok := m.GetRequest().(*BatchRequest_Request_ScheduleBuild); ok {
		return x.ScheduleBuild
	}
	return nil
}

func (m *BatchRequest_Request) GetCancelBuild() *CancelBuildRequest {
	if x, ok := m.GetRequest().(*BatchRequest_Request_CancelBuild); ok {
		return x.CancelBuild
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BatchRequest_Request) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BatchRequest_Request_GetBuild)(nil),
		(*BatchRequest_Request_SearchBuilds)(nil),
		(*BatchRequest_Request_ScheduleBuild)(nil),
		(*BatchRequest_Request_CancelBuild)(nil),
	}
}

// A response message for Batch rpc.
type BatchResponse struct {
	// Responses in the same order as BatchRequest.requests.
	Responses            []*BatchResponse_Response `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *BatchResponse) Reset()         { *m = BatchResponse{} }
func (m *BatchResponse) String() string { return proto.CompactTextString(m) }
func (*BatchResponse) ProtoMessage()    {}
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{4}
}

func (m *BatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchResponse.Unmarshal(m, b)
}
func (m *BatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchResponse.Marshal(b, m, deterministic)
}
func (m *BatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchResponse.Merge(m, src)
}
func (m *BatchResponse) XXX_Size() int {
	return xxx_messageInfo_BatchResponse.Size(m)
}
func (m *BatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchResponse proto.InternalMessageInfo

func (m *BatchResponse) GetResponses() []*BatchResponse_Response {
	if m != nil {
		return m.Responses
	}
	return nil
}

// Response a BatchRequest.Response.
type BatchResponse_Response struct {
	// Types that are valid to be assigned to Response:
	//	*BatchResponse_Response_GetBuild
	//	*BatchResponse_Response_SearchBuilds
	//	*BatchResponse_Response_ScheduleBuild
	//	*BatchResponse_Response_CancelBuild
	//	*BatchResponse_Response_Error
	Response             isBatchResponse_Response_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *BatchResponse_Response) Reset()         { *m = BatchResponse_Response{} }
func (m *BatchResponse_Response) String() string { return proto.CompactTextString(m) }
func (*BatchResponse_Response) ProtoMessage()    {}
func (*BatchResponse_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{4, 0}
}

func (m *BatchResponse_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchResponse_Response.Unmarshal(m, b)
}
func (m *BatchResponse_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchResponse_Response.Marshal(b, m, deterministic)
}
func (m *BatchResponse_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchResponse_Response.Merge(m, src)
}
func (m *BatchResponse_Response) XXX_Size() int {
	return xxx_messageInfo_BatchResponse_Response.Size(m)
}
func (m *BatchResponse_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchResponse_Response.DiscardUnknown(m)
}

var xxx_messageInfo_BatchResponse_Response proto.InternalMessageInfo

type isBatchResponse_Response_Response interface {
	isBatchResponse_Response_Response()
}

type BatchResponse_Response_GetBuild struct {
	GetBuild *Build `protobuf:"bytes,1,opt,name=get_build,json=getBuild,proto3,oneof"`
}

type BatchResponse_Response_SearchBuilds struct {
	SearchBuilds *SearchBuildsResponse `protobuf:"bytes,2,opt,name=search_builds,json=searchBuilds,proto3,oneof"`
}

type BatchResponse_Response_ScheduleBuild struct {
	ScheduleBuild *Build `protobuf:"bytes,3,opt,name=schedule_build,json=scheduleBuild,proto3,oneof"`
}

type BatchResponse_Response_CancelBuild struct {
	CancelBuild *Build `protobuf:"bytes,4,opt,name=cancel_build,json=cancelBuild,proto3,oneof"`
}

type BatchResponse_Response_Error struct {
	Error *status.Status `protobuf:"bytes,100,opt,name=error,proto3,oneof"`
}

func (*BatchResponse_Response_GetBuild) isBatchResponse_Response_Response() {}

func (*BatchResponse_Response_SearchBuilds) isBatchResponse_Response_Response() {}

func (*BatchResponse_Response_ScheduleBuild) isBatchResponse_Response_Response() {}

func (*BatchResponse_Response_CancelBuild) isBatchResponse_Response_Response() {}

func (*BatchResponse_Response_Error) isBatchResponse_Response_Response() {}

func (m *BatchResponse_Response) GetResponse() isBatchResponse_Response_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *BatchResponse_Response) GetGetBuild() *Build {
	if x, ok := m.GetResponse().(*BatchResponse_Response_GetBuild); ok {
		return x.GetBuild
	}
	return nil
}

func (m *BatchResponse_Response) GetSearchBuilds() *SearchBuildsResponse {
	if x, ok := m.GetResponse().(*BatchResponse_Response_SearchBuilds); ok {
		return x.SearchBuilds
	}
	return nil
}

func (m *BatchResponse_Response) GetScheduleBuild() *Build {
	if x, ok := m.GetResponse().(*BatchResponse_Response_ScheduleBuild); ok {
		return x.ScheduleBuild
	}
	return nil
}

func (m *BatchResponse_Response) GetCancelBuild() *Build {
	if x, ok := m.GetResponse().(*BatchResponse_Response_CancelBuild); ok {
		return x.CancelBuild
	}
	return nil
}

func (m *BatchResponse_Response) GetError() *status.Status {
	if x, ok := m.GetResponse().(*BatchResponse_Response_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BatchResponse_Response) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BatchResponse_Response_GetBuild)(nil),
		(*BatchResponse_Response_SearchBuilds)(nil),
		(*BatchResponse_Response_ScheduleBuild)(nil),
		(*BatchResponse_Response_CancelBuild)(nil),
		(*BatchResponse_Response_Error)(nil),
	}
}

// A request message for UpdateBuild rpc.
type UpdateBuildRequest struct {
	// Build to update, with new field values.
	Build *Build `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
	// Build fields to update.
	// See also
	// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
	//
	// Currently supports only the following path strings:
	// - build.steps
	// - build.output.properties
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Fields to include in the response. See also GetBuildRequest.fields.
	Fields               *field_mask.FieldMask `protobuf:"bytes,100,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateBuildRequest) Reset()         { *m = UpdateBuildRequest{} }
func (m *UpdateBuildRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBuildRequest) ProtoMessage()    {}
func (*UpdateBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{5}
}

func (m *UpdateBuildRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBuildRequest.Unmarshal(m, b)
}
func (m *UpdateBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBuildRequest.Marshal(b, m, deterministic)
}
func (m *UpdateBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBuildRequest.Merge(m, src)
}
func (m *UpdateBuildRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateBuildRequest.Size(m)
}
func (m *UpdateBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBuildRequest proto.InternalMessageInfo

func (m *UpdateBuildRequest) GetBuild() *Build {
	if m != nil {
		return m.Build
	}
	return nil
}

func (m *UpdateBuildRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateBuildRequest) GetFields() *field_mask.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

// A request message for ScheduleBuild rpc.
//
// Next ID: 14.
type ScheduleBuildRequest struct {
	// ** STRONGLY RECOMMENDED **.
	// A unique string id used for detecting duplicate requests.
	// Should be unique at least per requesting identity.
	// Used to dedup build scheduling requests with same id within 1 min.
	// If a build was successfully scheduled with the same request id in the past
	// minute, the existing build will be returned.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// ID of a build to retry as is or altered.
	// When specified, fields below default to the values in the template build.
	TemplateBuildId int64 `protobuf:"varint,2,opt,name=template_build_id,json=templateBuildId,proto3" json:"template_build_id,omitempty"`
	// Value for Build.builder. See its comments.
	// Required, unless template_build_id is specified.
	Builder *BuilderID `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	// If specified, overrides server-defined value of
	// Build.infra.buildbucket.canary.
	// Otherwise the value is computed based on the builder config.
	// See Swarming.task_template_canary_percentage in
	// ./config/project_config.proto.
	Canary Trinary `protobuf:"varint,4,opt,name=canary,proto3,enum=buildbucket.v2.Trinary" json:"canary,omitempty"`
	// If specified, overrides server-defined value of Build.input.experimental.
	// Otherwise the value is computed based on the builder config.
	// See Builder.experimental in ./config/project_config.proto.
	Experimental Trinary `protobuf:"varint,5,opt,name=experimental,proto3,enum=buildbucket.v2.Trinary" json:"experimental,omitempty"`
	// Properties to include in Build.input.properties.
	//
	// Input properties of the created build are result of merging server-defined
	// properties and properties in this field.
	// Each property in this field defines a new or replaces an existing property
	// on the server.
	// If the server config does not allow overriding/adding the property, the
	// request will fail with InvalidArgument error code.
	// A server-defined property cannot be removed, but its value can be
	// replaced with null.
	//
	// Reserved property paths:
	// * ["buildbucket"]
	// * ["buildername"]
	// * ["blamelist""]
	// * ["$recipe_engine/runtime", "is_luci"]
	// * ["$recipe_engine/runtime", "is_experimental"]
	//
	// V1 equivalent: corresponds to "properties" key in "parameters_json".
	Properties *_struct.Struct `protobuf:"bytes,6,opt,name=properties,proto3" json:"properties,omitempty"`
	// Value for Build.input.gitiles_commit.
	//
	// Setting this field will cause the created build to have a "buildset"
	// tag with value "commit/gitiles/{hostname}/{project}/+/{id}".
	//
	// GitilesCommit objects MUST have host, project, ref fields set.
	//
	// V1 equivalent: supersedes "revision" property and "buildset"
	// tag that starts with "commit/gitiles/".
	GitilesCommit *GitilesCommit `protobuf:"bytes,7,opt,name=gitiles_commit,json=gitilesCommit,proto3" json:"gitiles_commit,omitempty"`
	// Value for Build.input.gerrit_changes.
	// Usually present in tryjobs, set by CQ, Gerrit, git-cl-try.
	// Applied on top of gitiles_commit if specified, otherwise tip of the tree.
	// All GerritChange fields are required.
	//
	// Setting this field will cause the created build to have a "buildset"
	// tag with value "patch/gerrit/{hostname}/{change}/{patchset}"
	// for each change.
	//
	// V1 equivalent: supersedes patch_* properties and "buildset"
	// tag that starts with "patch/gerrit/".
	GerritChanges []*GerritChange `protobuf:"bytes,8,rep,name=gerrit_changes,json=gerritChanges,proto3" json:"gerrit_changes,omitempty"`
	// Tags to include in Build.tags of the created build, see Build.tags
	// comments.
	// Note: tags of the created build may include other tags defined on the
	// server.
	Tags []*StringPair `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// Overrides default dimensions defined by builder config or template build.
	//
	// A set of entries with the same key defines a new or replaces an existing
	// dimension with the same key.
	// If the config does not allow overriding/adding the dimension, the request
	// will fail with InvalidArgument error code.
	//
	// After merging, dimensions with empty value will be excluded.
	//
	// A dimension expiration must be a multiple of 1min.
	Dimensions []*RequestedDimension `protobuf:"bytes,10,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// If not zero, overrides swarming task priority.
	// See also Build.infra.swarming.priority.
	Priority int32 `protobuf:"varint,11,opt,name=priority,proto3" json:"priority,omitempty"`
	// A per-build notification configuration.
	Notify *NotificationConfig `protobuf:"bytes,12,opt,name=notify,proto3" json:"notify,omitempty"`
	// Fields to include in the response. See also GetBuildRequest.fields.
	Fields *field_mask.FieldMask `protobuf:"bytes,100,opt,name=fields,proto3" json:"fields,omitempty"`
	// Value for Build.critical.
	Critical             Trinary  `protobuf:"varint,13,opt,name=critical,proto3,enum=buildbucket.v2.Trinary" json:"critical,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduleBuildRequest) Reset()         { *m = ScheduleBuildRequest{} }
func (m *ScheduleBuildRequest) String() string { return proto.CompactTextString(m) }
func (*ScheduleBuildRequest) ProtoMessage()    {}
func (*ScheduleBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{6}
}

func (m *ScheduleBuildRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleBuildRequest.Unmarshal(m, b)
}
func (m *ScheduleBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleBuildRequest.Marshal(b, m, deterministic)
}
func (m *ScheduleBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleBuildRequest.Merge(m, src)
}
func (m *ScheduleBuildRequest) XXX_Size() int {
	return xxx_messageInfo_ScheduleBuildRequest.Size(m)
}
func (m *ScheduleBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleBuildRequest proto.InternalMessageInfo

func (m *ScheduleBuildRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ScheduleBuildRequest) GetTemplateBuildId() int64 {
	if m != nil {
		return m.TemplateBuildId
	}
	return 0
}

func (m *ScheduleBuildRequest) GetBuilder() *BuilderID {
	if m != nil {
		return m.Builder
	}
	return nil
}

func (m *ScheduleBuildRequest) GetCanary() Trinary {
	if m != nil {
		return m.Canary
	}
	return Trinary_UNSET
}

func (m *ScheduleBuildRequest) GetExperimental() Trinary {
	if m != nil {
		return m.Experimental
	}
	return Trinary_UNSET
}

func (m *ScheduleBuildRequest) GetProperties() *_struct.Struct {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *ScheduleBuildRequest) GetGitilesCommit() *GitilesCommit {
	if m != nil {
		return m.GitilesCommit
	}
	return nil
}

func (m *ScheduleBuildRequest) GetGerritChanges() []*GerritChange {
	if m != nil {
		return m.GerritChanges
	}
	return nil
}

func (m *ScheduleBuildRequest) GetTags() []*StringPair {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ScheduleBuildRequest) GetDimensions() []*RequestedDimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *ScheduleBuildRequest) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *ScheduleBuildRequest) GetNotify() *NotificationConfig {
	if m != nil {
		return m.Notify
	}
	return nil
}

func (m *ScheduleBuildRequest) GetFields() *field_mask.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ScheduleBuildRequest) GetCritical() Trinary {
	if m != nil {
		return m.Critical
	}
	return Trinary_UNSET
}

// A request message for CancelBuild rpc.
type CancelBuildRequest struct {
	// ID of the build to cancel.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. Value for Build.summary_markdown.
	SummaryMarkdown string `protobuf:"bytes,2,opt,name=summary_markdown,json=summaryMarkdown,proto3" json:"summary_markdown,omitempty"`
	// Fields to include in the response. See also GetBuildRequest.fields.
	Fields               *field_mask.FieldMask `protobuf:"bytes,100,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CancelBuildRequest) Reset()         { *m = CancelBuildRequest{} }
func (m *CancelBuildRequest) String() string { return proto.CompactTextString(m) }
func (*CancelBuildRequest) ProtoMessage()    {}
func (*CancelBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{7}
}

func (m *CancelBuildRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelBuildRequest.Unmarshal(m, b)
}
func (m *CancelBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelBuildRequest.Marshal(b, m, deterministic)
}
func (m *CancelBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelBuildRequest.Merge(m, src)
}
func (m *CancelBuildRequest) XXX_Size() int {
	return xxx_messageInfo_CancelBuildRequest.Size(m)
}
func (m *CancelBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelBuildRequest proto.InternalMessageInfo

func (m *CancelBuildRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CancelBuildRequest) GetSummaryMarkdown() string {
	if m != nil {
		return m.SummaryMarkdown
	}
	return ""
}

func (m *CancelBuildRequest) GetFields() *field_mask.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

// A request message for CancelBuilds rpc.
type CancelBuildsRequest struct {
	// Predicate for the builds to cancel.
	// predicate.status MUST be SCHEDULED or STARTED.
	// If bucket is not specified, predicate matches all buckets where the user
	// has permissions to cancel builds.
	Predicate *BuildPredicate `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// Required. Value for Build.summary_markdown.
	SummaryMarkdown      string   `protobuf:"bytes,2,opt,name=summary_markdown,json=summaryMarkdown,proto3" json:"summary_markdown,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelBuildsRequest) Reset()         { *m = CancelBuildsRequest{} }
func (m *CancelBuildsRequest) String() string { return proto.CompactTextString(m) }
func (*CancelBuildsRequest) ProtoMessage()    {}
func (*CancelBuildsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{8}
}

func (m *CancelBuildsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelBuildsRequest.Unmarshal(m, b)
}
func (m *CancelBuildsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelBuildsRequest.Marshal(b, m, deterministic)
}
func (m *CancelBuildsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelBuildsRequest.Merge(m, src)
}
func (m *CancelBuildsRequest) XXX_Size() int {
	return xxx_messageInfo_CancelBuildsRequest.Size(m)
}
func (m *CancelBuildsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelBuildsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelBuildsRequest proto.InternalMessageInfo

func (m *CancelBuildsRequest) GetPredicate() *BuildPredicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *CancelBuildsRequest) GetSummaryMarkdown() string {
	if m != nil {
		return m.SummaryMarkdown
	}
	return ""
}

// A build predicate.
//
// At least one of the following fields is required: builder, gerrit_changes and
// git_commits..
// If a field value is empty, it is ignored, unless stated otherwise.
type BuildPredicate struct {
	// A build must be in this builder.
	Builder *BuilderID `protobuf:"bytes,1,opt,name=builder,proto3" json:"builder,omitempty"`
	// A build must have this status.
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=buildbucket.v2.Status" json:"status,omitempty"`
	// A build's Build.Input.gerrit_changes must include ALL of these changes.
	GerritChanges []*GerritChange `protobuf:"bytes,3,rep,name=gerrit_changes,json=gerritChanges,proto3" json:"gerrit_changes,omitempty"`
	// A build's Build.Output.gitiles_commit must match this commit.
	// One of the following subfield sets must specified:
	// - host, project, id
	// - host, project, ref
	// - host, project, ref, position
	OutputGitilesCommit *GitilesCommit `protobuf:"bytes,4,opt,name=output_gitiles_commit,json=outputGitilesCommit,proto3" json:"output_gitiles_commit,omitempty"`
	// A build must be created by this identity.
	CreatedBy string `protobuf:"bytes,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// A build must have ALL of these tags.
	// For "ANY of these tags" make separate RPCs.
	Tags []*StringPair `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// A build must have been created within the specified range.
	// Both boundaries are optional.
	CreateTime *TimeRange `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// If false (default), a build must be non-experimental.
	// Otherwise it may be experimental or non-experimental.
	IncludeExperimental bool `protobuf:"varint,8,opt,name=include_experimental,json=includeExperimental,proto3" json:"include_experimental,omitempty"`
	// A build must be in this build range.
	// A pair of SearchBuildsRequest.predicate.build.end_build_id and
	// SearchBuildsRequest.page_size=1 can be used to find the previous build.
	Build *BuildRange `protobuf:"bytes,9,opt,name=build,proto3" json:"build,omitempty"`
	// A build must have a matching value of Build.infra.buildbucket.canary.
	Canary               Trinary  `protobuf:"varint,10,opt,name=canary,proto3,enum=buildbucket.v2.Trinary" json:"canary,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildPredicate) Reset()         { *m = BuildPredicate{} }
func (m *BuildPredicate) String() string { return proto.CompactTextString(m) }
func (*BuildPredicate) ProtoMessage()    {}
func (*BuildPredicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{9}
}

func (m *BuildPredicate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildPredicate.Unmarshal(m, b)
}
func (m *BuildPredicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildPredicate.Marshal(b, m, deterministic)
}
func (m *BuildPredicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildPredicate.Merge(m, src)
}
func (m *BuildPredicate) XXX_Size() int {
	return xxx_messageInfo_BuildPredicate.Size(m)
}
func (m *BuildPredicate) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildPredicate.DiscardUnknown(m)
}

var xxx_messageInfo_BuildPredicate proto.InternalMessageInfo

func (m *BuildPredicate) GetBuilder() *BuilderID {
	if m != nil {
		return m.Builder
	}
	return nil
}

func (m *BuildPredicate) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (m *BuildPredicate) GetGerritChanges() []*GerritChange {
	if m != nil {
		return m.GerritChanges
	}
	return nil
}

func (m *BuildPredicate) GetOutputGitilesCommit() *GitilesCommit {
	if m != nil {
		return m.OutputGitilesCommit
	}
	return nil
}

func (m *BuildPredicate) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *BuildPredicate) GetTags() []*StringPair {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *BuildPredicate) GetCreateTime() *TimeRange {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *BuildPredicate) GetIncludeExperimental() bool {
	if m != nil {
		return m.IncludeExperimental
	}
	return false
}

func (m *BuildPredicate) GetBuild() *BuildRange {
	if m != nil {
		return m.Build
	}
	return nil
}

func (m *BuildPredicate) GetCanary() Trinary {
	if m != nil {
		return m.Canary
	}
	return Trinary_UNSET
}

// Half-open build range.
// The range is defined on the build order in the context.
// Usually the order is newest-to-oldest, so start_build_id is a newer
// build and end_build_id is an older build.
type BuildRange struct {
	// Inclusive lower boundary. Optional.
	StartBuildId int64 `protobuf:"varint,1,opt,name=start_build_id,json=startBuildId,proto3" json:"start_build_id,omitempty"`
	// Exclusive upper boundary. Optional.
	EndBuildId           int64    `protobuf:"varint,2,opt,name=end_build_id,json=endBuildId,proto3" json:"end_build_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildRange) Reset()         { *m = BuildRange{} }
func (m *BuildRange) String() string { return proto.CompactTextString(m) }
func (*BuildRange) ProtoMessage()    {}
func (*BuildRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_6551d9ae29a9e5a9, []int{10}
}

func (m *BuildRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildRange.Unmarshal(m, b)
}
func (m *BuildRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildRange.Marshal(b, m, deterministic)
}
func (m *BuildRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildRange.Merge(m, src)
}
func (m *BuildRange) XXX_Size() int {
	return xxx_messageInfo_BuildRange.Size(m)
}
func (m *BuildRange) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildRange.DiscardUnknown(m)
}

var xxx_messageInfo_BuildRange proto.InternalMessageInfo

func (m *BuildRange) GetStartBuildId() int64 {
	if m != nil {
		return m.StartBuildId
	}
	return 0
}

func (m *BuildRange) GetEndBuildId() int64 {
	if m != nil {
		return m.EndBuildId
	}
	return 0
}

func init() {
	proto.RegisterType((*GetBuildRequest)(nil), "buildbucket.v2.GetBuildRequest")
	proto.RegisterType((*SearchBuildsRequest)(nil), "buildbucket.v2.SearchBuildsRequest")
	proto.RegisterType((*SearchBuildsResponse)(nil), "buildbucket.v2.SearchBuildsResponse")
	proto.RegisterType((*BatchRequest)(nil), "buildbucket.v2.BatchRequest")
	proto.RegisterType((*BatchRequest_Request)(nil), "buildbucket.v2.BatchRequest.Request")
	proto.RegisterType((*BatchResponse)(nil), "buildbucket.v2.BatchResponse")
	proto.RegisterType((*BatchResponse_Response)(nil), "buildbucket.v2.BatchResponse.Response")
	proto.RegisterType((*UpdateBuildRequest)(nil), "buildbucket.v2.UpdateBuildRequest")
	proto.RegisterType((*ScheduleBuildRequest)(nil), "buildbucket.v2.ScheduleBuildRequest")
	proto.RegisterType((*CancelBuildRequest)(nil), "buildbucket.v2.CancelBuildRequest")
	proto.RegisterType((*CancelBuildsRequest)(nil), "buildbucket.v2.CancelBuildsRequest")
	proto.RegisterType((*BuildPredicate)(nil), "buildbucket.v2.BuildPredicate")
	proto.RegisterType((*BuildRange)(nil), "buildbucket.v2.BuildRange")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/buildbucket/proto/rpc.proto", fileDescriptor_6551d9ae29a9e5a9)
}

var fileDescriptor_6551d9ae29a9e5a9 = []byte{
	// 1305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6f, 0xe3, 0x44,
	0x14, 0x4f, 0x9a, 0x36, 0x4d, 0x5e, 0x3e, 0x0a, 0xd3, 0xfd, 0x30, 0xd9, 0x5d, 0x08, 0x66, 0xb5,
	0x2a, 0x20, 0x9c, 0x25, 0x5d, 0x81, 0xd8, 0x45, 0x2b, 0x94, 0x76, 0x3f, 0x51, 0x57, 0x65, 0x5a,
	0x2e, 0x70, 0xb0, 0x1c, 0x7b, 0xea, 0x8e, 0x1a, 0x7f, 0x30, 0x33, 0x86, 0xcd, 0x1e, 0xb8, 0x70,
	0xe4, 0x2f, 0xe0, 0x5f, 0x40, 0x82, 0x03, 0x27, 0xae, 0x88, 0xbf, 0x0b, 0x09, 0x79, 0x3c, 0x6e,
	0x1d, 0xdb, 0xc9, 0x9a, 0x8a, 0x53, 0x26, 0xef, 0xfd, 0xde, 0x9b, 0x37, 0xef, 0xdb, 0x70, 0xd7,
	0x0d, 0x0c, 0xfb, 0x94, 0x05, 0x1e, 0x8d, 0x3c, 0x23, 0x60, 0xee, 0x68, 0x16, 0xd9, 0x74, 0x34,
	0x8d, 0xe8, 0xcc, 0x99, 0x46, 0xf6, 0x19, 0x11, 0xa3, 0x90, 0x05, 0x22, 0x18, 0xb1, 0xd0, 0x36,
	0xe4, 0x09, 0xf5, 0x33, 0x4c, 0xe3, 0xfb, 0xf1, 0xe0, 0x86, 0x1b, 0x04, 0xee, 0x8c, 0x24, 0xb8,
	0x69, 0x74, 0x32, 0x22, 0x5e, 0x28, 0xe6, 0x09, 0x78, 0x30, 0xcc, 0x33, 0x4f, 0x28, 0x99, 0x39,
	0xa6, 0x67, 0xf1, 0x33, 0x85, 0xb8, 0x99, 0x47, 0x70, 0xc1, 0x22, 0x5b, 0x28, 0xee, 0x75, 0xc5,
	0x65, 0xa1, 0x3d, 0xe2, 0xc2, 0x12, 0x11, 0x57, 0x8c, 0xdd, 0x8a, 0x76, 0xdb, 0x81, 0xe7, 0x05,
	0xbe, 0x12, 0x1a, 0x57, 0x14, 0x92, 0x14, 0x25, 0xf3, 0x59, 0x45, 0x19, 0x3f, 0x10, 0xf4, 0x84,
	0xda, 0x96, 0xa0, 0xe9, 0x75, 0xfa, 0x6f, 0x75, 0xd8, 0x7a, 0x42, 0xc4, 0x24, 0xc6, 0x62, 0xf2,
	0x5d, 0x44, 0xb8, 0x40, 0x7d, 0x58, 0xa3, 0x8e, 0x56, 0x1f, 0xd6, 0x77, 0x1a, 0x78, 0x8d, 0x3a,
	0x68, 0x17, 0x36, 0xa5, 0x2e, 0xc2, 0xb4, 0xb5, 0x61, 0x7d, 0xa7, 0x33, 0x7e, 0xcb, 0x58, 0xf4,
	0xaf, 0x31, 0x49, 0xd8, 0xcf, 0xf6, 0x71, 0x8a, 0x44, 0xef, 0x42, 0x57, 0x1e, 0x4d, 0x3f, 0xf2,
	0xa6, 0x84, 0x69, 0x8d, 0x61, 0x7d, 0x67, 0x03, 0x77, 0x24, 0xed, 0x85, 0x24, 0xa1, 0x31, 0x34,
	0xa5, 0xab, 0xb9, 0xe6, 0x48, 0xb5, 0x03, 0x23, 0xf1, 0xa4, 0x91, 0xfa, 0xd9, 0x78, 0x1c, 0xb3,
	0x0f, 0x2c, 0x7e, 0x86, 0x15, 0x52, 0xff, 0xbb, 0x0e, 0xdb, 0x47, 0xc4, 0x62, 0xf6, 0xa9, 0xbc,
	0x93, 0xa7, 0x36, 0x7f, 0x0e, 0xed, 0x90, 0x11, 0x27, 0x7e, 0x1c, 0x91, 0xa6, 0x77, 0xc6, 0x6f,
	0x97, 0x5a, 0x79, 0x98, 0xa2, 0xf0, 0x85, 0xc0, 0x65, 0x2c, 0x41, 0x37, 0xa0, 0x1d, 0x5a, 0x2e,
	0x31, 0x39, 0x7d, 0x45, 0x34, 0x22, 0x5f, 0xd7, 0x8a, 0x09, 0x47, 0xf4, 0x15, 0x41, 0xb7, 0x00,
	0x24, 0x53, 0x04, 0x67, 0xc4, 0xd7, 0x4e, 0x86, 0xf5, 0x9d, 0x36, 0x96, 0xf0, 0xe3, 0x98, 0xa0,
	0x7b, 0x70, 0x65, 0xf1, 0x11, 0x3c, 0x0c, 0x7c, 0x4e, 0xd0, 0x47, 0xd0, 0x94, 0x36, 0x73, 0xad,
	0x3e, 0x6c, 0xec, 0x74, 0xc6, 0x57, 0x4b, 0x9f, 0x80, 0x15, 0x08, 0xdd, 0x81, 0x2d, 0x9f, 0xbc,
	0x14, 0x66, 0xe6, 0x2a, 0x47, 0x5e, 0xd5, 0x8b, 0xc9, 0x87, 0xe7, 0xd7, 0xfd, 0xdc, 0x80, 0xee,
	0xc4, 0x12, 0xf6, 0x69, 0xea, 0xad, 0x2f, 0xa0, 0xc5, 0x92, 0x63, 0x7a, 0xd3, 0xed, 0xc2, 0x4d,
	0x19, 0xbc, 0xa1, 0x7e, 0xf1, 0xb9, 0xd4, 0xe0, 0xcf, 0x35, 0xd8, 0x4c, 0xb5, 0x3d, 0x84, 0xb6,
	0x4b, 0x84, 0x29, 0x15, 0x28, 0xdf, 0xbf, 0x93, 0x57, 0x97, 0xcb, 0xb1, 0xa7, 0x35, 0xdc, 0x72,
	0x15, 0x09, 0x3d, 0x87, 0x1e, 0x97, 0xde, 0x30, 0xd5, 0xe3, 0x93, 0x2c, 0x7b, 0x2f, 0xaf, 0xa3,
	0x24, 0xee, 0x4f, 0x6b, 0xb8, 0xcb, 0x33, 0x64, 0x74, 0x00, 0x7d, 0x6e, 0x9f, 0x12, 0x27, 0x9a,
	0x11, 0x65, 0x50, 0x43, 0x2a, 0x2b, 0xbc, 0xef, 0x48, 0xa1, 0x72, 0x56, 0xf5, 0x78, 0x96, 0x8e,
	0x9e, 0x40, 0xd7, 0xb6, 0x7c, 0x9b, 0xcc, 0x94, 0xb2, 0x75, 0xa9, 0x4c, 0xcf, 0x2b, 0xdb, 0x93,
	0x98, 0x9c, 0xaa, 0x8e, 0x7d, 0x41, 0x9d, 0xb4, 0x61, 0x53, 0xf9, 0x4e, 0xff, 0xa5, 0x01, 0x3d,
	0xe5, 0x5d, 0x15, 0xf6, 0x7d, 0x68, 0x33, 0x75, 0x4e, 0xe3, 0x71, 0x67, 0x49, 0x3c, 0x12, 0x94,
	0x91, 0x1e, 0xf0, 0x85, 0xe0, 0xe0, 0xaf, 0x35, 0x68, 0x9d, 0xab, 0xbc, 0x57, 0x8c, 0x49, 0x79,
	0x32, 0x2d, 0x44, 0xe2, 0xcb, 0xf2, 0x48, 0xdc, 0x5e, 0x1d, 0x89, 0xe4, 0xca, 0x42, 0x28, 0x1e,
	0x2e, 0x09, 0xc5, 0x52, 0x3b, 0x72, 0xbe, 0xbf, 0x5f, 0xea, 0xfb, 0xa5, 0xd2, 0x59, 0x77, 0xa3,
	0x0f, 0x60, 0x83, 0x30, 0x16, 0x30, 0x55, 0xcf, 0x28, 0xad, 0xe7, 0x78, 0x44, 0x1c, 0xc9, 0x1e,
	0xfd, 0xb4, 0x86, 0x13, 0xc8, 0x04, 0xe2, 0x62, 0x48, 0xde, 0xa0, 0xff, 0x51, 0x07, 0xf4, 0x75,
	0xe8, 0x58, 0x62, 0x21, 0x2f, 0xd0, 0x87, 0xb0, 0xf1, 0x7a, 0x4f, 0xe2, 0x04, 0x83, 0x1e, 0x40,
	0x27, 0x92, 0x2a, 0xe4, 0x08, 0x51, 0x2e, 0x5c, 0xd5, 0x51, 0x20, 0x81, 0xc7, 0xe7, 0x4b, 0xf5,
	0xc4, 0x7f, 0x36, 0xe0, 0x4a, 0x59, 0x3a, 0xc7, 0x5d, 0x48, 0x25, 0x9d, 0xa9, 0x1a, 0x7a, 0x3b,
	0x4e, 0x18, 0x49, 0x79, 0x16, 0x3b, 0xe9, 0x4d, 0x41, 0xbc, 0x70, 0x16, 0x9b, 0x9a, 0xf4, 0x6a,
	0xea, 0x48, 0x73, 0x1b, 0x78, 0x2b, 0x65, 0x48, 0x7d, 0xcf, 0x16, 0x66, 0x40, 0xa3, 0xf2, 0x0c,
	0x18, 0x41, 0xd3, 0xb6, 0x7c, 0x8b, 0xcd, 0x65, 0xec, 0xfa, 0xe3, 0xeb, 0x79, 0x99, 0x63, 0x46,
	0x63, 0x36, 0x56, 0x30, 0xf4, 0x00, 0xba, 0xe4, 0x65, 0x48, 0x18, 0xf5, 0x88, 0x2f, 0xac, 0x99,
	0xb6, 0xb1, 0x5a, 0x6c, 0x01, 0x8c, 0x3e, 0x05, 0x08, 0x59, 0x10, 0x12, 0x26, 0x28, 0xe1, 0x5a,
	0x53, 0x5a, 0x79, 0xbd, 0xe0, 0xbe, 0x23, 0x39, 0xba, 0x71, 0x06, 0x8a, 0xf6, 0xa1, 0xef, 0x52,
	0x41, 0x67, 0x84, 0x9b, 0xf1, 0x28, 0xa6, 0x42, 0xdb, 0x94, 0xc2, 0xb7, 0x0a, 0x4d, 0x2c, 0x41,
	0xed, 0x49, 0x10, 0xee, 0xb9, 0xd9, 0xbf, 0x68, 0x0f, 0xfa, 0x2e, 0x61, 0x8c, 0x0a, 0xd3, 0x3e,
	0xb5, 0x7c, 0x97, 0x70, 0xad, 0x25, 0x2b, 0xf9, 0x66, 0xb1, 0x15, 0xc6, 0xa8, 0x3d, 0x09, 0xc2,
	0x3d, 0x37, 0xf3, 0x8f, 0x23, 0x03, 0xd6, 0x85, 0xe5, 0x72, 0xad, 0x2d, 0x45, 0x07, 0x85, 0xba,
	0x13, 0x8c, 0xfa, 0xee, 0xa1, 0x45, 0x19, 0x96, 0x38, 0x34, 0x01, 0x70, 0xe2, 0xf7, 0x73, 0x1a,
	0xf8, 0x5c, 0x03, 0x29, 0x55, 0xe8, 0x4e, 0x2a, 0x1d, 0x88, 0xb3, 0x9f, 0x42, 0x71, 0x46, 0x0a,
	0x0d, 0xa0, 0x15, 0x32, 0x1a, 0x30, 0x2a, 0xe6, 0x5a, 0x47, 0xcd, 0x31, 0xf5, 0x1f, 0xdd, 0x87,
	0xa6, 0x5c, 0x1a, 0xe6, 0x5a, 0xb7, 0xbc, 0xf3, 0xbd, 0xc8, 0xac, 0x14, 0x7b, 0x81, 0x7f, 0x42,
	0x5d, 0xac, 0x24, 0x2e, 0x35, 0x54, 0x77, 0xa1, 0x65, 0x33, 0x2a, 0xa8, 0x6d, 0xcd, 0xb4, 0xde,
	0xea, 0xe0, 0x9f, 0x03, 0xf5, 0x9f, 0xea, 0x80, 0x8a, 0x1d, 0xb8, 0xb0, 0xc6, 0xbc, 0x0f, 0x6f,
	0xf0, 0xc8, 0xf3, 0x2c, 0x36, 0x37, 0x3d, 0x8b, 0x9d, 0x39, 0xc1, 0x0f, 0xbe, 0xcc, 0xf6, 0x36,
	0xde, 0x52, 0xf4, 0x03, 0x45, 0xbe, 0x54, 0x15, 0xfe, 0x08, 0xdb, 0x19, 0x23, 0xfe, 0xa7, 0xc5,
	0xa4, 0xba, 0xcd, 0xfa, 0xef, 0xeb, 0xd0, 0x5f, 0x54, 0x94, 0x2d, 0xda, 0x7a, 0xe5, 0xa2, 0x35,
	0xa0, 0x99, 0x6c, 0xb1, 0xf2, 0xa2, 0xfe, 0xf8, 0x5a, 0x31, 0x09, 0x63, 0x2e, 0x56, 0xa8, 0x92,
	0xbc, 0x6f, 0xfc, 0xf7, 0xbc, 0xff, 0x0a, 0xae, 0x06, 0x91, 0x08, 0x23, 0x61, 0xe6, 0x2a, 0x71,
	0xbd, 0x4a, 0x25, 0x6e, 0x27, 0xb2, 0x0b, 0xc4, 0xb8, 0xf9, 0xd9, 0x8c, 0x58, 0x82, 0x38, 0xe6,
	0x74, 0x2e, 0x3b, 0x49, 0x1b, 0xb7, 0x15, 0x65, 0x32, 0x3f, 0xaf, 0xb4, 0x66, 0xc5, 0x4a, 0xbb,
	0x0f, 0x9d, 0x44, 0xd8, 0x14, 0xd4, 0x23, 0xaa, 0x43, 0x14, 0xfc, 0x79, 0x4c, 0x3d, 0x82, 0xe5,
	0x03, 0xd5, 0xe5, 0x31, 0x01, 0x7d, 0x0c, 0x57, 0xa8, 0x6f, 0xcf, 0x22, 0x87, 0x98, 0x0b, 0xed,
	0xad, 0x35, 0xac, 0xef, 0xb4, 0xf0, 0xb6, 0xe2, 0x3d, 0xca, 0x36, 0xb3, 0xbb, 0xe9, 0xc4, 0x69,
	0xab, 0x04, 0x2c, 0x9d, 0x38, 0xf2, 0x26, 0x35, 0x76, 0x2e, 0x9a, 0x2d, 0x54, 0x6a, 0xb6, 0xfa,
	0x31, 0xc0, 0x85, 0x16, 0x74, 0x1b, 0xfa, 0x5c, 0x58, 0x4c, 0x5c, 0x4c, 0x82, 0xa4, 0x72, 0xba,
	0x92, 0x9a, 0x8e, 0x81, 0x21, 0x74, 0x89, 0xef, 0xe4, 0xa7, 0x05, 0x10, 0xdf, 0x51, 0x88, 0xf1,
	0xaf, 0xeb, 0xd0, 0x54, 0x0b, 0xc0, 0x3e, 0xb4, 0xd2, 0xb5, 0x0f, 0xbd, 0x6e, 0x21, 0x1c, 0x94,
	0xcf, 0x54, 0xbd, 0x86, 0xbe, 0x85, 0x6e, 0x76, 0xdd, 0x40, 0x55, 0xd6, 0xc2, 0x41, 0xa5, 0x8d,
	0x45, 0xaf, 0xa1, 0xe7, 0xd0, 0xc9, 0x8c, 0x7b, 0x54, 0x68, 0x6f, 0xc5, 0x5d, 0x60, 0xb9, 0xa1,
	0x2f, 0xa0, 0xb7, 0x30, 0x85, 0x51, 0xa5, 0x9d, 0x73, 0xb9, 0xbe, 0xe7, 0xd0, 0xc9, 0x34, 0x14,
	0x54, 0x61, 0xe9, 0x5c, 0xae, 0xeb, 0x00, 0xba, 0xd9, 0xe6, 0x54, 0x74, 0x62, 0x49, 0xeb, 0x1a,
	0x5c, 0x2b, 0x74, 0xbd, 0x47, 0xf1, 0x67, 0xb3, 0x5e, 0x43, 0x8f, 0x61, 0x43, 0xee, 0xa3, 0xe8,
	0xe6, 0xaa, 0xcf, 0x86, 0xc1, 0xad, 0x95, 0x4b, 0xac, 0x5e, 0x9b, 0x7c, 0xf2, 0xcd, 0xbd, 0x6a,
	0x9f, 0xae, 0x0f, 0x32, 0x94, 0x70, 0x3a, 0x6d, 0x4a, 0xe2, 0xee, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x48, 0x5d, 0x4e, 0x2d, 0x1a, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BuildsClient is the client API for Builds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuildsClient interface {
	// Gets a build.
	//
	// By default the returned build does not include all fields.
	// See GetBuildRequest.fields.
	//
	// Buildbot: if the specified build is a buildbot build, converts it to Build
	// message with the following rules:
	// * bucket names are full, e.g. "master.chromium". Note that LUCI buckets
	//   in v2 are shortened, e.g. "ci".
	// * if a v2 Build field does not make sense in V1, it is unset/empty.
	// * step support is not implemented for Buildbot builds.
	// Note that it does not support getting a buildbot build by build number.
	GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error)
	// Searches for builds.
	//
	// Buildbot: can return Buildbot builds, see GetBuild for conversion rules.
	// For example, response may include a mix of LUCI and Buildbot builds if the
	// predicate is a CL.
	// Cannot search in a buildbot bucket or buildbot builder, e.g.
	// {
	//   "predicate": {
	//     "builder": {
	//       "project": "chromium",
	//       "bucket": "master.chromium",
	//       "builder": "linux-rel"
	//     }
	//   }
	// }
	// will look for builds in "master.chromium" LUCI bucket which probably does
	// not exist.
	SearchBuilds(ctx context.Context, in *SearchBuildsRequest, opts ...grpc.CallOption) (*SearchBuildsResponse, error)
	// Updates a build. Returns an empty build.
	//
	// RPC metadata must include "X-Build-Token" key with a token
	// generated by the server when scheduling the build.
	UpdateBuild(ctx context.Context, in *UpdateBuildRequest, opts ...grpc.CallOption) (*Build, error)
	// Schedules a new build.
	// The requester must have at least SCHEDULER role in the destination bucket.
	ScheduleBuild(ctx context.Context, in *ScheduleBuildRequest, opts ...grpc.CallOption) (*Build, error)
	// Cancels a build.
	// The requester must have at least SCHEDULER role in the destination bucket.
	CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*Build, error)
	// Asynchronously cancels all builds matching a predicate.
	// The requester must have at least SCHEDULER role in the destination bucket.
	CancelBuilds(ctx context.Context, in *CancelBuildsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Executes multiple requests in a batch.
	// The response code is always OK.
	Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
}
type buildsPRPCClient struct {
	client *prpc.Client
}

func NewBuildsPRPCClient(client *prpc.Client) BuildsClient {
	return &buildsPRPCClient{client}
}

func (c *buildsPRPCClient) GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.client.Call(ctx, "buildbucket.v2.Builds", "GetBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsPRPCClient) SearchBuilds(ctx context.Context, in *SearchBuildsRequest, opts ...grpc.CallOption) (*SearchBuildsResponse, error) {
	out := new(SearchBuildsResponse)
	err := c.client.Call(ctx, "buildbucket.v2.Builds", "SearchBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsPRPCClient) UpdateBuild(ctx context.Context, in *UpdateBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.client.Call(ctx, "buildbucket.v2.Builds", "UpdateBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsPRPCClient) ScheduleBuild(ctx context.Context, in *ScheduleBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.client.Call(ctx, "buildbucket.v2.Builds", "ScheduleBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsPRPCClient) CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.client.Call(ctx, "buildbucket.v2.Builds", "CancelBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsPRPCClient) CancelBuilds(ctx context.Context, in *CancelBuildsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "buildbucket.v2.Builds", "CancelBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsPRPCClient) Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.client.Call(ctx, "buildbucket.v2.Builds", "Batch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type buildsClient struct {
	cc *grpc.ClientConn
}

func NewBuildsClient(cc *grpc.ClientConn) BuildsClient {
	return &buildsClient{cc}
}

func (c *buildsClient) GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/buildbucket.v2.Builds/GetBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsClient) SearchBuilds(ctx context.Context, in *SearchBuildsRequest, opts ...grpc.CallOption) (*SearchBuildsResponse, error) {
	out := new(SearchBuildsResponse)
	err := c.cc.Invoke(ctx, "/buildbucket.v2.Builds/SearchBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsClient) UpdateBuild(ctx context.Context, in *UpdateBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/buildbucket.v2.Builds/UpdateBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsClient) ScheduleBuild(ctx context.Context, in *ScheduleBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/buildbucket.v2.Builds/ScheduleBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsClient) CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/buildbucket.v2.Builds/CancelBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsClient) CancelBuilds(ctx context.Context, in *CancelBuildsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/buildbucket.v2.Builds/CancelBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsClient) Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/buildbucket.v2.Builds/Batch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildsServer is the server API for Builds service.
type BuildsServer interface {
	// Gets a build.
	//
	// By default the returned build does not include all fields.
	// See GetBuildRequest.fields.
	//
	// Buildbot: if the specified build is a buildbot build, converts it to Build
	// message with the following rules:
	// * bucket names are full, e.g. "master.chromium". Note that LUCI buckets
	//   in v2 are shortened, e.g. "ci".
	// * if a v2 Build field does not make sense in V1, it is unset/empty.
	// * step support is not implemented for Buildbot builds.
	// Note that it does not support getting a buildbot build by build number.
	GetBuild(context.Context, *GetBuildRequest) (*Build, error)
	// Searches for builds.
	//
	// Buildbot: can return Buildbot builds, see GetBuild for conversion rules.
	// For example, response may include a mix of LUCI and Buildbot builds if the
	// predicate is a CL.
	// Cannot search in a buildbot bucket or buildbot builder, e.g.
	// {
	//   "predicate": {
	//     "builder": {
	//       "project": "chromium",
	//       "bucket": "master.chromium",
	//       "builder": "linux-rel"
	//     }
	//   }
	// }
	// will look for builds in "master.chromium" LUCI bucket which probably does
	// not exist.
	SearchBuilds(context.Context, *SearchBuildsRequest) (*SearchBuildsResponse, error)
	// Updates a build. Returns an empty build.
	//
	// RPC metadata must include "X-Build-Token" key with a token
	// generated by the server when scheduling the build.
	UpdateBuild(context.Context, *UpdateBuildRequest) (*Build, error)
	// Schedules a new build.
	// The requester must have at least SCHEDULER role in the destination bucket.
	ScheduleBuild(context.Context, *ScheduleBuildRequest) (*Build, error)
	// Cancels a build.
	// The requester must have at least SCHEDULER role in the destination bucket.
	CancelBuild(context.Context, *CancelBuildRequest) (*Build, error)
	// Asynchronously cancels all builds matching a predicate.
	// The requester must have at least SCHEDULER role in the destination bucket.
	CancelBuilds(context.Context, *CancelBuildsRequest) (*empty.Empty, error)
	// Executes multiple requests in a batch.
	// The response code is always OK.
	Batch(context.Context, *BatchRequest) (*BatchResponse, error)
}

// UnimplementedBuildsServer can be embedded to have forward compatible implementations.
type UnimplementedBuildsServer struct {
}

func (*UnimplementedBuildsServer) GetBuild(ctx context.Context, req *GetBuildRequest) (*Build, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetBuild not implemented")
}
func (*UnimplementedBuildsServer) SearchBuilds(ctx context.Context, req *SearchBuildsRequest) (*SearchBuildsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SearchBuilds not implemented")
}
func (*UnimplementedBuildsServer) UpdateBuild(ctx context.Context, req *UpdateBuildRequest) (*Build, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateBuild not implemented")
}
func (*UnimplementedBuildsServer) ScheduleBuild(ctx context.Context, req *ScheduleBuildRequest) (*Build, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ScheduleBuild not implemented")
}
func (*UnimplementedBuildsServer) CancelBuild(ctx context.Context, req *CancelBuildRequest) (*Build, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelBuild not implemented")
}
func (*UnimplementedBuildsServer) CancelBuilds(ctx context.Context, req *CancelBuildsRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelBuilds not implemented")
}
func (*UnimplementedBuildsServer) Batch(ctx context.Context, req *BatchRequest) (*BatchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Batch not implemented")
}

func RegisterBuildsServer(s prpc.Registrar, srv BuildsServer) {
	s.RegisterService(&_Builds_serviceDesc, srv)
}

func _Builds_GetBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildsServer).GetBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbucket.v2.Builds/GetBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildsServer).GetBuild(ctx, req.(*GetBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builds_SearchBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildsServer).SearchBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbucket.v2.Builds/SearchBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildsServer).SearchBuilds(ctx, req.(*SearchBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builds_UpdateBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildsServer).UpdateBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbucket.v2.Builds/UpdateBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildsServer).UpdateBuild(ctx, req.(*UpdateBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builds_ScheduleBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildsServer).ScheduleBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbucket.v2.Builds/ScheduleBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildsServer).ScheduleBuild(ctx, req.(*ScheduleBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builds_CancelBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildsServer).CancelBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbucket.v2.Builds/CancelBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildsServer).CancelBuild(ctx, req.(*CancelBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builds_CancelBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildsServer).CancelBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbucket.v2.Builds/CancelBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildsServer).CancelBuilds(ctx, req.(*CancelBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builds_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildsServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbucket.v2.Builds/Batch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildsServer).Batch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Builds_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buildbucket.v2.Builds",
	HandlerType: (*BuildsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBuild",
			Handler:    _Builds_GetBuild_Handler,
		},
		{
			MethodName: "SearchBuilds",
			Handler:    _Builds_SearchBuilds_Handler,
		},
		{
			MethodName: "UpdateBuild",
			Handler:    _Builds_UpdateBuild_Handler,
		},
		{
			MethodName: "ScheduleBuild",
			Handler:    _Builds_ScheduleBuild_Handler,
		},
		{
			MethodName: "CancelBuild",
			Handler:    _Builds_CancelBuild_Handler,
		},
		{
			MethodName: "CancelBuilds",
			Handler:    _Builds_CancelBuilds_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _Builds_Batch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/buildbucket/proto/rpc.proto",
}
