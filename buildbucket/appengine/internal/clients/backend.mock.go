// Code generated by MockGen. DO NOT EDIT.
// Source: backend.go

package clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	buildbucketpb "go.chromium.org/luci/buildbucket/proto"
	grpc "google.golang.org/grpc"
)

// MockTaskBackendClient is a mock of TaskBackendClient interface.
type MockTaskBackendClient struct {
	ctrl     *gomock.Controller
	recorder *MockTaskBackendClientMockRecorder
}

// MockTaskBackendClientMockRecorder is the mock recorder for MockTaskBackendClient.
type MockTaskBackendClientMockRecorder struct {
	mock *MockTaskBackendClient
}

// NewMockTaskBackendClient creates a new mock instance.
func NewMockTaskBackendClient(ctrl *gomock.Controller) *MockTaskBackendClient {
	mock := &MockTaskBackendClient{ctrl: ctrl}
	mock.recorder = &MockTaskBackendClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskBackendClient) EXPECT() *MockTaskBackendClientMockRecorder {
	return m.recorder
}

// CancelTasks mocks base method.
func (m *MockTaskBackendClient) CancelTasks(ctx context.Context, in *buildbucketpb.CancelTasksRequest, opts ...grpc.CallOption) (*buildbucketpb.CancelTasksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelTasks", varargs...)
	ret0, _ := ret[0].(*buildbucketpb.CancelTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTasks indicates an expected call of CancelTasks.
func (mr *MockTaskBackendClientMockRecorder) CancelTasks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTasks", reflect.TypeOf((*MockTaskBackendClient)(nil).CancelTasks), varargs...)
}

// FetchTasks mocks base method.
func (m *MockTaskBackendClient) FetchTasks(ctx context.Context, in *buildbucketpb.FetchTasksRequest, opts ...grpc.CallOption) (*buildbucketpb.FetchTasksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchTasks", varargs...)
	ret0, _ := ret[0].(*buildbucketpb.FetchTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTasks indicates an expected call of FetchTasks.
func (mr *MockTaskBackendClientMockRecorder) FetchTasks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTasks", reflect.TypeOf((*MockTaskBackendClient)(nil).FetchTasks), varargs...)
}

// RunTask mocks base method.
func (m *MockTaskBackendClient) RunTask(ctx context.Context, in *buildbucketpb.RunTaskRequest, opts ...grpc.CallOption) (*buildbucketpb.RunTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunTask", varargs...)
	ret0, _ := ret[0].(*buildbucketpb.RunTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunTask indicates an expected call of RunTask.
func (mr *MockTaskBackendClientMockRecorder) RunTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTask", reflect.TypeOf((*MockTaskBackendClient)(nil).RunTask), varargs...)
}

// ValidateConfigs mocks base method.
func (m *MockTaskBackendClient) ValidateConfigs(ctx context.Context, in *buildbucketpb.ValidateConfigsRequest, opts ...grpc.CallOption) (*buildbucketpb.ValidateConfigsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateConfigs", varargs...)
	ret0, _ := ret[0].(*buildbucketpb.ValidateConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateConfigs indicates an expected call of ValidateConfigs.
func (mr *MockTaskBackendClientMockRecorder) ValidateConfigs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfigs", reflect.TypeOf((*MockTaskBackendClient)(nil).ValidateConfigs), varargs...)
}
