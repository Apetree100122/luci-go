// Copyright 2020 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cipd.plugin;

option go_package = "go.chromium.org/luci/cipd/client/cipd/plugin/protocol";

import "google/protobuf/empty.proto";

import "go.chromium.org/luci/cipd/api/cipd/v1/cas.proto";
import "go.chromium.org/luci/cipd/api/cipd/v1/repo.proto";


// Host is implemented by the main CIPD client process.
//
// It exposes RPC shared by all plugin kinds. RPCs specific to a particular
// plugin kinds are exposed via separate services.
service Host {
  // Log adds a logging message to the CIPD client logging output.
  rpc Log(LogRequest) returns (google.protobuf.Empty);

  // Lists metadata entries attached to a package instance.
  //
  // Either returns all metadata or only entries with requested keys. The list
  // is sorted by the registration time of metadata entries (the most recent
  // first).
  //
  // Returns one page of the results. Use `next_page_token` to fetch the next
  // page. The last page has `next_page_token` empty.
  rpc ListMetadata(ListMetadataRequest) returns (ListMetadataResponse);
}


// Handshake is sent in a compact (no new lines) JSONPB encoding over stdin from
// the plugin host (e.g. CIPD client) to the plugin process.
//
// It instructs the plugin how to connect and authenticate to the host.
message Handshake {
  int32 port = 1;     // localhost TCP port to connect to
  string ticket = 2;  // a secret string to send as x-plugin-ticket metadata
}


// LogRequest results in a logging line in the CIPD client log.
message LogRequest {
  string severity = 1;  // "debug", info", "warning", "error"
  string message = 2;
}


// ListMetadataRequest contains arguments for ListMetadata RPC.
message ListMetadataRequest {
  // URL ("https://...") of the CIPD backend that hosts the package.
  string service_url = 1;
  // The package that holds the instance we list metadata of.
  string package = 2;
  // The instance to list metadata of.
  cipd.ObjectRef instance = 3;
  // Metadata keys to limit the listing to or empty to list all metadata.
  repeated string keys = 4;
  // Maximum number of results to return on one page.
  int32 page_size = 20;
  // Value of 'next_page_token' from the previous response.
  string page_token = 21;
}


// ListMetadataResponse contains one page of results.
message ListMetadataResponse {
  // Discovered metadata ordered by 'attached_ts' (the most recent first).
  repeated cipd.InstanceMetadata metadata = 1;
  // Not empty if potentially have more metadata, can be passed to ListMetadata.
  string next_page_token = 20;
}
