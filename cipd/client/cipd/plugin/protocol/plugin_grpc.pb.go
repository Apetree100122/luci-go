// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HostClient is the client API for Host service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostClient interface {
	// Log adds a logging message to the CIPD client logging output.
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists metadata entries attached to a package instance.
	//
	// Either returns all metadata or only entries with requested keys. The list
	// is sorted by the registration time of metadata entries (the most recent
	// first).
	//
	// Returns one page of the results. Use `next_page_token` to fetch the next
	// page. The last page has `next_page_token` empty.
	ListMetadata(ctx context.Context, in *ListMetadataRequest, opts ...grpc.CallOption) (*ListMetadataResponse, error)
}

type hostClient struct {
	cc grpc.ClientConnInterface
}

func NewHostClient(cc grpc.ClientConnInterface) HostClient {
	return &hostClient{cc}
}

func (c *hostClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cipd.plugin.Host/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) ListMetadata(ctx context.Context, in *ListMetadataRequest, opts ...grpc.CallOption) (*ListMetadataResponse, error) {
	out := new(ListMetadataResponse)
	err := c.cc.Invoke(ctx, "/cipd.plugin.Host/ListMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServer is the server API for Host service.
// All implementations must embed UnimplementedHostServer
// for forward compatibility
type HostServer interface {
	// Log adds a logging message to the CIPD client logging output.
	Log(context.Context, *LogRequest) (*empty.Empty, error)
	// Lists metadata entries attached to a package instance.
	//
	// Either returns all metadata or only entries with requested keys. The list
	// is sorted by the registration time of metadata entries (the most recent
	// first).
	//
	// Returns one page of the results. Use `next_page_token` to fetch the next
	// page. The last page has `next_page_token` empty.
	ListMetadata(context.Context, *ListMetadataRequest) (*ListMetadataResponse, error)
	mustEmbedUnimplementedHostServer()
}

// UnimplementedHostServer must be embedded to have forward compatible implementations.
type UnimplementedHostServer struct {
}

func (UnimplementedHostServer) Log(context.Context, *LogRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedHostServer) ListMetadata(context.Context, *ListMetadataRequest) (*ListMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetadata not implemented")
}
func (UnimplementedHostServer) mustEmbedUnimplementedHostServer() {}

// UnsafeHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServer will
// result in compilation errors.
type UnsafeHostServer interface {
	mustEmbedUnimplementedHostServer()
}

func RegisterHostServer(s grpc.ServiceRegistrar, srv HostServer) {
	s.RegisterService(&_Host_serviceDesc, srv)
}

func _Host_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cipd.plugin.Host/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_ListMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).ListMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cipd.plugin.Host/ListMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).ListMetadata(ctx, req.(*ListMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Host_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cipd.plugin.Host",
	HandlerType: (*HostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _Host_Log_Handler,
		},
		{
			MethodName: "ListMetadata",
			Handler:    _Host_ListMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/cipd/client/cipd/plugin/protocol/plugin.proto",
}
