// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/logdog/api/endpoints/coordinator/services/v1/tasks.proto

package logdog

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ArchiveDispatchTask is an internal task used by the Coordinator to schedule
// an archival dispatch.
type ArchiveDispatchTask struct {
	// The hash ID for the log stream to archive.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The archival key of the previous archive task, to ensure only a single
	// retry is tasked.
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArchiveDispatchTask) Reset()         { *m = ArchiveDispatchTask{} }
func (m *ArchiveDispatchTask) String() string { return proto.CompactTextString(m) }
func (*ArchiveDispatchTask) ProtoMessage()    {}
func (*ArchiveDispatchTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd952f8ecee7e922, []int{0}
}

func (m *ArchiveDispatchTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArchiveDispatchTask.Unmarshal(m, b)
}
func (m *ArchiveDispatchTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArchiveDispatchTask.Marshal(b, m, deterministic)
}
func (m *ArchiveDispatchTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveDispatchTask.Merge(m, src)
}
func (m *ArchiveDispatchTask) XXX_Size() int {
	return xxx_messageInfo_ArchiveDispatchTask.Size(m)
}
func (m *ArchiveDispatchTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveDispatchTask.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveDispatchTask proto.InternalMessageInfo

func (m *ArchiveDispatchTask) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ArchiveDispatchTask) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

// ArchiveTask is a task queue task description for the archival of a single
// log stream.
type ArchiveTask struct {
	// The name of the project that this stream is bound to.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The hash ID of the log stream to archive.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The TaskQueue Name of this task, used in the taskqueue pipeline.
	// This is required for ACKing.
	TaskName string `protobuf:"bytes,7,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	// TODO(hinoka): Remove everything below here after crbug.com/923557
	// The archival key of the log stream. If this key doesn't match the key in
	// the log stream state, the request is superfluous and should be deleted.
	Key []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Don't waste time archiving the log stream until it is at least this old.
	//
	// This is in place to prevent overly-aggressive archivals from wasting time
	// trying, then failing, becuase the log stream data is still being collected
	// into intermediate storage.
	SettleDelay *duration.Duration `protobuf:"bytes,4,opt,name=settle_delay,json=settleDelay,proto3" json:"settle_delay,omitempty"`
	// The amount of time after the task was created that log stream completeness
	// will be used as a success criteria. If the task's age is older than this
	// value, completeness will not be enforced.
	//
	// The task's age can be calculated by subtracting its lease expiration time
	// (leaseTimestamp) from its enqueued timestamp (enqueueTimestamp).
	CompletePeriod *duration.Duration `protobuf:"bytes,5,opt,name=complete_period,json=completePeriod,proto3" json:"complete_period,omitempty"`
	// The time when this archive task was dispatched.
	//
	// This time is optional, and will be based on the Coordinator's clock. If not
	// zero, it can be used by the Archivist to avoid superfluous archival
	// processing by asserting that IF this time is close to the Archivist's local
	// clock by a specific threshold, it will punt the archival task.
	//
	// Because archival is dispatched by Tumble, the actual encoding of archival
	// parameters is oftentimes delayed such that the request is dispatched to
	// Pub/Sub before the datastore has been updated.
	DispatchedAt         *timestamp.Timestamp `protobuf:"bytes,6,opt,name=dispatched_at,json=dispatchedAt,proto3" json:"dispatched_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ArchiveTask) Reset()         { *m = ArchiveTask{} }
func (m *ArchiveTask) String() string { return proto.CompactTextString(m) }
func (*ArchiveTask) ProtoMessage()    {}
func (*ArchiveTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd952f8ecee7e922, []int{1}
}

func (m *ArchiveTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArchiveTask.Unmarshal(m, b)
}
func (m *ArchiveTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArchiveTask.Marshal(b, m, deterministic)
}
func (m *ArchiveTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveTask.Merge(m, src)
}
func (m *ArchiveTask) XXX_Size() int {
	return xxx_messageInfo_ArchiveTask.Size(m)
}
func (m *ArchiveTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveTask.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveTask proto.InternalMessageInfo

func (m *ArchiveTask) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ArchiveTask) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ArchiveTask) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *ArchiveTask) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ArchiveTask) GetSettleDelay() *duration.Duration {
	if m != nil {
		return m.SettleDelay
	}
	return nil
}

func (m *ArchiveTask) GetCompletePeriod() *duration.Duration {
	if m != nil {
		return m.CompletePeriod
	}
	return nil
}

func (m *ArchiveTask) GetDispatchedAt() *timestamp.Timestamp {
	if m != nil {
		return m.DispatchedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*ArchiveDispatchTask)(nil), "logdog.ArchiveDispatchTask")
	proto.RegisterType((*ArchiveTask)(nil), "logdog.ArchiveTask")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/logdog/api/endpoints/coordinator/services/v1/tasks.proto", fileDescriptor_cd952f8ecee7e922)
}

var fileDescriptor_cd952f8ecee7e922 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xcf, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0x49, 0xfa, 0xfd, 0xb6, 0x76, 0x5b, 0xab, 0xc4, 0x4b, 0xac, 0xa0, 0xa5, 0xa7, 0x9e,
	0xb2, 0xa8, 0x07, 0x2f, 0x82, 0x54, 0x7a, 0x55, 0x24, 0xf4, 0x1e, 0xb6, 0xbb, 0x63, 0xba, 0x36,
	0xc9, 0x2c, 0xbb, 0x93, 0x42, 0xff, 0x24, 0xff, 0x4b, 0xc9, 0xaf, 0x0a, 0x7a, 0xf0, 0xb6, 0xfb,
	0xe6, 0x7d, 0xde, 0xf0, 0x86, 0xbd, 0xa4, 0x18, 0xc9, 0xad, 0xc5, 0x5c, 0x97, 0x79, 0x84, 0x36,
	0xe5, 0x59, 0x29, 0x35, 0xcf, 0x30, 0x55, 0x98, 0x72, 0x61, 0x34, 0x87, 0x42, 0x19, 0xd4, 0x05,
	0x39, 0x2e, 0x11, 0xad, 0xd2, 0x85, 0x20, 0xb4, 0xdc, 0x81, 0xdd, 0x6b, 0x09, 0x8e, 0xef, 0x6f,
	0x39, 0x09, 0xb7, 0x73, 0x91, 0xb1, 0x48, 0x18, 0xf4, 0x1b, 0x72, 0x7a, 0x9d, 0x22, 0xa6, 0x19,
	0xf0, 0x5a, 0xdd, 0x94, 0xef, 0x5c, 0x95, 0x56, 0x90, 0xc6, 0xa2, 0xf1, 0x4d, 0x6f, 0x7e, 0xce,
	0x49, 0xe7, 0xe0, 0x48, 0xe4, 0xa6, 0x31, 0xcc, 0x1f, 0xd8, 0xc5, 0xd2, 0xca, 0xad, 0xde, 0xc3,
	0x4a, 0x3b, 0x23, 0x48, 0x6e, 0xd7, 0xc2, 0xed, 0x82, 0x09, 0xf3, 0xb5, 0x0a, 0xbd, 0x99, 0xb7,
	0x18, 0xc6, 0xbe, 0x56, 0xc1, 0x39, 0xeb, 0xed, 0xe0, 0x10, 0xfa, 0x33, 0x6f, 0x31, 0x8e, 0xab,
	0xe7, 0xfc, 0xd3, 0x67, 0xa3, 0x96, 0xac, 0x89, 0x90, 0x0d, 0x8c, 0xc5, 0x0f, 0x90, 0xd4, 0x62,
	0xdd, 0xb7, 0xcd, 0xf2, 0x8f, 0x59, 0x57, 0x6c, 0x58, 0x55, 0x49, 0x0a, 0x91, 0x43, 0x38, 0xa8,
	0xe5, 0x93, 0x4a, 0x78, 0x15, 0x39, 0x74, 0x8b, 0x7a, 0xc7, 0x45, 0xc1, 0x23, 0x1b, 0x3b, 0x20,
	0xca, 0x20, 0x51, 0x90, 0x89, 0x43, 0xf8, 0x6f, 0xe6, 0x2d, 0x46, 0x77, 0x97, 0x51, 0xd3, 0x2c,
	0xea, 0x9a, 0x45, 0xab, 0xb6, 0x79, 0x3c, 0x6a, 0xec, 0xab, 0xca, 0x1d, 0x3c, 0xb3, 0x33, 0x89,
	0xb9, 0xc9, 0x80, 0x20, 0x31, 0x60, 0x35, 0xaa, 0xf0, 0xff, 0x5f, 0x01, 0x93, 0x8e, 0x78, 0xab,
	0x81, 0xe0, 0x89, 0x9d, 0xaa, 0xf6, 0x38, 0xa0, 0x12, 0x41, 0x61, 0xbf, 0x4e, 0x98, 0xfe, 0x4a,
	0x58, 0x77, 0xc7, 0x8d, 0xc7, 0xdf, 0xc0, 0x92, 0x36, 0xfd, 0xda, 0x71, 0xff, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x42, 0x30, 0xac, 0xd6, 0x05, 0x02, 0x00, 0x00,
}
