// Code generated by svcdec; DO NOT EDIT.

package logdog

import (
	"context"

	proto "github.com/golang/protobuf/proto"

	empty "github.com/golang/protobuf/ptypes/empty"
)

type DecoratedServices struct {
	// Service is the service to decorate.
	Service ServicesServer
	// Prelude is called for each method before forwarding the call to Service.
	// If Prelude returns an error, then the call is skipped and the error is
	// processed via the Postlude (if one is defined), or it is returned directly.
	Prelude func(c context.Context, methodName string, req proto.Message) (context.Context, error)
	// Postlude is called for each method after Service has processed the call, or
	// after the Prelude has returned an error. This takes the the Service's
	// response proto (which may be nil) and/or any error. The decorated
	// service will return the response (possibly mutated) and error that Postlude
	// returns.
	Postlude func(c context.Context, methodName string, rsp proto.Message, err error) error
}

func (s *DecoratedServices) GetConfig(c context.Context, req *empty.Empty) (rsp *GetConfigResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "GetConfig", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.GetConfig(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "GetConfig", rsp, err)
	}
	return
}

func (s *DecoratedServices) RegisterStream(c context.Context, req *RegisterStreamRequest) (rsp *RegisterStreamResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "RegisterStream", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.RegisterStream(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "RegisterStream", rsp, err)
	}
	return
}

func (s *DecoratedServices) LoadStream(c context.Context, req *LoadStreamRequest) (rsp *LoadStreamResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "LoadStream", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.LoadStream(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "LoadStream", rsp, err)
	}
	return
}

func (s *DecoratedServices) TerminateStream(c context.Context, req *TerminateStreamRequest) (rsp *empty.Empty, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "TerminateStream", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.TerminateStream(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "TerminateStream", rsp, err)
	}
	return
}

func (s *DecoratedServices) ArchiveStream(c context.Context, req *ArchiveStreamRequest) (rsp *empty.Empty, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "ArchiveStream", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.ArchiveStream(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "ArchiveStream", rsp, err)
	}
	return
}

func (s *DecoratedServices) RescheduleArchiveTask(c context.Context, req *ArchiveDispatchTask) (rsp *empty.Empty, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "RescheduleArchiveTask", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.RescheduleArchiveTask(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "RescheduleArchiveTask", rsp, err)
	}
	return
}

func (s *DecoratedServices) Batch(c context.Context, req *BatchRequest) (rsp *BatchResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "Batch", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.Batch(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "Batch", rsp, err)
	}
	return
}

func (s *DecoratedServices) LeaseArchiveTasks(c context.Context, req *LeaseRequest) (rsp *LeaseResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "LeaseArchiveTasks", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.LeaseArchiveTasks(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "LeaseArchiveTasks", rsp, err)
	}
	return
}

func (s *DecoratedServices) DeleteArchiveTasks(c context.Context, req *DeleteRequest) (rsp *empty.Empty, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "DeleteArchiveTasks", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.DeleteArchiveTasks(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "DeleteArchiveTasks", rsp, err)
	}
	return
}
