// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/logdog/api/config/svcconfig/config.proto

package svcconfig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Config is the overall instance configuration.
type Config struct {
	// Configuration for the Butler's log transport.
	Transport *Transport `protobuf:"bytes,10,opt,name=transport,proto3" json:"transport,omitempty"`
	// Configuration for intermediate Storage.
	Storage *Storage `protobuf:"bytes,11,opt,name=storage,proto3" json:"storage,omitempty"`
	// Coordinator is the coordinator service configuration.
	Coordinator *Coordinator `protobuf:"bytes,20,opt,name=coordinator,proto3" json:"coordinator,omitempty"`
	// Collector is the collector fleet configuration.
	Collector *Collector `protobuf:"bytes,21,opt,name=collector,proto3" json:"collector,omitempty"`
	// Archivist microservice configuration.
	Archivist            *Archivist `protobuf:"bytes,22,opt,name=archivist,proto3" json:"archivist,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_d90d5c2d0a680180, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetTransport() *Transport {
	if m != nil {
		return m.Transport
	}
	return nil
}

func (m *Config) GetStorage() *Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *Config) GetCoordinator() *Coordinator {
	if m != nil {
		return m.Coordinator
	}
	return nil
}

func (m *Config) GetCollector() *Collector {
	if m != nil {
		return m.Collector
	}
	return nil
}

func (m *Config) GetArchivist() *Archivist {
	if m != nil {
		return m.Archivist
	}
	return nil
}

// Coordinator is the Coordinator service configuration.
type Coordinator struct {
	// The name of the authentication group for administrators.
	AdminAuthGroup string `protobuf:"bytes,10,opt,name=admin_auth_group,json=adminAuthGroup,proto3" json:"admin_auth_group,omitempty"`
	// The name of the authentication group for backend services.
	ServiceAuthGroup string `protobuf:"bytes,11,opt,name=service_auth_group,json=serviceAuthGroup,proto3" json:"service_auth_group,omitempty"`
	// A list of origin URLs that are allowed to perform CORS RPC calls.
	RpcAllowOrigins []string `protobuf:"bytes,20,rep,name=rpc_allow_origins,json=rpcAllowOrigins,proto3" json:"rpc_allow_origins,omitempty"`
	// The maximum amount of time after a prefix has been registered when log
	// streams may also be registered under that prefix.
	//
	// After the expiration period has passed, new log stream registration will
	// fail.
	//
	// Project configurations or stream prefix regitrations may override this by
	// providing >= 0 values for prefix expiration. The smallest configured
	// expiration will be applied.
	PrefixExpiration *duration.Duration `protobuf:"bytes,21,opt,name=prefix_expiration,json=prefixExpiration,proto3" json:"prefix_expiration,omitempty"`
	// The full path of the archival Pub/Sub topic.
	//
	// The Coordinator must have permission to publish to this topic.
	ArchiveTopic string `protobuf:"bytes,30,opt,name=archive_topic,json=archiveTopic,proto3" json:"archive_topic,omitempty"`
	// The amount of time after an archive request has been dispatched before it
	// should be executed.
	//
	// Since terminal messages can arrive out of order, the archival request may
	// be kicked off before all of the log stream data has been loaded into
	// intermediate storage. If this happens, the Archivist will retry archival
	// later autometically.
	//
	// This parameter is an optimization to stop the archivist from wasting its
	// time until the log stream has a reasonable expectation of being available.
	ArchiveSettleDelay *duration.Duration `protobuf:"bytes,31,opt,name=archive_settle_delay,json=archiveSettleDelay,proto3" json:"archive_settle_delay,omitempty"`
	// The amount of time before a log stream is candidate for archival regardless
	// of whether or not it's been terminated or complete.
	//
	// This is a failsafe designed to ensure that log streams with missing records
	// or no terminal record (e.g., Butler crashed) are eventually archived.
	//
	// This should be fairly large (days) to avoid prematurely archiving
	// long-running streams, but should be considerably smaller than the
	// intermediate storage data retention period.
	//
	// If a project's "max_stream_age" is smaller than this value, it will be used
	// on that project's streams.
	ArchiveDelayMax      *duration.Duration `protobuf:"bytes,32,opt,name=archive_delay_max,json=archiveDelayMax,proto3" json:"archive_delay_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Coordinator) Reset()         { *m = Coordinator{} }
func (m *Coordinator) String() string { return proto.CompactTextString(m) }
func (*Coordinator) ProtoMessage()    {}
func (*Coordinator) Descriptor() ([]byte, []int) {
	return fileDescriptor_d90d5c2d0a680180, []int{1}
}

func (m *Coordinator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Coordinator.Unmarshal(m, b)
}
func (m *Coordinator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Coordinator.Marshal(b, m, deterministic)
}
func (m *Coordinator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coordinator.Merge(m, src)
}
func (m *Coordinator) XXX_Size() int {
	return xxx_messageInfo_Coordinator.Size(m)
}
func (m *Coordinator) XXX_DiscardUnknown() {
	xxx_messageInfo_Coordinator.DiscardUnknown(m)
}

var xxx_messageInfo_Coordinator proto.InternalMessageInfo

func (m *Coordinator) GetAdminAuthGroup() string {
	if m != nil {
		return m.AdminAuthGroup
	}
	return ""
}

func (m *Coordinator) GetServiceAuthGroup() string {
	if m != nil {
		return m.ServiceAuthGroup
	}
	return ""
}

func (m *Coordinator) GetRpcAllowOrigins() []string {
	if m != nil {
		return m.RpcAllowOrigins
	}
	return nil
}

func (m *Coordinator) GetPrefixExpiration() *duration.Duration {
	if m != nil {
		return m.PrefixExpiration
	}
	return nil
}

func (m *Coordinator) GetArchiveTopic() string {
	if m != nil {
		return m.ArchiveTopic
	}
	return ""
}

func (m *Coordinator) GetArchiveSettleDelay() *duration.Duration {
	if m != nil {
		return m.ArchiveSettleDelay
	}
	return nil
}

func (m *Coordinator) GetArchiveDelayMax() *duration.Duration {
	if m != nil {
		return m.ArchiveDelayMax
	}
	return nil
}

// Collector is the set of configuration parameters for Collector instances.
type Collector struct {
	// The maximum number of concurrent transport messages to process. If <= 0,
	// a default will be chosen based on the transport.
	MaxConcurrentMessages int32 `protobuf:"varint,1,opt,name=max_concurrent_messages,json=maxConcurrentMessages,proto3" json:"max_concurrent_messages,omitempty"`
	// The maximum number of concurrent workers to process each ingested message.
	// If <= 0, collector.DefaultMaxMessageWorkers will be used.
	MaxMessageWorkers int32 `protobuf:"varint,2,opt,name=max_message_workers,json=maxMessageWorkers,proto3" json:"max_message_workers,omitempty"`
	// The maximum number of log stream states to cache locally. If <= 0, a
	// default will be used.
	StateCacheSize int32 `protobuf:"varint,3,opt,name=state_cache_size,json=stateCacheSize,proto3" json:"state_cache_size,omitempty"`
	// The maximum amount of time that cached stream state is valid. If <= 0, a
	// default will be used.
	StateCacheExpiration *duration.Duration `protobuf:"bytes,4,opt,name=state_cache_expiration,json=stateCacheExpiration,proto3" json:"state_cache_expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Collector) Reset()         { *m = Collector{} }
func (m *Collector) String() string { return proto.CompactTextString(m) }
func (*Collector) ProtoMessage()    {}
func (*Collector) Descriptor() ([]byte, []int) {
	return fileDescriptor_d90d5c2d0a680180, []int{2}
}

func (m *Collector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Collector.Unmarshal(m, b)
}
func (m *Collector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Collector.Marshal(b, m, deterministic)
}
func (m *Collector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Collector.Merge(m, src)
}
func (m *Collector) XXX_Size() int {
	return xxx_messageInfo_Collector.Size(m)
}
func (m *Collector) XXX_DiscardUnknown() {
	xxx_messageInfo_Collector.DiscardUnknown(m)
}

var xxx_messageInfo_Collector proto.InternalMessageInfo

func (m *Collector) GetMaxConcurrentMessages() int32 {
	if m != nil {
		return m.MaxConcurrentMessages
	}
	return 0
}

func (m *Collector) GetMaxMessageWorkers() int32 {
	if m != nil {
		return m.MaxMessageWorkers
	}
	return 0
}

func (m *Collector) GetStateCacheSize() int32 {
	if m != nil {
		return m.StateCacheSize
	}
	return 0
}

func (m *Collector) GetStateCacheExpiration() *duration.Duration {
	if m != nil {
		return m.StateCacheExpiration
	}
	return nil
}

// Configuration for the Archivist microservice.
type Archivist struct {
	// The name of the archival Pub/Sub subscription.
	//
	// This should be connected to "archive_topic", and the Archivist must have
	// permission to consume from this subscription.
	Subscription string `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// The number of tasks to run at a time. If blank, the archivist will choose a
	// default value.
	Tasks int32 `protobuf:"varint,2,opt,name=tasks,proto3" json:"tasks,omitempty"`
	// The name of the staging storage bucket. All projects will share the same
	// staging bucket. Logs for a project will be staged under:
	//
	// gs://<gs_staging_bucket>/<app-id>/<project-name>/...
	GsStagingBucket string `protobuf:"bytes,3,opt,name=gs_staging_bucket,json=gsStagingBucket,proto3" json:"gs_staging_bucket,omitempty"`
	// Service-wide index configuration. This is used if per-project configuration
	// is not specified.
	ArchiveIndexConfig   *ArchiveIndexConfig `protobuf:"bytes,10,opt,name=archive_index_config,json=archiveIndexConfig,proto3" json:"archive_index_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Archivist) Reset()         { *m = Archivist{} }
func (m *Archivist) String() string { return proto.CompactTextString(m) }
func (*Archivist) ProtoMessage()    {}
func (*Archivist) Descriptor() ([]byte, []int) {
	return fileDescriptor_d90d5c2d0a680180, []int{3}
}

func (m *Archivist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Archivist.Unmarshal(m, b)
}
func (m *Archivist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Archivist.Marshal(b, m, deterministic)
}
func (m *Archivist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Archivist.Merge(m, src)
}
func (m *Archivist) XXX_Size() int {
	return xxx_messageInfo_Archivist.Size(m)
}
func (m *Archivist) XXX_DiscardUnknown() {
	xxx_messageInfo_Archivist.DiscardUnknown(m)
}

var xxx_messageInfo_Archivist proto.InternalMessageInfo

func (m *Archivist) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

func (m *Archivist) GetTasks() int32 {
	if m != nil {
		return m.Tasks
	}
	return 0
}

func (m *Archivist) GetGsStagingBucket() string {
	if m != nil {
		return m.GsStagingBucket
	}
	return ""
}

func (m *Archivist) GetArchiveIndexConfig() *ArchiveIndexConfig {
	if m != nil {
		return m.ArchiveIndexConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "svcconfig.Config")
	proto.RegisterType((*Coordinator)(nil), "svcconfig.Coordinator")
	proto.RegisterType((*Collector)(nil), "svcconfig.Collector")
	proto.RegisterType((*Archivist)(nil), "svcconfig.Archivist")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/logdog/api/config/svcconfig/config.proto", fileDescriptor_d90d5c2d0a680180)
}

var fileDescriptor_d90d5c2d0a680180 = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdd, 0x6a, 0xdb, 0x3c,
	0x1c, 0xc6, 0x49, 0xbf, 0xde, 0xd7, 0x4a, 0x3f, 0x12, 0x2d, 0xed, 0xbc, 0xc2, 0xba, 0x90, 0x9d,
	0x84, 0x51, 0x6c, 0xe8, 0x60, 0xec, 0x64, 0x1f, 0x5d, 0xda, 0x8d, 0x6d, 0x94, 0x82, 0x53, 0xd8,
	0xa1, 0x50, 0x64, 0x45, 0x11, 0xb5, 0x2d, 0x23, 0xc9, 0xad, 0xd7, 0x6b, 0xd8, 0xd1, 0xae, 0x6f,
	0xd7, 0xb0, 0x6b, 0x18, 0x96, 0xe4, 0x0f, 0xe8, 0x41, 0xe9, 0x51, 0xe2, 0xe7, 0xff, 0xfc, 0x9e,
	0x48, 0x7a, 0x14, 0x83, 0x77, 0x4c, 0x04, 0x64, 0x25, 0x45, 0xca, 0x8b, 0x34, 0x10, 0x92, 0x85,
	0x49, 0x41, 0x78, 0x98, 0x08, 0x16, 0x0b, 0x16, 0xe2, 0x9c, 0x87, 0x44, 0x64, 0x4b, 0xce, 0x42,
	0x75, 0x43, 0xdc, 0x37, 0xfb, 0x11, 0xe4, 0x52, 0x68, 0x01, 0xbd, 0x46, 0x3f, 0xfc, 0xf0, 0xe8,
	0x24, 0x2c, 0xc9, 0x8a, 0xdf, 0xe0, 0xc4, 0x66, 0x1d, 0xbe, 0x7f, 0x74, 0x80, 0xd2, 0x42, 0x62,
	0x46, 0x1d, 0xff, 0xf1, 0xd1, 0xbc, 0x96, 0x38, 0x53, 0xb9, 0x90, 0xda, 0x25, 0x1c, 0x31, 0x21,
	0x58, 0x42, 0x43, 0xf3, 0xb4, 0x28, 0x96, 0x61, 0x5c, 0x48, 0xac, 0xb9, 0xc8, 0xec, 0x7c, 0xf2,
	0x6b, 0x0d, 0x6c, 0xcd, 0x0c, 0x0a, 0x4f, 0x80, 0xd7, 0xd0, 0x3e, 0x18, 0xf7, 0xa6, 0xfd, 0x93,
	0x51, 0xd0, 0x24, 0x07, 0x57, 0xf5, 0x2c, 0x6a, 0x6d, 0xf0, 0x18, 0xfc, 0xe7, 0x56, 0xec, 0xf7,
	0x0d, 0x01, 0x3b, 0xc4, 0xdc, 0x4e, 0xa2, 0xda, 0x02, 0xdf, 0x82, 0x3e, 0x11, 0x42, 0xc6, 0x3c,
	0xc3, 0x5a, 0x48, 0x7f, 0x64, 0x88, 0x83, 0x0e, 0x31, 0x6b, 0xa7, 0x51, 0xd7, 0x5a, 0xad, 0x8d,
	0x88, 0x24, 0xa1, 0xa4, 0xe2, 0xf6, 0xef, 0xad, 0x6d, 0x56, 0xcf, 0xa2, 0xd6, 0x56, 0x31, 0xb6,
	0x0e, 0xae, 0xb4, 0x7f, 0x70, 0x8f, 0x39, 0xad, 0x67, 0x51, 0x6b, 0x9b, 0xfc, 0x5e, 0x07, 0xfd,
	0xce, 0x22, 0xe0, 0x14, 0x0c, 0x70, 0x9c, 0xf2, 0x0c, 0xe1, 0x42, 0xaf, 0x10, 0x93, 0xa2, 0xc8,
	0xcd, 0xd1, 0x78, 0xd1, 0xae, 0xd1, 0x4f, 0x0b, 0xbd, 0xfa, 0x52, 0xa9, 0xf0, 0x18, 0x40, 0x45,
	0xe5, 0x0d, 0x27, 0xb4, 0xeb, 0xed, 0x1b, 0xef, 0xc0, 0x4d, 0x5a, 0xf7, 0x2b, 0x30, 0x94, 0x39,
	0x41, 0x38, 0x49, 0xc4, 0x2d, 0x12, 0x92, 0x33, 0x9e, 0x29, 0x7f, 0x34, 0x5e, 0x9f, 0x7a, 0xd1,
	0x9e, 0xcc, 0xc9, 0x69, 0xa5, 0x5f, 0x5a, 0x19, 0x7e, 0x06, 0xc3, 0x5c, 0xd2, 0x25, 0x2f, 0x11,
	0x2d, 0x73, 0x6e, 0xdb, 0x73, 0x67, 0xf0, 0x2c, 0xb0, 0xf5, 0x06, 0x75, 0xbd, 0xc1, 0x99, 0xab,
	0x37, 0x1a, 0x58, 0xe6, 0xbc, 0x41, 0xe0, 0x4b, 0xb0, 0x63, 0x37, 0x4a, 0x91, 0x16, 0x39, 0x27,
	0xfe, 0x91, 0x59, 0xdc, 0xb6, 0x13, 0xaf, 0x2a, 0x0d, 0x7e, 0x07, 0xa3, 0xda, 0xa4, 0xa8, 0xd6,
	0x09, 0x45, 0x31, 0x4d, 0xf0, 0x4f, 0xff, 0xc5, 0x43, 0xbf, 0x07, 0x1d, 0x36, 0x37, 0xd4, 0x59,
	0x05, 0xc1, 0x73, 0x30, 0xac, 0xc3, 0x4c, 0x0a, 0x4a, 0x71, 0xe9, 0x8f, 0x1f, 0x4a, 0xda, 0x73,
	0x8c, 0xc9, 0xb8, 0xc0, 0xe5, 0xe4, 0x6f, 0x0f, 0x78, 0x4d, 0xc3, 0xf0, 0x0d, 0x78, 0x9a, 0xe2,
	0x12, 0x11, 0x91, 0x91, 0x42, 0x4a, 0x9a, 0x69, 0x94, 0x52, 0xa5, 0x30, 0xa3, 0xca, 0xef, 0x8d,
	0x7b, 0xd3, 0xcd, 0x68, 0x3f, 0xc5, 0xe5, 0xac, 0x99, 0x5e, 0xb8, 0x21, 0x0c, 0xc0, 0x93, 0x8a,
	0x73, 0x66, 0x74, 0x2b, 0xe4, 0x35, 0x95, 0xca, 0x5f, 0x33, 0xcc, 0x30, 0xc5, 0xa5, 0x73, 0xfe,
	0xb0, 0x83, 0xaa, 0x7a, 0xa5, 0xb1, 0xa6, 0x88, 0x60, 0xb2, 0xa2, 0x48, 0xf1, 0x3b, 0xea, 0xaf,
	0x1b, 0xf3, 0xae, 0xd1, 0x67, 0x95, 0x3c, 0xe7, 0x77, 0x14, 0x5e, 0x82, 0x83, 0xae, 0xb3, 0xd3,
	0xd2, 0xc6, 0x43, 0x7b, 0x1d, 0xb5, 0x51, 0x6d, 0x53, 0x93, 0x3f, 0x3d, 0xe0, 0x35, 0xd7, 0x13,
	0x4e, 0xc0, 0xb6, 0x2a, 0x16, 0x8a, 0x48, 0x9e, 0x9b, 0xd0, 0x9e, 0xad, 0xad, 0xab, 0xc1, 0x11,
	0xd8, 0xd4, 0x58, 0x5d, 0xd7, 0xdb, 0xb1, 0x0f, 0xd5, 0x2d, 0x63, 0x0a, 0x29, 0x8d, 0x19, 0xcf,
	0x18, 0x5a, 0x14, 0xe4, 0x9a, 0x6a, 0xb3, 0x07, 0x2f, 0xda, 0x63, 0x6a, 0x6e, 0xf5, 0x4f, 0x46,
	0x86, 0x97, 0x6d, 0xf1, 0x3c, 0x8b, 0xa9, 0x39, 0xe0, 0x25, 0x67, 0xee, 0x45, 0xf0, 0xfc, 0xde,
	0x1f, 0x87, 0x7e, 0xad, 0x5c, 0xf6, 0xd5, 0xd1, 0x94, 0xdf, 0xd1, 0xbe, 0x6d, 0xfc, 0xbf, 0x33,
	0xd8, 0x8d, 0xa0, 0xa4, 0x59, 0x4c, 0x65, 0x75, 0xd3, 0x91, 0xd2, 0x92, 0xe2, 0x54, 0x2d, 0xb6,
	0xcc, 0x39, 0xbc, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xf9, 0xf4, 0x6a, 0xa9, 0x05, 0x00,
	0x00,
}
