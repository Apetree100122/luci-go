// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cq.recipe;

option go_package = "go.chromium.org/luci/cq/api/recipe/v1;recipe";

import "go.chromium.org/luci/buildbucket/proto/common.proto";


// Input provides CQ metadata for CQ-triggered tryjob.
message Input {
  // If active is false, CQ isn't active for the current build.
  bool active = 1;
  // If false, CQ would try to submit CL(s) if all other checks pass.
  // If true, CQ won't try to submit.
  bool dry_run = 2;

  // If true, CQ will not take this build into account while deciding whether CL
  // is good or not. See also `experiment_percentage` of CQ's config file.
  bool experimental = 3;
  // If true, CQ triggered this build directly, otherwise typically indicates
  // a child build triggered by a CQ triggered one (possibly indirectly).
  //
  // Can be spoofed. *DO NOT USE FOR SECURITY CHECKS.*
  //
  // One possible use is to distinguish which builds must be cancelled manually,
  // and which (top_level=True) CQ would cancel itself.
  bool top_level = 4;

  // List of CLs constituting CQ attempt for which this build was triggered.
  //
  // The CLs are ordered s.t. applying them in this order minimizes number of CLs
  // that will be applied before their dependencies *for the same repository*.
  //
  // For example, with 5 CLs spanning 2 projects like this:
  //         A2 -> A1
  //         ^     |       ("X -> Y" denotes X depends on Y)
  //         |     v
  //   B3 -> B2 -> B1
  //
  // [A1, A2, B1, B2, B3] and [B1, A1, A2, B2, B3] are among many possible
  // orders.
  //
  // In case of loops within the same repo, (e.g., A1 <-> A2), the loop is broken
  // off arbitrarily but deterministically, meaning both [A1, A2] and [A2, A1]
  // orders are valid though CQ would choose the same one for each build within
  // the same attempt.
  repeated CL cls = 5;
}

message CL {
  // Source of this CL. Currently, only Gerrit is supported.
  oneof source {
    // Gerrit CL, aka change.
    buildbucket.v2.GerritChange gerrit = 1;
  }
  // List of CLs on which this one depends. Each integer here is an index to the
  // dependency among `Input.cls`.
  repeated int32 deps = 11;
}
