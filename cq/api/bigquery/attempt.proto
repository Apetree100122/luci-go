// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package bigquery;

import "google/protobuf/timestamp.proto";


// Attempt includes the state of one CQ attempt.
//
// An attempt involves doing checks for one or more CLs that could
// potentially be submitted together.
message Attempt {
  // The opaque key unique to this Attempt.
  string key = 1;
  // The LUCI project that this attempt belongs to.
  string project = 2;

  // An opaque key that is unique for a given set of Gerrit change patchsets
  // (or, equivalently, buildsets). The same cl_group_key will be used if
  // another attempt is made for the same set of changes at a different time.
  string cl_group_key = 3;

  // Similar to cl_group_key, except the key will be the same as long as
  // the earliest_equivalent_patchset values are the same, even if the patchset
  // values are different, e.g. when a new "trivial" patchset is uploaded.
  string equivalent_cl_group_key = 4;

  // Time when the attempt started (trigger time of the last CL triggered)
  // and ended (released by CQ).
  google.protobuf.Timestamp start_time = 5;
  google.protobuf.Timestamp end_time = 6;

  // Gerrit changes, with specific patchsets, in this Attempt.
  // There should be one or more.
  repeated GerritChange gerrit_changes = 7;

  // Builds checked as part of this attempt, whether triggered or reused.
  repeated Build builds = 8;

  // Final status of the Attempt.
  AttemptStatus status = 9;
}


// GerritChange represents one revision (patchset) of one Gerrit change
// in an attempt.
//
// See also: GerritChange in buildbucket/proto/common.proto.
message GerritChange {
  // Gerrit hostname, e.g. "chromium-review.googlesource.com".
  string host = 1;
  // Gerrit project, e.g. "chromium/src".
  string project = 2;
  // Change number, e.g. 12345.
  int64 change = 3;
  // Patch set number, e.g. 1.
  int64 patchset = 4;
  // The earliest patchset of the CL that is considered
  // equivalent to the patchset above.
  int64 earliest_equivalent_patchset = 5;

  // The time that the CQ was triggered for this CL in this attempt.
  google.protobuf.Timestamp trigger_time = 6;
  // CQ Mode for this CL, e.g. dry run or full run.
  Mode mode = 7;

  enum SubmitStatus {
    // Default value.
    SUBMIT_STATUS_UNSPECIFIED = 0;

    // CQ didn't try submitting this CL.
    //
    // Includes a case where CQ tried submitting the CL, but submission failed
    // due to transient error leaving CL as is, and CQ didn't try again.
    PENDING = 1;

    // CQ tried to submit, but got presumably transient errors and couldn't
    // ascertain whether submission was successful.
    //
    // It's possible that change was actually submitted, but CQ didn't receive
    // a confirmation from Gerrit and follow up checks of the change status
    // failed, too.
    UNKNOWN = 2;

    // CQ tried to submit, but Gerrit rejected the submission because this
    // Change can't be submitted.
    // Typically, this is because a rebase conflict needs to be resolved,
    // or rarely because the change needs some kind of approval.
    FAILURE = 3;

    // CQ submitted this change (aka "merged" in Gerrit jargon).
    //
    // Submission of Gerrit CLs in an Attempt is not an atomic operation,
    // so it's possible that only some of the GerritChanges are submitted.
    SUCCESS = 4;
  }
  // Whether CQ tried to submit this change and the result of the operation.
  SubmitStatus submit_status = 8;
}

enum Mode {
  // Default, never set.
  MODE_UNSPECIFIED = 0;
  // Run all tests but do not submit.
  DRY_RUN = 1;
  // Run all tests and potentially submit.
  FULL_RUN = 2;
}

// Build represents one tryjob Buildbucket build.
//
// See also: Build in buildbucket/proto/build.proto.
message Build {
  // Buildbucket build ID, unique per Buildbucket instance.
  int64 id = 1;
  // Buildbucket host, e.g. "cr-buildbucket.appspot.com".
  string host = 2;

  // True if this build was pre-existing, or false if it was triggered as
  // part of this CQ attempt.
  bool reused = 3;
  // YES if this build must pass in order for the CLs to be considered
  // ready to submit; NO if the build status should not be used to assess
  // correctness the CLs in the Attempt.
  bool critical = 4;
}

enum AttemptStatus {
  // Default, never set.
  ATTEMPT_STATUS_UNSPECIFIED = 0;
  // Started but not completed. Used by CQ API, TBD.
  STARTED = 1;
  // Ready to submit, all checks passed.
  SUCCESS = 2;
  // Attempt stopped before completion, due to some external event and not
  // a failure of the CLs to pass all tests. For example, this may happen
  // when a new patchset is uploaded, a CL is deleted, etc.
  ABORTED = 3;
  // Completed and failed some check. This may happen when a build failed,
  // footer syntax was incorrect, or CL was not approved.
  FAILURE = 4;
  // Failure in CQ itself caused the Attempt to be dropped.
  INFRA_FAILURE = 5;
}
