// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/results/proto/v1/tests.proto

package resultspb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Specifies search predicate on test variants of results to return.
type TestVariantIDPredicate struct {
	// Test name predicate.
	//
	// Types that are valid to be assigned to NamePredicate:
	//	*TestVariantIDPredicate_Name
	//	*TestVariantIDPredicate_NamePrefix
	NamePredicate isTestVariantIDPredicate_NamePredicate `protobuf_oneof:"name_predicate"`
	// Types that are valid to be assigned to VariantPredicate:
	//	*TestVariantIDPredicate_Variant
	//	*TestVariantIDPredicate_VariantIncludes
	VariantPredicate     isTestVariantIDPredicate_VariantPredicate `protobuf_oneof:"variant_predicate"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *TestVariantIDPredicate) Reset()         { *m = TestVariantIDPredicate{} }
func (m *TestVariantIDPredicate) String() string { return proto.CompactTextString(m) }
func (*TestVariantIDPredicate) ProtoMessage()    {}
func (*TestVariantIDPredicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_4becfa9f0f802ee1, []int{0}
}

func (m *TestVariantIDPredicate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestVariantIDPredicate.Unmarshal(m, b)
}
func (m *TestVariantIDPredicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestVariantIDPredicate.Marshal(b, m, deterministic)
}
func (m *TestVariantIDPredicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestVariantIDPredicate.Merge(m, src)
}
func (m *TestVariantIDPredicate) XXX_Size() int {
	return xxx_messageInfo_TestVariantIDPredicate.Size(m)
}
func (m *TestVariantIDPredicate) XXX_DiscardUnknown() {
	xxx_messageInfo_TestVariantIDPredicate.DiscardUnknown(m)
}

var xxx_messageInfo_TestVariantIDPredicate proto.InternalMessageInfo

type isTestVariantIDPredicate_NamePredicate interface {
	isTestVariantIDPredicate_NamePredicate()
}

type TestVariantIDPredicate_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

type TestVariantIDPredicate_NamePrefix struct {
	NamePrefix string `protobuf:"bytes,2,opt,name=name_prefix,json=namePrefix,proto3,oneof"`
}

func (*TestVariantIDPredicate_Name) isTestVariantIDPredicate_NamePredicate() {}

func (*TestVariantIDPredicate_NamePrefix) isTestVariantIDPredicate_NamePredicate() {}

func (m *TestVariantIDPredicate) GetNamePredicate() isTestVariantIDPredicate_NamePredicate {
	if m != nil {
		return m.NamePredicate
	}
	return nil
}

func (m *TestVariantIDPredicate) GetName() string {
	if x, ok := m.GetNamePredicate().(*TestVariantIDPredicate_Name); ok {
		return x.Name
	}
	return ""
}

func (m *TestVariantIDPredicate) GetNamePrefix() string {
	if x, ok := m.GetNamePredicate().(*TestVariantIDPredicate_NamePrefix); ok {
		return x.NamePrefix
	}
	return ""
}

type isTestVariantIDPredicate_VariantPredicate interface {
	isTestVariantIDPredicate_VariantPredicate()
}

type TestVariantIDPredicate_Variant struct {
	Variant *VariantDef `protobuf:"bytes,3,opt,name=variant,proto3,oneof"`
}

type TestVariantIDPredicate_VariantIncludes struct {
	VariantIncludes *VariantDef `protobuf:"bytes,4,opt,name=variant_includes,json=variantIncludes,proto3,oneof"`
}

func (*TestVariantIDPredicate_Variant) isTestVariantIDPredicate_VariantPredicate() {}

func (*TestVariantIDPredicate_VariantIncludes) isTestVariantIDPredicate_VariantPredicate() {}

func (m *TestVariantIDPredicate) GetVariantPredicate() isTestVariantIDPredicate_VariantPredicate {
	if m != nil {
		return m.VariantPredicate
	}
	return nil
}

func (m *TestVariantIDPredicate) GetVariant() *VariantDef {
	if x, ok := m.GetVariantPredicate().(*TestVariantIDPredicate_Variant); ok {
		return x.Variant
	}
	return nil
}

func (m *TestVariantIDPredicate) GetVariantIncludes() *VariantDef {
	if x, ok := m.GetVariantPredicate().(*TestVariantIDPredicate_VariantIncludes); ok {
		return x.VariantIncludes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TestVariantIDPredicate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TestVariantIDPredicate_Name)(nil),
		(*TestVariantIDPredicate_NamePrefix)(nil),
		(*TestVariantIDPredicate_Variant)(nil),
		(*TestVariantIDPredicate_VariantIncludes)(nil),
	}
}

// Indicates the test subject (e.g. a CL) is absolved from blame
// for an unexpected result of a test variant.
type Exoneration struct {
	Explanation          *Markdown `protobuf:"bytes,1,opt,name=explanation,proto3" json:"explanation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Exoneration) Reset()         { *m = Exoneration{} }
func (m *Exoneration) String() string { return proto.CompactTextString(m) }
func (*Exoneration) ProtoMessage()    {}
func (*Exoneration) Descriptor() ([]byte, []int) {
	return fileDescriptor_4becfa9f0f802ee1, []int{1}
}

func (m *Exoneration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Exoneration.Unmarshal(m, b)
}
func (m *Exoneration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Exoneration.Marshal(b, m, deterministic)
}
func (m *Exoneration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exoneration.Merge(m, src)
}
func (m *Exoneration) XXX_Size() int {
	return xxx_messageInfo_Exoneration.Size(m)
}
func (m *Exoneration) XXX_DiscardUnknown() {
	xxx_messageInfo_Exoneration.DiscardUnknown(m)
}

var xxx_messageInfo_Exoneration proto.InternalMessageInfo

func (m *Exoneration) GetExplanation() *Markdown {
	if m != nil {
		return m.Explanation
	}
	return nil
}

func init() {
	proto.RegisterType((*TestVariantIDPredicate)(nil), "luci.resultsdb.TestVariantIDPredicate")
	proto.RegisterType((*Exoneration)(nil), "luci.resultsdb.Exoneration")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/results/proto/v1/tests.proto", fileDescriptor_4becfa9f0f802ee1)
}

var fileDescriptor_4becfa9f0f802ee1 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4f, 0xf3, 0x30,
	0x10, 0xc5, 0xbf, 0x7c, 0x54, 0x20, 0x1c, 0xa9, 0x14, 0x83, 0x50, 0xd4, 0xa9, 0x74, 0xea, 0x64,
	0xab, 0x41, 0x62, 0x80, 0x2d, 0x2a, 0xa2, 0x19, 0x90, 0xaa, 0x08, 0x31, 0xb0, 0x54, 0x4e, 0x72,
	0x2d, 0x16, 0x89, 0x1d, 0xd9, 0x4e, 0xc9, 0xbf, 0xce, 0x86, 0xe2, 0x38, 0x08, 0x98, 0x32, 0xd9,
	0xef, 0xf9, 0xdd, 0xef, 0xee, 0x8c, 0x96, 0x7b, 0x49, 0xb2, 0x37, 0x25, 0x4b, 0x5e, 0x97, 0x44,
	0xaa, 0x3d, 0x2d, 0xea, 0x8c, 0x53, 0x05, 0xba, 0x2e, 0x8c, 0xa6, 0x95, 0x92, 0x46, 0xd2, 0xc3,
	0x92, 0x1a, 0xd0, 0x46, 0x13, 0x2b, 0xf1, 0xb8, 0x8d, 0x10, 0x17, 0xc9, 0xd3, 0x69, 0x38, 0x0c,
	0x91, 0xc9, 0xb2, 0x94, 0xa2, 0x63, 0xcc, 0x3f, 0x3d, 0x74, 0xf5, 0x0c, 0xda, 0xbc, 0x30, 0xc5,
	0x99, 0x30, 0xf1, 0x6a, 0xa3, 0x20, 0xe7, 0x19, 0x33, 0x80, 0x2f, 0xd1, 0x48, 0xb0, 0x12, 0x02,
	0x6f, 0xe6, 0x2d, 0x4e, 0xd7, 0xff, 0x12, 0xab, 0xf0, 0x35, 0xf2, 0xdb, 0x73, 0x5b, 0x29, 0xd8,
	0xf1, 0x26, 0xf8, 0xef, 0x1e, 0x51, 0x6b, 0x6e, 0xac, 0x87, 0x6f, 0xd1, 0xc9, 0xa1, 0xc3, 0x05,
	0x47, 0x33, 0x6f, 0xe1, 0x87, 0x53, 0xf2, 0x7b, 0x52, 0xe2, 0xba, 0xad, 0x60, 0xb7, 0xf6, 0x92,
	0x3e, 0x8c, 0x1f, 0xd1, 0xc4, 0x5d, 0xb7, 0x5c, 0x64, 0x45, 0x9d, 0x83, 0x0e, 0x46, 0x03, 0x00,
	0x67, 0xae, 0x2a, 0x76, 0x45, 0xd1, 0x04, 0x8d, 0xfb, 0x19, 0xbb, 0x5d, 0xa2, 0x0b, 0x74, 0xde,
	0xa3, 0xbf, 0xcd, 0x79, 0x8c, 0xfc, 0x87, 0x46, 0x0a, 0x50, 0xcc, 0x70, 0x29, 0xf0, 0x1d, 0xf2,
	0xa1, 0xa9, 0x0a, 0x26, 0xac, 0xb4, 0x6b, 0xfb, 0x61, 0xf0, 0xb7, 0xf3, 0x13, 0x53, 0xef, 0xb9,
	0xfc, 0x10, 0xc9, 0xcf, 0x70, 0xb4, 0x7c, 0xa5, 0x83, 0x3e, 0xff, 0xde, 0x19, 0x55, 0x9a, 0x1e,
	0x5b, 0xef, 0xe6, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x34, 0x04, 0x94, 0xf9, 0x01, 0x00, 0x00,
}
