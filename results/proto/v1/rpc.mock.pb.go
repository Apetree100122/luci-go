// Code generated by MockGen. DO NOT EDIT.
// Source: rpc.pb.go

package resultspb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTestResultsClient is a mock of TestResultsClient interface
type MockTestResultsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTestResultsClientMockRecorder
}

// MockTestResultsClientMockRecorder is the mock recorder for MockTestResultsClient
type MockTestResultsClientMockRecorder struct {
	mock *MockTestResultsClient
}

// NewMockTestResultsClient creates a new mock instance
func NewMockTestResultsClient(ctrl *gomock.Controller) *MockTestResultsClient {
	mock := &MockTestResultsClient{ctrl: ctrl}
	mock.recorder = &MockTestResultsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTestResultsClient) EXPECT() *MockTestResultsClientMockRecorder {
	return m.recorder
}

// GetInvocation mocks base method
func (m *MockTestResultsClient) GetInvocation(ctx context.Context, in *GetInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInvocation", varargs...)
	ret0, _ := ret[0].(*Invocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvocation indicates an expected call of GetInvocation
func (mr *MockTestResultsClientMockRecorder) GetInvocation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvocation", reflect.TypeOf((*MockTestResultsClient)(nil).GetInvocation), varargs...)
}

// MockTestResultsServer is a mock of TestResultsServer interface
type MockTestResultsServer struct {
	ctrl     *gomock.Controller
	recorder *MockTestResultsServerMockRecorder
}

// MockTestResultsServerMockRecorder is the mock recorder for MockTestResultsServer
type MockTestResultsServerMockRecorder struct {
	mock *MockTestResultsServer
}

// NewMockTestResultsServer creates a new mock instance
func NewMockTestResultsServer(ctrl *gomock.Controller) *MockTestResultsServer {
	mock := &MockTestResultsServer{ctrl: ctrl}
	mock.recorder = &MockTestResultsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTestResultsServer) EXPECT() *MockTestResultsServerMockRecorder {
	return m.recorder
}

// GetInvocation mocks base method
func (m *MockTestResultsServer) GetInvocation(arg0 context.Context, arg1 *GetInvocationRequest) (*Invocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvocation", arg0, arg1)
	ret0, _ := ret[0].(*Invocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvocation indicates an expected call of GetInvocation
func (mr *MockTestResultsServerMockRecorder) GetInvocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvocation", reflect.TypeOf((*MockTestResultsServer)(nil).GetInvocation), arg0, arg1)
}
