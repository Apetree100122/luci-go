// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/results/proto/v1/rpc.proto

package resultspb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A request message for GetInvocation rpc.
type GetInvocationRequest struct {
	InvocationId string `protobuf:"bytes,1,opt,name=invocation_id,json=invocationId,proto3" json:"invocation_id,omitempty"`
	// Specifies what to return in the invocation.
	View *InvocationView `protobuf:"bytes,2,opt,name=view,proto3" json:"view,omitempty"`
	// List of fields to include in the response.
	// Format: go/advanced-field-masks
	Fields               *field_mask.FieldMask `protobuf:"bytes,3,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetInvocationRequest) Reset()         { *m = GetInvocationRequest{} }
func (m *GetInvocationRequest) String() string { return proto.CompactTextString(m) }
func (*GetInvocationRequest) ProtoMessage()    {}
func (*GetInvocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_157ae96e45d8665b, []int{0}
}

func (m *GetInvocationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInvocationRequest.Unmarshal(m, b)
}
func (m *GetInvocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInvocationRequest.Marshal(b, m, deterministic)
}
func (m *GetInvocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInvocationRequest.Merge(m, src)
}
func (m *GetInvocationRequest) XXX_Size() int {
	return xxx_messageInfo_GetInvocationRequest.Size(m)
}
func (m *GetInvocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInvocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInvocationRequest proto.InternalMessageInfo

func (m *GetInvocationRequest) GetInvocationId() string {
	if m != nil {
		return m.InvocationId
	}
	return ""
}

func (m *GetInvocationRequest) GetView() *InvocationView {
	if m != nil {
		return m.View
	}
	return nil
}

func (m *GetInvocationRequest) GetFields() *field_mask.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

// InvocationView specifies what parts of Invocation to return.
type InvocationView struct {
	// Do not return test variants that had at least one expected result.
	// Will be used by UI by default.
	ExcludeExpected bool `protobuf:"varint,1,opt,name=exclude_expected,json=excludeExpected,proto3" json:"exclude_expected,omitempty"`
	// Do not return test variants with exonerations.
	ExcludeExonerated bool `protobuf:"varint,2,opt,name=exclude_exonerated,json=excludeExonerated,proto3" json:"exclude_exonerated,omitempty"`
	// Do not return test variants from inconsequential invocations.
	ExcludeInconsequential bool `protobuf:"varint,3,opt,name=exclude_inconsequential,json=excludeInconsequential,proto3" json:"exclude_inconsequential,omitempty"`
	// If specified, return only test variants that satisfy any of these predicates.
	TestVariants []*TestVariantIDPredicate `protobuf:"bytes,4,rep,name=test_variants,json=testVariants,proto3" json:"test_variants,omitempty"`
	// If specified, return only these test logs.
	LogNames []string `protobuf:"bytes,5,rep,name=log_names,json=logNames,proto3" json:"log_names,omitempty"`
	// If true, guarantees that returned Log messages have "contents"
	// field populated.
	// If a log is stored externally (Isolate, GS), RPC will load them before
	// returning.
	LogContents          bool     `protobuf:"varint,6,opt,name=log_contents,json=logContents,proto3" json:"log_contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvocationView) Reset()         { *m = InvocationView{} }
func (m *InvocationView) String() string { return proto.CompactTextString(m) }
func (*InvocationView) ProtoMessage()    {}
func (*InvocationView) Descriptor() ([]byte, []int) {
	return fileDescriptor_157ae96e45d8665b, []int{1}
}

func (m *InvocationView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvocationView.Unmarshal(m, b)
}
func (m *InvocationView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvocationView.Marshal(b, m, deterministic)
}
func (m *InvocationView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvocationView.Merge(m, src)
}
func (m *InvocationView) XXX_Size() int {
	return xxx_messageInfo_InvocationView.Size(m)
}
func (m *InvocationView) XXX_DiscardUnknown() {
	xxx_messageInfo_InvocationView.DiscardUnknown(m)
}

var xxx_messageInfo_InvocationView proto.InternalMessageInfo

func (m *InvocationView) GetExcludeExpected() bool {
	if m != nil {
		return m.ExcludeExpected
	}
	return false
}

func (m *InvocationView) GetExcludeExonerated() bool {
	if m != nil {
		return m.ExcludeExonerated
	}
	return false
}

func (m *InvocationView) GetExcludeInconsequential() bool {
	if m != nil {
		return m.ExcludeInconsequential
	}
	return false
}

func (m *InvocationView) GetTestVariants() []*TestVariantIDPredicate {
	if m != nil {
		return m.TestVariants
	}
	return nil
}

func (m *InvocationView) GetLogNames() []string {
	if m != nil {
		return m.LogNames
	}
	return nil
}

func (m *InvocationView) GetLogContents() bool {
	if m != nil {
		return m.LogContents
	}
	return false
}

func init() {
	proto.RegisterType((*GetInvocationRequest)(nil), "luci.resultsdb.GetInvocationRequest")
	proto.RegisterType((*InvocationView)(nil), "luci.resultsdb.InvocationView")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/results/proto/v1/rpc.proto", fileDescriptor_157ae96e45d8665b)
}

var fileDescriptor_157ae96e45d8665b = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x69, 0xbb, 0x54, 0xad, 0xdb, 0x2e, 0x60, 0x21, 0x88, 0x82, 0x84, 0x42, 0x41, 0xa8,
	0x1c, 0x70, 0xd4, 0x20, 0xc1, 0x81, 0x1b, 0x7f, 0x55, 0x21, 0x10, 0x32, 0x68, 0x0f, 0x5c, 0x22,
	0xc7, 0x99, 0x0d, 0xd6, 0xba, 0x76, 0x89, 0x9d, 0xee, 0xbe, 0x0f, 0x2f, 0xc0, 0x23, 0x22, 0x3b,
	0xee, 0x46, 0xad, 0x40, 0xea, 0xd1, 0xdf, 0xfc, 0xbe, 0x99, 0xf1, 0xe7, 0x04, 0xa5, 0x95, 0x26,
	0xfc, 0x67, 0xad, 0xd7, 0xa2, 0x59, 0x13, 0x5d, 0x57, 0xa9, 0x6c, 0xb8, 0x48, 0x6b, 0x30, 0x8d,
	0xb4, 0x26, 0xdd, 0xd4, 0xda, 0xea, 0x74, 0xbb, 0x4c, 0xeb, 0x0d, 0x27, 0xfe, 0x80, 0x4f, 0x1d,
	0x40, 0x02, 0x50, 0x16, 0x71, 0x52, 0x69, 0x5d, 0x49, 0x68, 0xd1, 0xa2, 0x39, 0x4f, 0xcf, 0x05,
	0xc8, 0x32, 0x5f, 0x33, 0x73, 0xd1, 0x3a, 0xe2, 0x97, 0xc7, 0x8d, 0x10, 0x6a, 0xab, 0x39, 0xb3,
	0x42, 0xab, 0xe0, 0x5b, 0x1e, 0xe7, 0xb3, 0x60, 0xac, 0x69, 0x2d, 0xf3, 0xdf, 0x3d, 0x74, 0xf7,
	0x23, 0xd8, 0xd5, 0x75, 0x2b, 0x0a, 0xbf, 0x1a, 0x30, 0x16, 0x3f, 0x46, 0xb3, 0xae, 0x7f, 0x2e,
	0xca, 0xa8, 0x97, 0xf4, 0x16, 0x63, 0x3a, 0xed, 0xc4, 0x55, 0x89, 0x33, 0x74, 0xb2, 0x15, 0x70,
	0x19, 0xf5, 0x93, 0xde, 0x62, 0x92, 0x3d, 0x24, 0xfb, 0x37, 0x25, 0x5d, 0xd7, 0x33, 0x01, 0x97,
	0xd4, 0xb3, 0x38, 0x43, 0x43, 0x7f, 0x61, 0x13, 0x0d, 0xbc, 0x2b, 0x26, 0x6d, 0x1e, 0x64, 0x97,
	0x07, 0xf9, 0xe0, 0xca, 0x9f, 0x99, 0xb9, 0xa0, 0x81, 0x9c, 0xff, 0xe9, 0xa3, 0xd3, 0xfd, 0x66,
	0xf8, 0x19, 0xba, 0x0d, 0x57, 0x5c, 0x36, 0x25, 0xe4, 0x70, 0xb5, 0x01, 0x6e, 0xa1, 0x5d, 0x71,
	0x44, 0x6f, 0x05, 0xfd, 0x7d, 0x90, 0xf1, 0x73, 0x84, 0x3b, 0x54, 0x2b, 0xa8, 0x99, 0x83, 0xfb,
	0x1e, 0xbe, 0x73, 0x0d, 0xef, 0x0a, 0xf8, 0x15, 0xba, 0xbf, 0xc3, 0x85, 0xe2, 0x5a, 0x19, 0x97,
	0x88, 0xb2, 0x82, 0x49, 0xbf, 0xf1, 0x88, 0xde, 0x0b, 0xe5, 0xd5, 0x7e, 0x15, 0x7f, 0x42, 0x33,
	0x17, 0x6d, 0xbe, 0x65, 0xb5, 0x60, 0xca, 0x9a, 0xe8, 0x24, 0x19, 0x2c, 0x26, 0xd9, 0xd3, 0xc3,
	0x58, 0xbe, 0x83, 0xb1, 0x67, 0x2d, 0xb3, 0x7a, 0xf7, 0xb5, 0x86, 0x52, 0x70, 0x66, 0x81, 0x4e,
	0x6d, 0xa7, 0x1b, 0xfc, 0x00, 0x8d, 0xa5, 0xae, 0x72, 0xc5, 0xd6, 0x60, 0xa2, 0x9b, 0xc9, 0x60,
	0x31, 0xa6, 0x23, 0xa9, 0xab, 0x2f, 0xee, 0x8c, 0x1f, 0xa1, 0xa9, 0x2b, 0x72, 0xad, 0x2c, 0xb8,
	0x41, 0x43, 0xbf, 0xd7, 0x44, 0xea, 0xea, 0x6d, 0x90, 0xb2, 0x02, 0x4d, 0xdc, 0x1c, 0xda, 0x4e,
	0xc5, 0xdf, 0xd0, 0x6c, 0xef, 0x99, 0xf1, 0x93, 0xc3, 0xad, 0xfe, 0xf5, 0x15, 0xc4, 0xf1, 0xff,
	0x9f, 0x74, 0x7e, 0xe3, 0xcd, 0xf2, 0xc7, 0x71, 0x3f, 0xc3, 0xeb, 0x20, 0x6c, 0x8a, 0x62, 0xe8,
	0xb5, 0x17, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xae, 0x4d, 0xf5, 0x1e, 0x46, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestResultsClient is the client API for TestResults service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestResultsClient interface {
	// Returns an invocation.
	//
	// If the invocation isn't finalized, but it's finalization deadline
	// is reached, it is finalized as a part of this RPC.
	GetInvocation(ctx context.Context, in *GetInvocationRequest, opts ...grpc.CallOption) (*Invocation, error)
}
type testResultsPRPCClient struct {
	client *prpc.Client
}

func NewTestResultsPRPCClient(client *prpc.Client) TestResultsClient {
	return &testResultsPRPCClient{client}
}

func (c *testResultsPRPCClient) GetInvocation(ctx context.Context, in *GetInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.client.Call(ctx, "luci.resultsdb.TestResults", "GetInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type testResultsClient struct {
	cc *grpc.ClientConn
}

func NewTestResultsClient(cc *grpc.ClientConn) TestResultsClient {
	return &testResultsClient{cc}
}

func (c *testResultsClient) GetInvocation(ctx context.Context, in *GetInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.cc.Invoke(ctx, "/luci.resultsdb.TestResults/GetInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestResultsServer is the server API for TestResults service.
type TestResultsServer interface {
	// Returns an invocation.
	//
	// If the invocation isn't finalized, but it's finalization deadline
	// is reached, it is finalized as a part of this RPC.
	GetInvocation(context.Context, *GetInvocationRequest) (*Invocation, error)
}

// UnimplementedTestResultsServer can be embedded to have forward compatible implementations.
type UnimplementedTestResultsServer struct {
}

func (*UnimplementedTestResultsServer) GetInvocation(ctx context.Context, req *GetInvocationRequest) (*Invocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvocation not implemented")
}

func RegisterTestResultsServer(s prpc.Registrar, srv TestResultsServer) {
	s.RegisterService(&_TestResults_serviceDesc, srv)
}

func _TestResults_GetInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestResultsServer).GetInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultsdb.TestResults/GetInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestResultsServer).GetInvocation(ctx, req.(*GetInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestResults_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.resultsdb.TestResults",
	HandlerType: (*TestResultsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInvocation",
			Handler:    _TestResults_GetInvocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/results/proto/v1/rpc.proto",
}
