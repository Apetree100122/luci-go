// Copyright 2016 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: go.chromium.org/luci/dm/api/service/v1/service.proto

package dm

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_go_chromium_org_luci_dm_api_service_v1_service_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_dm_api_service_v1_service_proto_rawDesc = []byte{
	0x0a, 0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x64, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x64, 0x6d, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x64, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x64, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x64, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3b, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x64, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37,
	0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x6c, 0x75, 0x63, 0x69, 0x2f, 0x64, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6b, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xfd, 0x01, 0x0a, 0x04, 0x44, 0x65, 0x70, 0x73,
	0x12, 0x41, 0x0a, 0x0f, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x6d,
	0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0d, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x64, 0x6d,
	0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x09, 0x57, 0x61, 0x6c,
	0x6b, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x61, 0x6c, 0x6b,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_go_chromium_org_luci_dm_api_service_v1_service_proto_goTypes = []interface{}{
	(*EnsureGraphDataReq)(nil),   // 0: dm.EnsureGraphDataReq
	(*ActivateExecutionReq)(nil), // 1: dm.ActivateExecutionReq
	(*FinishAttemptReq)(nil),     // 2: dm.FinishAttemptReq
	(*WalkGraphReq)(nil),         // 3: dm.WalkGraphReq
	(*EnsureGraphDataRsp)(nil),   // 4: dm.EnsureGraphDataRsp
	(*emptypb.Empty)(nil),        // 5: google.protobuf.Empty
	(*GraphData)(nil),            // 6: dm.GraphData
}
var file_go_chromium_org_luci_dm_api_service_v1_service_proto_depIdxs = []int32{
	0, // 0: dm.Deps.EnsureGraphData:input_type -> dm.EnsureGraphDataReq
	1, // 1: dm.Deps.ActivateExecution:input_type -> dm.ActivateExecutionReq
	2, // 2: dm.Deps.FinishAttempt:input_type -> dm.FinishAttemptReq
	3, // 3: dm.Deps.WalkGraph:input_type -> dm.WalkGraphReq
	4, // 4: dm.Deps.EnsureGraphData:output_type -> dm.EnsureGraphDataRsp
	5, // 5: dm.Deps.ActivateExecution:output_type -> google.protobuf.Empty
	5, // 6: dm.Deps.FinishAttempt:output_type -> google.protobuf.Empty
	6, // 7: dm.Deps.WalkGraph:output_type -> dm.GraphData
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_dm_api_service_v1_service_proto_init() }
func file_go_chromium_org_luci_dm_api_service_v1_service_proto_init() {
	if File_go_chromium_org_luci_dm_api_service_v1_service_proto != nil {
		return
	}
	file_go_chromium_org_luci_dm_api_service_v1_graph_data_proto_init()
	file_go_chromium_org_luci_dm_api_service_v1_ensure_graph_data_proto_init()
	file_go_chromium_org_luci_dm_api_service_v1_activate_execution_proto_init()
	file_go_chromium_org_luci_dm_api_service_v1_finish_attempt_proto_init()
	file_go_chromium_org_luci_dm_api_service_v1_walk_graph_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_dm_api_service_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_dm_api_service_v1_service_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_dm_api_service_v1_service_proto_depIdxs,
	}.Build()
	File_go_chromium_org_luci_dm_api_service_v1_service_proto = out.File
	file_go_chromium_org_luci_dm_api_service_v1_service_proto_rawDesc = nil
	file_go_chromium_org_luci_dm_api_service_v1_service_proto_goTypes = nil
	file_go_chromium_org_luci_dm_api_service_v1_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DepsClient is the client API for Deps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DepsClient interface {
	// allows you to add additional data to the current dependency graph.
	EnsureGraphData(ctx context.Context, in *EnsureGraphDataReq, opts ...grpc.CallOption) (*EnsureGraphDataRsp, error)
	// is called by Execution clients to activate themselves with DM.
	ActivateExecution(ctx context.Context, in *ActivateExecutionReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// is called by Execution clients to indicate that an Attempt is finished.
	FinishAttempt(ctx context.Context, in *FinishAttemptReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// runs queries, and walks along the dependency graph from the query results.
	WalkGraph(ctx context.Context, in *WalkGraphReq, opts ...grpc.CallOption) (*GraphData, error)
}
type depsPRPCClient struct {
	client *prpc.Client
}

func NewDepsPRPCClient(client *prpc.Client) DepsClient {
	return &depsPRPCClient{client}
}

func (c *depsPRPCClient) EnsureGraphData(ctx context.Context, in *EnsureGraphDataReq, opts ...grpc.CallOption) (*EnsureGraphDataRsp, error) {
	out := new(EnsureGraphDataRsp)
	err := c.client.Call(ctx, "dm.Deps", "EnsureGraphData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsPRPCClient) ActivateExecution(ctx context.Context, in *ActivateExecutionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "dm.Deps", "ActivateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsPRPCClient) FinishAttempt(ctx context.Context, in *FinishAttemptReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "dm.Deps", "FinishAttempt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsPRPCClient) WalkGraph(ctx context.Context, in *WalkGraphReq, opts ...grpc.CallOption) (*GraphData, error) {
	out := new(GraphData)
	err := c.client.Call(ctx, "dm.Deps", "WalkGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type depsClient struct {
	cc grpc.ClientConnInterface
}

func NewDepsClient(cc grpc.ClientConnInterface) DepsClient {
	return &depsClient{cc}
}

func (c *depsClient) EnsureGraphData(ctx context.Context, in *EnsureGraphDataReq, opts ...grpc.CallOption) (*EnsureGraphDataRsp, error) {
	out := new(EnsureGraphDataRsp)
	err := c.cc.Invoke(ctx, "/dm.Deps/EnsureGraphData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) ActivateExecution(ctx context.Context, in *ActivateExecutionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dm.Deps/ActivateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) FinishAttempt(ctx context.Context, in *FinishAttemptReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dm.Deps/FinishAttempt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) WalkGraph(ctx context.Context, in *WalkGraphReq, opts ...grpc.CallOption) (*GraphData, error) {
	out := new(GraphData)
	err := c.cc.Invoke(ctx, "/dm.Deps/WalkGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepsServer is the server API for Deps service.
type DepsServer interface {
	// allows you to add additional data to the current dependency graph.
	EnsureGraphData(context.Context, *EnsureGraphDataReq) (*EnsureGraphDataRsp, error)
	// is called by Execution clients to activate themselves with DM.
	ActivateExecution(context.Context, *ActivateExecutionReq) (*emptypb.Empty, error)
	// is called by Execution clients to indicate that an Attempt is finished.
	FinishAttempt(context.Context, *FinishAttemptReq) (*emptypb.Empty, error)
	// runs queries, and walks along the dependency graph from the query results.
	WalkGraph(context.Context, *WalkGraphReq) (*GraphData, error)
}

// UnimplementedDepsServer can be embedded to have forward compatible implementations.
type UnimplementedDepsServer struct {
}

func (*UnimplementedDepsServer) EnsureGraphData(context.Context, *EnsureGraphDataReq) (*EnsureGraphDataRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsureGraphData not implemented")
}
func (*UnimplementedDepsServer) ActivateExecution(context.Context, *ActivateExecutionReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateExecution not implemented")
}
func (*UnimplementedDepsServer) FinishAttempt(context.Context, *FinishAttemptReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishAttempt not implemented")
}
func (*UnimplementedDepsServer) WalkGraph(context.Context, *WalkGraphReq) (*GraphData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalkGraph not implemented")
}

func RegisterDepsServer(s prpc.Registrar, srv DepsServer) {
	s.RegisterService(&_Deps_serviceDesc, srv)
}

func _Deps_EnsureGraphData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureGraphDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepsServer).EnsureGraphData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Deps/EnsureGraphData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepsServer).EnsureGraphData(ctx, req.(*EnsureGraphDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deps_ActivateExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateExecutionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepsServer).ActivateExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Deps/ActivateExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepsServer).ActivateExecution(ctx, req.(*ActivateExecutionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deps_FinishAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishAttemptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepsServer).FinishAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Deps/FinishAttempt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepsServer).FinishAttempt(ctx, req.(*FinishAttemptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deps_WalkGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalkGraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepsServer).WalkGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Deps/WalkGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepsServer).WalkGraph(ctx, req.(*WalkGraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Deps_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dm.Deps",
	HandlerType: (*DepsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnsureGraphData",
			Handler:    _Deps_EnsureGraphData_Handler,
		},
		{
			MethodName: "ActivateExecution",
			Handler:    _Deps_ActivateExecution_Handler,
		},
		{
			MethodName: "FinishAttempt",
			Handler:    _Deps_FinishAttempt_Handler,
		},
		{
			MethodName: "WalkGraph",
			Handler:    _Deps_WalkGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/dm/api/service/v1/service.proto",
}
