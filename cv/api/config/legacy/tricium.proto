// Copyright 2016 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cv.legacy.tricium;

option go_package = "go.chromium.org/luci/cv/api/config/legacy;tricium";

// Tricium project configuration.
//
// Specifies details needed to connect a project to Tricium.
// Adds project-specific functions and selects shared function
// implementations.
message ProjectConfig {
  // Analyzer definitions.
  //
  // Each analyzer generally corresponds to one builder.
  repeated Function functions = 1;
  // Selection of function implementations to run for this project.
  //
  // An analyzer is only enabled if there is a selections entry. Generally all
  // defined functions are listed as selections. Note that the function
  // (analyzer) name must match.
  repeated Selection selections = 2;
  // Repositories, including Gerrit details.
  repeated RepoDetails repos = 3;
  // General service account for this project.
  string service_account = 4;
}

// Tricium analyzer definition.
message Function {
  enum Type {
    NONE     = 0;
    ANALYZER = 1;
  }
  // The type of this function. Required.
  //
  // Should always be ANALYZER.
  Type type = 1;
  // The name of the analyzer. Required.
  //
  // The name must be unique among Tricium functions within a Tricium instance.
  // The name is expected to be CamelCase; no spaces, underscores or dashes are
  // allowed.
  string name = 2;
  // Data needed by this analyzer. Required.
  //
  // Should always be GIT_FILE_DETAILS.
  DataType needs = 3;
  // Data provided by this analyzer. Required.
  //
  // Should always be RESULTS.
  DataType provides = 4;
  // Path filters for this analyzer.
  //
  // Defined as a glob. The path filters only apply to the last part of the
  // path.
  repeated string path_filters = 5; // Default: "*"
  // Function implementations.
  //
  // Originally the idea was that an analyzer may run on many different
  // platforms and the comments from different platforms may be merged.
  //
  // This was not done in practice, so the number of impls should always be one.
  repeated Impl impls = 6;
}

// Analyzer implementation.
message Impl {
  Platform provides_for_platform = 1;
  // The platform to run this implementation on.
  //
  // This particular value of this field isn't significant, because
  // the platform is determined by the builder.
  Platform runtime_platform = 2;
  // Recipe for recipe-based implementation.
  Recipe recipe = 3;
}

// Specification of a recipe for a recipe-based analyzer.
message Recipe {
  // Project ID, e.g. "chromium".
  string project = 1;
  // Bucket name, e.g. "try".
  string bucket = 2;
  // Builder name, e.g. "linux-rel".
  string builder = 3;
}

// Selection of function implementations to run for a project.
message Selection {
  // Name of function to run.
  string function = 1;
  // Name of platform to retrieve results from.
  Platform platform = 2;
}

// All supported data types.
enum DataType {
  NONE = 0;
  GIT_FILE_DETAILS = 1;
  RESULTS = 2;
}

enum Platform {
  UNSPECIFIED = 0;
  LINUX = 1;
}

// Repository details for one repository.
message RepoDetails {
  // Specifies a Gerrit project and its corresponding git repo.
  message GerritProject {
    // The Gerrit host to connect to.
    //
    // Value must not include the schema part; it will be assumed to be "https".
    string host = 1;
    // Gerrit project name.
    string project = 2;
    // Full URL for the corresponding git repo.
    string git_url = 3;
  }
  GerritProject gerrit_project = 1;
  // Whitelisted groups.
  //
  // The owner of a change will be checked for membership of a whitelisted
  // group. Absence of this field means all groups are whitelisted.
  //
  // Group names must be known to the Chrome infra auth service,
  // https://chrome-infra-auth.appspot.com. Contact a Chromium trooper
  // if you need to add or modify a group: g.co/bugatrooper.
  repeated string whitelisted_group = 7;

  // Whether we want to process REWORK changes (code changes), or all of them
  // including rebases and changes in the commit message (default run only
  // on REWORK). Check all the types at:
  // https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-info
  bool check_all_revision_kinds = 8;
}
