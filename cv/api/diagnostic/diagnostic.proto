// Copyright 2021 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";

package diagnostic;

option go_package = "go.chromium.org/luci/cv/api/diagnostic;diagnosticpb";

import "go.chromium.org/luci/cv/internal/changelist/storage.proto";
import "go.chromium.org/luci/cv/internal/prjmanager/prjpb/storage.proto";
import "go.chromium.org/luci/cv/internal/prjmanager/prjpb/events.proto";


// Diagnostic service is CV maintainers only.
//
// CAN AND WILL CHANGE WITHOUT NOTICE IN BACKWARDS INCOMPATIBLE WAY.
service Diagnostic {

  // GetProject returns current Project state.
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse);

  // GetCL returns current CL state.
  rpc GetCL(GetCLRequest) returns (GetCLResponse);
}

message GetProjectRequest {
  string project = 1;
}

// GetProjectResponse provides non-atomic snapshot of a project state.
//
// The config hash and status come from different DS entity than PState,
// and each event comes from its own entity and depends on yet another tombstone
// entity.
message GetProjectResponse {
  cv.prjmanager.prjpb.PState state = 1;
  repeated cv.prjmanager.prjpb.Event events = 2;
}

message GetCLRequest{
  // One of the following.
  // Not using oneof because it's more congitive load to type for something
  // meant as a debug API only.

  int64 id = 1;
  string external_id = 2;
  string gerrit_url = 3;
}

// GetProjectResponse provides non-atomic snapshot of a project state.
//
// The config hash and status come from different DS entity than PState,
// and each event comes from its own entity and depends on yet another tombstone
// entity.
message GetCLResponse {
  int64 id = 1;
  string external_id = 2;
  cv.changelist.Snapshot snapshot = 3;
  cv.changelist.ApplicableConfig applicable_config = 4;
  cv.changelist.DependentMeta dependent_meta = 5;
  repeated string incomplete_runs = 6;
}
