// Copyright 2020 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: go.chromium.org/luci/cv/api/migration/settings.proto

package migrationpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Settings is schema of service-wide commit-queue/migration-settings.cfg which
// is used only during migration. It applies to all LUCI projects and is read by
// CQDaemon and LUCI CV.
type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CQDaemon doesn't really have a -dev version, therefore to test -dev of CV,
	// CQDaemon can connect to either prod and dev migration API.
	// WARNING: don't connect to two CV host at the same time, as it doesn't work
	// any more.
	ApiHosts []*Settings_ApiHost `protobuf:"bytes,1,rep,name=api_hosts,json=apiHosts,proto3" json:"api_hosts,omitempty"`
	// Deprecated.
	//
	// Deprecated: Do not use.
	UseCvStatus *Settings_UseCVStatus `protobuf:"bytes,4,opt,name=use_cv_status,json=useCvStatus,proto3" json:"use_cv_status,omitempty"`
	// Deprecated: Do not use.
	UseCvStartMessage   *Settings_UseCVStartMessage   `protobuf:"bytes,5,opt,name=use_cv_start_message,json=useCvStartMessage,proto3" json:"use_cv_start_message,omitempty"`
	UseCvTryjobExecutor *Settings_UseCVTryjobExecutor `protobuf:"bytes,6,opt,name=use_cv_tryjob_executor,json=useCvTryjobExecutor,proto3" json:"use_cv_tryjob_executor,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDescGZIP(), []int{0}
}

func (x *Settings) GetApiHosts() []*Settings_ApiHost {
	if x != nil {
		return x.ApiHosts
	}
	return nil
}

// Deprecated: Do not use.
func (x *Settings) GetUseCvStatus() *Settings_UseCVStatus {
	if x != nil {
		return x.UseCvStatus
	}
	return nil
}

// Deprecated: Do not use.
func (x *Settings) GetUseCvStartMessage() *Settings_UseCVStartMessage {
	if x != nil {
		return x.UseCvStartMessage
	}
	return nil
}

func (x *Settings) GetUseCvTryjobExecutor() *Settings_UseCVTryjobExecutor {
	if x != nil {
		return x.UseCvTryjobExecutor
	}
	return nil
}

type Settings_ApiHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// e.g. "luci-change-verifier-dev.appspot.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// If a LUCI Project matches any of regexps and none of _exclude ones,
	// CQDaemon will connect to the above Migration API host.
	ProjectRegexp        []string `protobuf:"bytes,2,rep,name=project_regexp,json=projectRegexp,proto3" json:"project_regexp,omitempty"`
	ProjectRegexpExclude []string `protobuf:"bytes,4,rep,name=project_regexp_exclude,json=projectRegexpExclude,proto3" json:"project_regexp_exclude,omitempty"`
	// If true and several hosts are configured, all other hosts' responses are
	// ignored.
	Prod bool `protobuf:"varint,3,opt,name=prod,proto3" json:"prod,omitempty"`
}

func (x *Settings_ApiHost) Reset() {
	*x = Settings_ApiHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_ApiHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_ApiHost) ProtoMessage() {}

func (x *Settings_ApiHost) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_ApiHost.ProtoReflect.Descriptor instead.
func (*Settings_ApiHost) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Settings_ApiHost) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Settings_ApiHost) GetProjectRegexp() []string {
	if x != nil {
		return x.ProjectRegexp
	}
	return nil
}

func (x *Settings_ApiHost) GetProjectRegexpExclude() []string {
	if x != nil {
		return x.ProjectRegexpExclude
	}
	return nil
}

func (x *Settings_ApiHost) GetProd() bool {
	if x != nil {
		return x.Prod
	}
	return false
}

// Post link to CV status instead of legacy CQ status app
// when starting the Run.
//
// The project is opted to CV status if and only if all 3 hold:
//   - project matches at least one project_regexp.
//   - project matches no project_regexp_exclude.
//   - project matches exactly one ApiHost overall OR exactly one with
//     prod=true.
type Settings_UseCVStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectRegexp        []string `protobuf:"bytes,1,rep,name=project_regexp,json=projectRegexp,proto3" json:"project_regexp,omitempty"`
	ProjectRegexpExclude []string `protobuf:"bytes,2,rep,name=project_regexp_exclude,json=projectRegexpExclude,proto3" json:"project_regexp_exclude,omitempty"`
}

func (x *Settings_UseCVStatus) Reset() {
	*x = Settings_UseCVStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_UseCVStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_UseCVStatus) ProtoMessage() {}

func (x *Settings_UseCVStatus) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_UseCVStatus.ProtoReflect.Descriptor instead.
func (*Settings_UseCVStatus) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Settings_UseCVStatus) GetProjectRegexp() []string {
	if x != nil {
		return x.ProjectRegexp
	}
	return nil
}

func (x *Settings_UseCVStatus) GetProjectRegexpExclude() []string {
	if x != nil {
		return x.ProjectRegexpExclude
	}
	return nil
}

// Post starting message in CV.
//
// The project is opted to CV posting starting message if and only if all 3 hold:
//   - project matches at least one project_regexp.
//   - project matches no project_regexp_exclude.
//   - project matches exactly one ApiHost overall OR exactly one with
//     prod=true.
type Settings_UseCVStartMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectRegexp        []string `protobuf:"bytes,1,rep,name=project_regexp,json=projectRegexp,proto3" json:"project_regexp,omitempty"`
	ProjectRegexpExclude []string `protobuf:"bytes,2,rep,name=project_regexp_exclude,json=projectRegexpExclude,proto3" json:"project_regexp_exclude,omitempty"`
}

func (x *Settings_UseCVStartMessage) Reset() {
	*x = Settings_UseCVStartMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_UseCVStartMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_UseCVStartMessage) ProtoMessage() {}

func (x *Settings_UseCVStartMessage) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_UseCVStartMessage.ProtoReflect.Descriptor instead.
func (*Settings_UseCVStartMessage) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Settings_UseCVStartMessage) GetProjectRegexp() []string {
	if x != nil {
		return x.ProjectRegexp
	}
	return nil
}

func (x *Settings_UseCVStartMessage) GetProjectRegexpExclude() []string {
	if x != nil {
		return x.ProjectRegexpExclude
	}
	return nil
}

// Use the Tryjob Executor in CV to handle Tryjobs.
//
// The project is opted to CV handling tryjobs if and only if all 3 hold:
//   - project matches at least one project_regexp.
//   - project matches no project_regexp_exclude.
//   - project matches exactly one ApiHost overall OR exactly one with
//     prod=true.
type Settings_UseCVTryjobExecutor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectRegexp        []string `protobuf:"bytes,1,rep,name=project_regexp,json=projectRegexp,proto3" json:"project_regexp,omitempty"`
	ProjectRegexpExclude []string `protobuf:"bytes,2,rep,name=project_regexp_exclude,json=projectRegexpExclude,proto3" json:"project_regexp_exclude,omitempty"`
}

func (x *Settings_UseCVTryjobExecutor) Reset() {
	*x = Settings_UseCVTryjobExecutor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_UseCVTryjobExecutor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_UseCVTryjobExecutor) ProtoMessage() {}

func (x *Settings_UseCVTryjobExecutor) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_UseCVTryjobExecutor.ProtoReflect.Descriptor instead.
func (*Settings_UseCVTryjobExecutor) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Settings_UseCVTryjobExecutor) GetProjectRegexp() []string {
	if x != nil {
		return x.ProjectRegexp
	}
	return nil
}

func (x *Settings_UseCVTryjobExecutor) GetProjectRegexpExclude() []string {
	if x != nil {
		return x.ProjectRegexpExclude
	}
	return nil
}

var File_go_chromium_org_luci_cv_api_migration_settings_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDesc = []byte{
	0x0a, 0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xaa, 0x06, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x08,
	0x61, 0x70, 0x69, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x5f,
	0x63, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x56, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x43, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x5a, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x56, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x75, 0x73, 0x65, 0x43,
	0x76, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a,
	0x16, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x76, 0x5f, 0x74, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x56, 0x54, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x75, 0x73, 0x65, 0x43, 0x76, 0x54, 0x72, 0x79,
	0x6a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x1a, 0x8e, 0x01, 0x0a, 0x07,
	0x41, 0x70, 0x69, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x1a, 0x6a, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x43, 0x56, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x1a, 0x70, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x43,
	0x56, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x1a, 0x72, 0x0a, 0x13, 0x55, 0x73,
	0x65, 0x43, 0x56, 0x54, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x33,
	0x5a, 0x31, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDescData = file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDesc
)

func file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDescData)
	})
	return file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDescData
}

var file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_go_chromium_org_luci_cv_api_migration_settings_proto_goTypes = []interface{}{
	(*Settings)(nil),                     // 0: migration.Settings
	(*Settings_ApiHost)(nil),             // 1: migration.Settings.ApiHost
	(*Settings_UseCVStatus)(nil),         // 2: migration.Settings.UseCVStatus
	(*Settings_UseCVStartMessage)(nil),   // 3: migration.Settings.UseCVStartMessage
	(*Settings_UseCVTryjobExecutor)(nil), // 4: migration.Settings.UseCVTryjobExecutor
}
var file_go_chromium_org_luci_cv_api_migration_settings_proto_depIdxs = []int32{
	1, // 0: migration.Settings.api_hosts:type_name -> migration.Settings.ApiHost
	2, // 1: migration.Settings.use_cv_status:type_name -> migration.Settings.UseCVStatus
	3, // 2: migration.Settings.use_cv_start_message:type_name -> migration.Settings.UseCVStartMessage
	4, // 3: migration.Settings.use_cv_tryjob_executor:type_name -> migration.Settings.UseCVTryjobExecutor
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_cv_api_migration_settings_proto_init() }
func file_go_chromium_org_luci_cv_api_migration_settings_proto_init() {
	if File_go_chromium_org_luci_cv_api_migration_settings_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_ApiHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_UseCVStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_UseCVStartMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_UseCVTryjobExecutor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_cv_api_migration_settings_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_cv_api_migration_settings_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_cv_api_migration_settings_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_cv_api_migration_settings_proto = out.File
	file_go_chromium_org_luci_cv_api_migration_settings_proto_rawDesc = nil
	file_go_chromium_org_luci_cv_api_migration_settings_proto_goTypes = nil
	file_go_chromium_org_luci_cv_api_migration_settings_proto_depIdxs = nil
}
