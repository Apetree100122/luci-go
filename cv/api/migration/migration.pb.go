// Copyright 2020 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: go.chromium.org/luci/cv/api/migration/migration.proto

package migrationpb

import (
	gerrit "go.chromium.org/luci/common/proto/gerrit"
	v1 "go.chromium.org/luci/cv/api/bigquery/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Action that CV SHOULD do on a Run.
//
// Should instead of must because CV may be already finalizing the Run.
//
// In pure CQDaemon, the action would have been done by CQDaemon itself.
type ReportVerifiedRunRequest_Action int32

const (
	ReportVerifiedRunRequest_ACTION_UNSPECIFIED ReportVerifiedRunRequest_Action = 0
	ReportVerifiedRunRequest_ACTION_SUBMIT      ReportVerifiedRunRequest_Action = 1 // requires a full run
	ReportVerifiedRunRequest_ACTION_DRY_RUN_OK  ReportVerifiedRunRequest_Action = 2 // requires a dry run
	ReportVerifiedRunRequest_ACTION_FAIL        ReportVerifiedRunRequest_Action = 3 // final_message must be set
)

// Enum value maps for ReportVerifiedRunRequest_Action.
var (
	ReportVerifiedRunRequest_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "ACTION_SUBMIT",
		2: "ACTION_DRY_RUN_OK",
		3: "ACTION_FAIL",
	}
	ReportVerifiedRunRequest_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"ACTION_SUBMIT":      1,
		"ACTION_DRY_RUN_OK":  2,
		"ACTION_FAIL":        3,
	}
)

func (x ReportVerifiedRunRequest_Action) Enum() *ReportVerifiedRunRequest_Action {
	p := new(ReportVerifiedRunRequest_Action)
	*p = x
	return p
}

func (x ReportVerifiedRunRequest_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportVerifiedRunRequest_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_enumTypes[0].Descriptor()
}

func (ReportVerifiedRunRequest_Action) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_cv_api_migration_migration_proto_enumTypes[0]
}

func (x ReportVerifiedRunRequest_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportVerifiedRunRequest_Action.Descriptor instead.
func (ReportVerifiedRunRequest_Action) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{2, 0}
}

type ReportRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runs []*Run `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *ReportRunsRequest) Reset() {
	*x = ReportRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRunsRequest) ProtoMessage() {}

func (x *ReportRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRunsRequest.ProtoReflect.Descriptor instead.
func (*ReportRunsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{0}
}

func (x *ReportRunsRequest) GetRuns() []*Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

type ReportFinishedRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Run *Run `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
}

func (x *ReportFinishedRunRequest) Reset() {
	*x = ReportFinishedRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportFinishedRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFinishedRunRequest) ProtoMessage() {}

func (x *ReportFinishedRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFinishedRunRequest.ProtoReflect.Descriptor instead.
func (*ReportFinishedRunRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{1}
}

func (x *ReportFinishedRunRequest) GetRun() *Run {
	if x != nil {
		return x.Run
	}
	return nil
}

type ReportVerifiedRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Run    *Run                            `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	Action ReportVerifiedRunRequest_Action `protobuf:"varint,11,opt,name=action,proto3,enum=migration.ReportVerifiedRunRequest_Action" json:"action,omitempty"`
	// Final message to post to Gerrit in case of ACTION_FAIL.
	FinalMessage string `protobuf:"bytes,12,opt,name=final_message,json=finalMessage,proto3" json:"final_message,omitempty"`
	// If true, CQDaemon is sending this for the sake of the test, notably before
	// CQDaemon starts getting CV's runs. Thus, Run's CV's ID may be unset.
	//
	// This is used to test codepath calling ReportVerifiedRun in the CQDaemon
	// before the switch to CV Runs.
	TestMode bool `protobuf:"varint,21,opt,name=test_mode,json=testMode,proto3" json:"test_mode,omitempty"`
}

func (x *ReportVerifiedRunRequest) Reset() {
	*x = ReportVerifiedRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportVerifiedRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportVerifiedRunRequest) ProtoMessage() {}

func (x *ReportVerifiedRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportVerifiedRunRequest.ProtoReflect.Descriptor instead.
func (*ReportVerifiedRunRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{2}
}

func (x *ReportVerifiedRunRequest) GetRun() *Run {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *ReportVerifiedRunRequest) GetAction() ReportVerifiedRunRequest_Action {
	if x != nil {
		return x.Action
	}
	return ReportVerifiedRunRequest_ACTION_UNSPECIFIED
}

func (x *ReportVerifiedRunRequest) GetFinalMessage() string {
	if x != nil {
		return x.FinalMessage
	}
	return ""
}

func (x *ReportVerifiedRunRequest) GetTestMode() bool {
	if x != nil {
		return x.TestMode
	}
	return false
}

type PostGerritMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CV's run ID. May be not set iff CQDaemon does this before it takes Runs
	// from CV.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// LUCI Project. If run_id is specified, this is redundant.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// CQD native Run identifier.
	AttemptKey string `protobuf:"bytes,3,opt,name=attempt_key,json=attemptKey,proto3" json:"attempt_key,omitempty"`
	// Gerrit host.
	Host   string `protobuf:"bytes,11,opt,name=host,proto3" json:"host,omitempty"`
	Change int64  `protobuf:"varint,12,opt,name=change,proto3" json:"change,omitempty"`
	// String comment to post.
	Comment string `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
	// If true, send email to:
	//   * OWNER_REVIEWERS if full run
	//   * OWNER+all CQ voters if dry run
	SendEmail bool `protobuf:"varint,14,opt,name=send_email,json=sendEmail,proto3" json:"send_email,omitempty"`
}

func (x *PostGerritMessageRequest) Reset() {
	*x = PostGerritMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostGerritMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostGerritMessageRequest) ProtoMessage() {}

func (x *PostGerritMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostGerritMessageRequest.ProtoReflect.Descriptor instead.
func (*PostGerritMessageRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{3}
}

func (x *PostGerritMessageRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *PostGerritMessageRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PostGerritMessageRequest) GetAttemptKey() string {
	if x != nil {
		return x.AttemptKey
	}
	return ""
}

func (x *PostGerritMessageRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostGerritMessageRequest) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *PostGerritMessageRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *PostGerritMessageRequest) GetSendEmail() bool {
	if x != nil {
		return x.SendEmail
	}
	return false
}

type PostGerritMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If posting succeeded, this is set to the update time of a Gerrit change.
	//
	// TODO(tandrii): verify if this is actually required for CQDaemon,
	// as getting this timestamp requires 1 extra RPC.
	GerritUpdateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=gerrit_update_time,json=gerritUpdateTime,proto3" json:"gerrit_update_time,omitempty"`
}

func (x *PostGerritMessageResponse) Reset() {
	*x = PostGerritMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostGerritMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostGerritMessageResponse) ProtoMessage() {}

func (x *PostGerritMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostGerritMessageResponse.ProtoReflect.Descriptor instead.
func (*PostGerritMessageResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{4}
}

func (x *PostGerritMessageResponse) GetGerritUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GerritUpdateTime
	}
	return nil
}

type ReportUsedNetrcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GerritHost  string `protobuf:"bytes,1,opt,name=gerrit_host,json=gerritHost,proto3" json:"gerrit_host,omitempty"`
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *ReportUsedNetrcRequest) Reset() {
	*x = ReportUsedNetrcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportUsedNetrcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUsedNetrcRequest) ProtoMessage() {}

func (x *ReportUsedNetrcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUsedNetrcRequest.ProtoReflect.Descriptor instead.
func (*ReportUsedNetrcRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{5}
}

func (x *ReportUsedNetrcRequest) GetGerritHost() string {
	if x != nil {
		return x.GerritHost
	}
	return ""
}

func (x *ReportUsedNetrcRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type FetchActiveRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuciProject string `protobuf:"bytes,1,opt,name=luci_project,json=luciProject,proto3" json:"luci_project,omitempty"`
}

func (x *FetchActiveRunsRequest) Reset() {
	*x = FetchActiveRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchActiveRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchActiveRunsRequest) ProtoMessage() {}

func (x *FetchActiveRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchActiveRunsRequest.ProtoReflect.Descriptor instead.
func (*FetchActiveRunsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{6}
}

func (x *FetchActiveRunsRequest) GetLuciProject() string {
	if x != nil {
		return x.LuciProject
	}
	return ""
}

type FetchActiveRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runs []*Run `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *FetchActiveRunsResponse) Reset() {
	*x = FetchActiveRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchActiveRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchActiveRunsResponse) ProtoMessage() {}

func (x *FetchActiveRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchActiveRunsResponse.ProtoReflect.Descriptor instead.
func (*FetchActiveRunsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{7}
}

func (x *FetchActiveRunsResponse) GetRuns() []*Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

type Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attempt *v1.Attempt `protobuf:"bytes,1,opt,name=attempt,proto3" json:"attempt,omitempty"`
	// CV's run ID.
	Id  string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Cls []*RunCL `protobuf:"bytes,3,rep,name=cls,proto3" json:"cls,omitempty"`
}

func (x *Run) Reset() {
	*x = Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{8}
}

func (x *Run) GetAttempt() *v1.Attempt {
	if x != nil {
		return x.Attempt
	}
	return nil
}

func (x *Run) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Run) GetCls() []*RunCL {
	if x != nil {
		return x.Cls
	}
	return nil
}

type RunCL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CV's CLID. Used to identify Deps.
	Id int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Gc *v1.GerritChange `protobuf:"bytes,2,opt,name=gc,proto3" json:"gc,omitempty"`
	// The following are copy-pasted from CV's snapshot.
	// Info is guaranteed to have current revision with the same patchset as
	// as specified in bigquery.GerritChange.
	Info    *gerrit.ChangeInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Files   []string           `protobuf:"bytes,4,rep,name=files,proto3" json:"files,omitempty"`
	Trigger *RunCL_Trigger     `protobuf:"bytes,5,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Deps    []*RunCL_Dep       `protobuf:"bytes,6,rep,name=deps,proto3" json:"deps,omitempty"`
}

func (x *RunCL) Reset() {
	*x = RunCL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCL) ProtoMessage() {}

func (x *RunCL) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCL.ProtoReflect.Descriptor instead.
func (*RunCL) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{9}
}

func (x *RunCL) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RunCL) GetGc() *v1.GerritChange {
	if x != nil {
		return x.Gc
	}
	return nil
}

func (x *RunCL) GetInfo() *gerrit.ChangeInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *RunCL) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *RunCL) GetTrigger() *RunCL_Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *RunCL) GetDeps() []*RunCL_Dep {
	if x != nil {
		return x.Deps
	}
	return nil
}

type RunCL_Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Gerrit account ID.
	AccountId int64 `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// User email, if known.
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *RunCL_Trigger) Reset() {
	*x = RunCL_Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCL_Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCL_Trigger) ProtoMessage() {}

func (x *RunCL_Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCL_Trigger.ProtoReflect.Descriptor instead.
func (*RunCL_Trigger) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{9, 0}
}

func (x *RunCL_Trigger) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RunCL_Trigger) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *RunCL_Trigger) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type RunCL_Dep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CV's CLID. Guaranteed to match one of the RunCL in the same Run.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// True means Dep is the immediate git parent and must be submitted first.
	Hard bool `protobuf:"varint,2,opt,name=hard,proto3" json:"hard,omitempty"`
}

func (x *RunCL_Dep) Reset() {
	*x = RunCL_Dep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCL_Dep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCL_Dep) ProtoMessage() {}

func (x *RunCL_Dep) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCL_Dep.ProtoReflect.Descriptor instead.
func (*RunCL_Dep) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP(), []int{9, 1}
}

func (x *RunCL_Dep) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RunCL_Dep) GetHard() bool {
	if x != nil {
		return x.Hard
	}
	return false
}

var File_go_chromium_org_luci_cv_api_migration_migration_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDesc = []byte{
	0x0a, 0x35, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x35, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2f, 0x67, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37,
	0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75,
	0x6e, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e,
	0x52, 0x03, 0x72, 0x75, 0x6e, 0x22, 0x9f, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x52,
	0x03, 0x72, 0x75, 0x6e, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x59, 0x5f, 0x52, 0x55,
	0x4e, 0x5f, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x22, 0xd1, 0x01, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74,
	0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x65, 0x0a, 0x19, 0x50,
	0x6f, 0x73, 0x74, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x67, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x64,
	0x4e, 0x65, 0x74, 0x72, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x3b, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x75,
	0x63, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3d, 0x0a,
	0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x22, 0x66, 0x0a, 0x03,
	0x52, 0x75, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x03, 0x63, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x4c, 0x52,
	0x03, 0x63, 0x6c, 0x73, 0x22, 0xf6, 0x02, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x43, 0x4c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x02, 0x67, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x02, 0x67, 0x63, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x4c, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x65, 0x70, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x4c, 0x2e, 0x44, 0x65, 0x70, 0x52, 0x04, 0x64, 0x65,
	0x70, 0x73, 0x1a, 0x6e, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x1a, 0x29, 0x0a, 0x03, 0x44, 0x65, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x61, 0x72, 0x64, 0x32, 0xfb, 0x03,
	0x0a, 0x09, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x50, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x52, 0x75, 0x6e, 0x12, 0x23, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x50, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x12, 0x23, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x47, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x47, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65,
	0x64, 0x4e, 0x65, 0x74, 0x72, 0x63, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x64, 0x4e, 0x65, 0x74,
	0x72, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x58, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x75, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x33, 0x5a, 0x31, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescData = file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDesc
)

func file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescData)
	})
	return file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDescData
}

var file_go_chromium_org_luci_cv_api_migration_migration_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_go_chromium_org_luci_cv_api_migration_migration_proto_goTypes = []interface{}{
	(ReportVerifiedRunRequest_Action)(0), // 0: migration.ReportVerifiedRunRequest.Action
	(*ReportRunsRequest)(nil),            // 1: migration.ReportRunsRequest
	(*ReportFinishedRunRequest)(nil),     // 2: migration.ReportFinishedRunRequest
	(*ReportVerifiedRunRequest)(nil),     // 3: migration.ReportVerifiedRunRequest
	(*PostGerritMessageRequest)(nil),     // 4: migration.PostGerritMessageRequest
	(*PostGerritMessageResponse)(nil),    // 5: migration.PostGerritMessageResponse
	(*ReportUsedNetrcRequest)(nil),       // 6: migration.ReportUsedNetrcRequest
	(*FetchActiveRunsRequest)(nil),       // 7: migration.FetchActiveRunsRequest
	(*FetchActiveRunsResponse)(nil),      // 8: migration.FetchActiveRunsResponse
	(*Run)(nil),                          // 9: migration.Run
	(*RunCL)(nil),                        // 10: migration.RunCL
	(*RunCL_Trigger)(nil),                // 11: migration.RunCL.Trigger
	(*RunCL_Dep)(nil),                    // 12: migration.RunCL.Dep
	(*timestamppb.Timestamp)(nil),        // 13: google.protobuf.Timestamp
	(*v1.Attempt)(nil),                   // 14: bigquery.Attempt
	(*v1.GerritChange)(nil),              // 15: bigquery.GerritChange
	(*gerrit.ChangeInfo)(nil),            // 16: gerrit.ChangeInfo
	(*emptypb.Empty)(nil),                // 17: google.protobuf.Empty
}
var file_go_chromium_org_luci_cv_api_migration_migration_proto_depIdxs = []int32{
	9,  // 0: migration.ReportRunsRequest.runs:type_name -> migration.Run
	9,  // 1: migration.ReportFinishedRunRequest.run:type_name -> migration.Run
	9,  // 2: migration.ReportVerifiedRunRequest.run:type_name -> migration.Run
	0,  // 3: migration.ReportVerifiedRunRequest.action:type_name -> migration.ReportVerifiedRunRequest.Action
	13, // 4: migration.PostGerritMessageResponse.gerrit_update_time:type_name -> google.protobuf.Timestamp
	9,  // 5: migration.FetchActiveRunsResponse.runs:type_name -> migration.Run
	14, // 6: migration.Run.attempt:type_name -> bigquery.Attempt
	10, // 7: migration.Run.cls:type_name -> migration.RunCL
	15, // 8: migration.RunCL.gc:type_name -> bigquery.GerritChange
	16, // 9: migration.RunCL.info:type_name -> gerrit.ChangeInfo
	11, // 10: migration.RunCL.trigger:type_name -> migration.RunCL.Trigger
	12, // 11: migration.RunCL.deps:type_name -> migration.RunCL.Dep
	13, // 12: migration.RunCL.Trigger.time:type_name -> google.protobuf.Timestamp
	1,  // 13: migration.Migration.ReportRuns:input_type -> migration.ReportRunsRequest
	2,  // 14: migration.Migration.ReportFinishedRun:input_type -> migration.ReportFinishedRunRequest
	3,  // 15: migration.Migration.ReportVerifiedRun:input_type -> migration.ReportVerifiedRunRequest
	4,  // 16: migration.Migration.PostGerritMessage:input_type -> migration.PostGerritMessageRequest
	6,  // 17: migration.Migration.ReportUsedNetrc:input_type -> migration.ReportUsedNetrcRequest
	7,  // 18: migration.Migration.FetchActiveRuns:input_type -> migration.FetchActiveRunsRequest
	17, // 19: migration.Migration.ReportRuns:output_type -> google.protobuf.Empty
	17, // 20: migration.Migration.ReportFinishedRun:output_type -> google.protobuf.Empty
	17, // 21: migration.Migration.ReportVerifiedRun:output_type -> google.protobuf.Empty
	5,  // 22: migration.Migration.PostGerritMessage:output_type -> migration.PostGerritMessageResponse
	17, // 23: migration.Migration.ReportUsedNetrc:output_type -> google.protobuf.Empty
	8,  // 24: migration.Migration.FetchActiveRuns:output_type -> migration.FetchActiveRunsResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_cv_api_migration_migration_proto_init() }
func file_go_chromium_org_luci_cv_api_migration_migration_proto_init() {
	if File_go_chromium_org_luci_cv_api_migration_migration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportFinishedRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportVerifiedRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostGerritMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostGerritMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportUsedNetrcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchActiveRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchActiveRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCL_Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCL_Dep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_cv_api_migration_migration_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_cv_api_migration_migration_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_cv_api_migration_migration_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_cv_api_migration_migration_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_cv_api_migration_migration_proto = out.File
	file_go_chromium_org_luci_cv_api_migration_migration_proto_rawDesc = nil
	file_go_chromium_org_luci_cv_api_migration_migration_proto_goTypes = nil
	file_go_chromium_org_luci_cv_api_migration_migration_proto_depIdxs = nil
}
