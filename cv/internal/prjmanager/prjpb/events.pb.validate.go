// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: go.chromium.org/luci/cv/internal/prjmanager/prjpb/events.proto

package prjpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	run "go.chromium.org/luci/cv/internal/run"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = run.Status(0)
)

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Event.(type) {
	case *Event_NewConfig:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNewConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "NewConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "NewConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNewConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "NewConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_Poke:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPoke()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Poke",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Poke",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPoke()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "Poke",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_ClsUpdated:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetClsUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "ClsUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "ClsUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetClsUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "ClsUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_RunCreated:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRunCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "RunCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "RunCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRunCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "RunCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_RunFinished:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRunFinished()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "RunFinished",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "RunFinished",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRunFinished()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "RunFinished",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_PurgeCompleted:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPurgeCompleted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "PurgeCompleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "PurgeCompleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPurgeCompleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "PurgeCompleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_TriggeringClsCompleted:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTriggeringClsCompleted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "TriggeringClsCompleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "TriggeringClsCompleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTriggeringClsCompleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "TriggeringClsCompleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on NewConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewConfigMultiError, or nil
// if none found.
func (m *NewConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *NewConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NewConfigMultiError(errors)
	}

	return nil
}

// NewConfigMultiError is an error wrapping multiple validation errors returned
// by NewConfig.ValidateAll() if the designated constraints aren't met.
type NewConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewConfigMultiError) AllErrors() []error { return m }

// NewConfigValidationError is the validation error returned by
// NewConfig.Validate if the designated constraints aren't met.
type NewConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewConfigValidationError) ErrorName() string { return "NewConfigValidationError" }

// Error satisfies the builtin error interface
func (e NewConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewConfigValidationError{}

// Validate checks the field values on Poke with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Poke) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Poke with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PokeMultiError, or nil if none found.
func (m *Poke) ValidateAll() error {
	return m.validate(true)
}

func (m *Poke) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PokeMultiError(errors)
	}

	return nil
}

// PokeMultiError is an error wrapping multiple validation errors returned by
// Poke.ValidateAll() if the designated constraints aren't met.
type PokeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PokeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PokeMultiError) AllErrors() []error { return m }

// PokeValidationError is the validation error returned by Poke.Validate if the
// designated constraints aren't met.
type PokeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PokeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PokeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PokeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PokeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PokeValidationError) ErrorName() string { return "PokeValidationError" }

// Error satisfies the builtin error interface
func (e PokeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoke.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PokeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PokeValidationError{}

// Validate checks the field values on RunCreated with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunCreated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunCreated with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunCreatedMultiError, or
// nil if none found.
func (m *RunCreated) ValidateAll() error {
	return m.validate(true)
}

func (m *RunCreated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RunId

	if len(errors) > 0 {
		return RunCreatedMultiError(errors)
	}

	return nil
}

// RunCreatedMultiError is an error wrapping multiple validation errors
// returned by RunCreated.ValidateAll() if the designated constraints aren't met.
type RunCreatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunCreatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunCreatedMultiError) AllErrors() []error { return m }

// RunCreatedValidationError is the validation error returned by
// RunCreated.Validate if the designated constraints aren't met.
type RunCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunCreatedValidationError) ErrorName() string { return "RunCreatedValidationError" }

// Error satisfies the builtin error interface
func (e RunCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunCreatedValidationError{}

// Validate checks the field values on RunFinished with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunFinished) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunFinished with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunFinishedMultiError, or
// nil if none found.
func (m *RunFinished) ValidateAll() error {
	return m.validate(true)
}

func (m *RunFinished) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RunId

	// no validation rules for Status

	if len(errors) > 0 {
		return RunFinishedMultiError(errors)
	}

	return nil
}

// RunFinishedMultiError is an error wrapping multiple validation errors
// returned by RunFinished.ValidateAll() if the designated constraints aren't met.
type RunFinishedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunFinishedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunFinishedMultiError) AllErrors() []error { return m }

// RunFinishedValidationError is the validation error returned by
// RunFinished.Validate if the designated constraints aren't met.
type RunFinishedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunFinishedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunFinishedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunFinishedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunFinishedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunFinishedValidationError) ErrorName() string { return "RunFinishedValidationError" }

// Error satisfies the builtin error interface
func (e RunFinishedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunFinished.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunFinishedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunFinishedValidationError{}

// Validate checks the field values on PurgeCompleted with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PurgeCompleted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurgeCompleted with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PurgeCompletedMultiError,
// or nil if none found.
func (m *PurgeCompleted) ValidateAll() error {
	return m.validate(true)
}

func (m *PurgeCompleted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperationId

	if len(errors) > 0 {
		return PurgeCompletedMultiError(errors)
	}

	return nil
}

// PurgeCompletedMultiError is an error wrapping multiple validation errors
// returned by PurgeCompleted.ValidateAll() if the designated constraints
// aren't met.
type PurgeCompletedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurgeCompletedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurgeCompletedMultiError) AllErrors() []error { return m }

// PurgeCompletedValidationError is the validation error returned by
// PurgeCompleted.Validate if the designated constraints aren't met.
type PurgeCompletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurgeCompletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurgeCompletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurgeCompletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurgeCompletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurgeCompletedValidationError) ErrorName() string { return "PurgeCompletedValidationError" }

// Error satisfies the builtin error interface
func (e PurgeCompletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurgeCompleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurgeCompletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurgeCompletedValidationError{}

// Validate checks the field values on TriggeringCLsCompleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggeringCLsCompleted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggeringCLsCompleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggeringCLsCompletedMultiError, or nil if none found.
func (m *TriggeringCLsCompleted) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggeringCLsCompleted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSucceeded() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggeringCLsCompletedValidationError{
						field:  fmt.Sprintf("Succeeded[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggeringCLsCompletedValidationError{
						field:  fmt.Sprintf("Succeeded[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggeringCLsCompletedValidationError{
					field:  fmt.Sprintf("Succeeded[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFailed() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggeringCLsCompletedValidationError{
						field:  fmt.Sprintf("Failed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggeringCLsCompletedValidationError{
						field:  fmt.Sprintf("Failed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggeringCLsCompletedValidationError{
					field:  fmt.Sprintf("Failed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSkipped() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggeringCLsCompletedValidationError{
						field:  fmt.Sprintf("Skipped[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggeringCLsCompletedValidationError{
						field:  fmt.Sprintf("Skipped[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggeringCLsCompletedValidationError{
					field:  fmt.Sprintf("Skipped[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggeringCLsCompletedMultiError(errors)
	}

	return nil
}

// TriggeringCLsCompletedMultiError is an error wrapping multiple validation
// errors returned by TriggeringCLsCompleted.ValidateAll() if the designated
// constraints aren't met.
type TriggeringCLsCompletedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggeringCLsCompletedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggeringCLsCompletedMultiError) AllErrors() []error { return m }

// TriggeringCLsCompletedValidationError is the validation error returned by
// TriggeringCLsCompleted.Validate if the designated constraints aren't met.
type TriggeringCLsCompletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggeringCLsCompletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggeringCLsCompletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggeringCLsCompletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggeringCLsCompletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggeringCLsCompletedValidationError) ErrorName() string {
	return "TriggeringCLsCompletedValidationError"
}

// Error satisfies the builtin error interface
func (e TriggeringCLsCompletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggeringCLsCompleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggeringCLsCompletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggeringCLsCompletedValidationError{}

// Validate checks the field values on TriggeringCLsCompleted_OpResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggeringCLsCompleted_OpResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggeringCLsCompleted_OpResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggeringCLsCompleted_OpResultMultiError, or nil if none found.
func (m *TriggeringCLsCompleted_OpResult) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggeringCLsCompleted_OpResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperationId

	// no validation rules for OriginClid

	if all {
		switch v := interface{}(m.GetReason()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggeringCLsCompleted_OpResultValidationError{
					field:  "Reason",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggeringCLsCompleted_OpResultValidationError{
					field:  "Reason",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReason()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggeringCLsCompleted_OpResultValidationError{
				field:  "Reason",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggeringCLsCompleted_OpResultMultiError(errors)
	}

	return nil
}

// TriggeringCLsCompleted_OpResultMultiError is an error wrapping multiple
// validation errors returned by TriggeringCLsCompleted_OpResult.ValidateAll()
// if the designated constraints aren't met.
type TriggeringCLsCompleted_OpResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggeringCLsCompleted_OpResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggeringCLsCompleted_OpResultMultiError) AllErrors() []error { return m }

// TriggeringCLsCompleted_OpResultValidationError is the validation error
// returned by TriggeringCLsCompleted_OpResult.Validate if the designated
// constraints aren't met.
type TriggeringCLsCompleted_OpResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggeringCLsCompleted_OpResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggeringCLsCompleted_OpResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggeringCLsCompleted_OpResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggeringCLsCompleted_OpResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggeringCLsCompleted_OpResultValidationError) ErrorName() string {
	return "TriggeringCLsCompleted_OpResultValidationError"
}

// Error satisfies the builtin error interface
func (e TriggeringCLsCompleted_OpResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggeringCLsCompleted_OpResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggeringCLsCompleted_OpResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggeringCLsCompleted_OpResultValidationError{}
