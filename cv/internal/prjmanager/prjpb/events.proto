// Copyright 2020 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cv.internal.prjmanager.prjpb;

option go_package = "go.chromium.org/luci/cv/internal/prjmanager/prjpb;prjpb";

import "go.chromium.org/luci/cv/internal/changelist/storage.proto";
import "go.chromium.org/luci/cv/internal/run/storage.proto";


// Event is a container for all kinds of events a project manager can receive.
message Event {
  reserved 3;

  oneof event {
    NewConfig new_config = 1;

    Poke poke = 2;

    cv.internal.changelist.CLUpdatedEvents cls_updated = 7;

    RunCreated run_created = 4;
    RunFinished run_finished = 5;

    PurgeCompleted purge_completed = 6;
    TriggeringCLDepsCompleted triggering_cl_deps_completed = 9;
  }
}

// NewConfig is sent to PM by Project Config updater upon saving newest config
// in datastore.
message NewConfig {}

// Poke is sent to PM by Project Config updater.
message Poke {}

// RunCreated is sent to PM by either itself or API-based Run creation.
message RunCreated {
  string run_id = 1;
}

// RunFinished is sent to PM by Run Manager after or atomically with changing Run's
// status to a final status.
message RunFinished {
  string run_id = 1;
  // the terminal status.
  cv.internal.run.Status status = 2;
}

// PurgingCompleted is sent to PM by TQ task purging a CL.
//
// See storage.proto:PurgingCL doc.
//
// There is no status of the purge because it's the CL state that matters,
// hence success or failure will reach PM via CLUpdatedEvent.
message PurgeCompleted {
  // Operation ID suffices to identify a purge.
  string operation_id = 1;
  // ID of the CL that was purged.
  int64 clid = 2;
}

// TriggeringCLDepsCompleted is sent to PM on a TriggeringCLDepsTask completion.
message TriggeringCLDepsCompleted {
  // Operational ID, uniquely identifying a given TriggeringCLDepsCompleted
  // event in the LUCI project.
  string operation_id = 1;
  // ID of the Originating CL that issued the TriggeringCLDeps task.
  int64 origin = 2;
  // IDs of the dependent CLs that cltriggerer successfully triggered.
  repeated int64 succeeded = 3;
  // CLs that cltriggerer failed to trigger.
  repeated cv.internal.changelist.CLError.TriggerDeps failed = 4;
  // CLs that cltriggerer couldn't trigger.
  //
  // It's either cltriggerer couldn't even attempt the trigger, or
  // attempted but the request failed transiently.
  repeated int64 incompleted = 5;
}


