// Copyright 2020 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cv.internal.run.eventpb;

option go_package = "go.chromium.org/luci/cv/internal/run/eventpb;eventpb";

import "google/protobuf/timestamp.proto";

import "go.chromium.org/luci/cv/internal/changelist/storage.proto";
import "go.chromium.org/luci/cv/internal/tryjob/storage.proto";
import "go.chromium.org/luci/cv/internal/run/eventpb/longop.proto";
import "go.chromium.org/luci/cv/internal/run/eventpb/submission.proto";

// Event is a container for all kinds of events a Run Manager can receive.
message Event {
  // Next tag: 13
  reserved 7; // cl_submitted
  reserved 30; // cqd_verification_completed
  reserved 32; // cqd_tryjobs_updated

  oneof event {
    // On Start event, Run Manager will start the Run.
    //
    // The Run entity must already exist.
    Start start = 1;
    // On Cancel event, Run Manager will cancel the Run.
    Cancel cancel = 2;
    // On Poke event, Run Manager will check the state of the Run and perform
    // any action if necessary.
    //
    // Sent periodically by Project Manager.
    Poke poke = 3;
    // On NewConfig event, Run Manager will update config the Run for the
    // given RunID.
    //
    // Sent by Project Manager, which guarantees these events are sent in order
    // of config updates. See also its `eversion` field.
    NewConfig new_config = 4;
    // On cls_updated event, Run Manager will decide whether to cancel the Run
    // based on the current CL state.
    cv.internal.changelist.CLUpdatedEvents cls_updated = 9;
    // On ReadyForSubmission event, Run Manager will try to submit CLs in
    // this Run.
    ReadyForSubmission ready_for_submission = 6;
    // On CLSubmitted event, Run Manager will mark this CL as submitted.
    CLsSubmitted cls_submitted = 12;
    // On SubmissionCompleted event, Run Manager will look at the submission
    // result and decide whether to retry this submission or succeed or fail
    // the Run.
    SubmissionCompleted submission_completed = 8;
    // On LongOpCompleted event is sent by Run Manager to itself to mark
    // completion of a long operation.
    LongOpCompleted long_op_completed = 10;
    // On tryjobs_updated event, Run Manager decides the next step for those
    // tryjobs (e.g. retry) and this Run (e.g. fail the Run for critical
    // tryjob failure).
    cv.internal.tryjob.TryjobUpdatedEvents tryjobs_updated = 11;
    // On parent_run_completed event, Run Manager decides the next step for
    // the child run.
    ParentRunCompleted parent_run_completed = 13;
  }

  // Instructs Run Manager that this event can only be processed after
  // this timestamp.
  google.protobuf.Timestamp process_after = 20;
}

message Start {
}

message Cancel {
  // reason for cancelling the run.
  string reason = 1;
}

message Poke {
}

message NewConfig {
  // Hash identifying project config version to update to.
  string hash = 1;
  // Eversion of the project config version identify by hash.
  //
  // Provided for identifying the latest NewConfig message
  // if there are more than one outstanding NewConfig event.
  int64 eversion = 2;
}

message ReadyForSubmission {
}

message ParentRunCompleted {
}

message CLsSubmitted {
  // Internal ID of CLs that were submitted successfully.
  repeated int64 clids = 1;
}
