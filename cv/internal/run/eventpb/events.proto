// Copyright 2020 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cv.internal.run.eventpb;

option go_package = "go.chromium.org/luci/cv/internal/run/eventpb;eventpb";

import "google/protobuf/timestamp.proto";

// Event is a container for all kinds of events a Run Manager can receive.
message Event {
  oneof event {
    // On Start event, Run Manager will start the Run.
    //
    // The Run entity must already exist.
    Start start = 1;
    // On Cancel event, Run Manager will cancel the Run.
    Cancel cancel = 2;
    // On Poke event, Run Manager will check the state of the Run and perform
    // any action if necessary.
    //
    // Sent periodically by Project Manager.
    Poke poke = 3;
    // On NewConfig event, Run Manager will update config the Run for the
    // given RunID.
    //
    // Sent by Project Manager, which guarantees these events are sent in order
    // of config updates. See also its `eversion` field.
    NewConfig new_config = 4;
    // On CLUpdated event, Run Manager will decide whether to cancel the Run
    // based on the current CL state.
    //
    // Sent by Gerrit Updater if Run is inside the `IncompleteRuns` list of
    // a CL.
    CLUpdated cl_updated = 5;
    // On ReadyForSubmission event, Run Manager will try to submit CLs in
    // this Run.
    ReadyForSubmission ready_for_submission = 6;
    // On CLSubmitted event, Run Manager will mark this CL as submitted.
    CLSubmitted cl_submitted = 7;
    // On SubmissionCompleted event, Run Manager will look at the submission
    // result and decide whether to retry this submission or succeed or fail
    // the Run.
    SubmissionCompleted submission_completed = 8;

    // TODO(yiwzhang): Define following events that Run Manager may receive:
    //  * TryjobUpdated

    // On CQDVerificationCompleted event, Run Manager will finalize the Run.
    //
    // This event is sent by migration api when CQDaemon reports a verified
    // Run back to CV.
    //
    // TODO(crbug/1141880): Remove this event after migration.
    CQDVerificationCompleted cqd_verification_completed = 30;
    // On CQDFinished event, Run Manager will finalize the Run based on Run
    // metadata provided by the CQDaemon.
    //
    // This event is sent by migration api when CQDaemon reports a Run it has
    // finished working on, including submission of CLs or cancellation of
    // triggers as well as sending BQ rows. So, Run Manager doesn't have to do
    // any of that.
    //
    // TODO(crbug/1141880): Remove this event after migration.
    CQDFinished cqd_finished = 31;
  }

  // Instructs Run Manager that this event can only be processed after
  // this timestamp.
  google.protobuf.Timestamp process_after = 20;
}

message Start {
}

message Cancel {
}

message Poke {
}

message NewConfig {
  // Hash identifying project config version to update to.
  string hash = 1;
  // Eversion of the project config version identify by hash.
  //
  // Provided for identifying the latest NewConfig message
  // if there are more than one outstanding NewConfig event.
  int64 eversion = 2;
}

message CLUpdated {
  // Internal ID of a CL that was updated.
  int64 clid = 1;
  // EVersion of the updated CL entity.
  int64 eVersion = 2;
}

message ReadyForSubmission {
}

message CLSubmitted {
  // Internal ID of a CL that was submitted successfully.
  int64 clid = 1;
}

message SubmissionCompleted {
  // Result of this submission.
  SubmissionResult result = 1;

  message CLSubmissionFailure {
    int64 clid = 1; // Required
    string message = 2; // Required
  }

  message CLSubmissionFailures {
    repeated CLSubmissionFailure failures = 1;
  }

  oneof failure_reason {
    // Deprecated. Use `cl_failures` instead.
    //
    // TODO(yiwzhang): delete after no event has this field set.
    CLSubmissionFailure cl_failure = 2 [deprecated = true];
    // Submission deadline is exceeded. Must be permanet failure.
    bool timeout = 3;
    // CLs that fail to submit. Could be transient or permanent.
    //
    // As of June 2021, CLs are submitted serially and submitter returns
    // immediately upon failure so `cl_failures` will have only one entry.
    // However, submitter may report multiple CL submission failures in the
    // future (e.g. CV supports parallel CL submission or CV submits a CL
    // stack in one RPC).
    CLSubmissionFailures cl_failures = 4;
  }
}

enum SubmissionResult {
  SUBMISSION_RESULT_UNSPECIFIED = 0;
  // All CLs have been submitted successfully.
  SUCCEEDED = 1;
  // Encountered transient failure.
  //
  // RM should retry if the deadline hasn't been exceeded.
  FAILED_TRANSIENT = 2;
  // Encountered permanent failure.
  //
  // For example, lack of submit permission or experienced merge conflict.
  FAILED_PERMANENT = 3;
}

message CQDVerificationCompleted {
}

message CQDFinished {
}
