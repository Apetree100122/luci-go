// Copyright 2020 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cv.changelist;

option go_package = "go.chromium.org/luci/cv/internal/changelist";

import "google/protobuf/timestamp.proto";
import "go.chromium.org/luci/common/proto/gerrit/gerrit.proto";

// Snapshot stores a snapshot of CL info as seen by CV at a certain time.
//
// When stored in CL entity, represents latest known Gerrit data.
// When stored in RunCL entity, represents data pertaining to a fixed patchset.
message Snapshot {
  // The timestamp from external system.
  // Used to determine if re-querying external system is needed.
  google.protobuf.Timestamp external_update_time = 1;

  // LUCI project in the context of which this snapshot was saved.
  //
  // Since a CL isn't a resource of CV, CV can't infer whether specific LUCI
  // project has access to a CL w/o re-querying Gerrit and effectively
  // recomputing the snapshot.
  string luci_project = 2;

  // Resolved dependencies of a CL.
  repeated Dep deps = 3;

  // Patchset is incremental number of the latest patchset (aka revision).
  int32 patchset = 4;
  // MinEquivalentPatchset is the smallest and hence the earliest patchset
  // which is code-wise equivalent to the latest one.
  //
  // See gerrit.EquivalentPatchsetRange function for details.
  //
  // CV tracks this to determine which prior tryjobs can be re-used and which
  // can be canceled.
  int32 min_equivalent_patchset = 5;

  // CL-kind specific data.
  oneof kind {
    Gerrit gerrit = 11;
  }
}

enum DepKind {
  DEP_KIND_UNSPECIFIED = 0;
  // Dep MUST be patched in / submitted before the dependent CL.
  HARD = 1;
  // Dep SHOULD be patched in / submitted before the dependent CL,
  // but doesn't have to be.
  SOFT = 2;
}

message Dep {
  // CLID is internal CV ID of a CL which is the dependency.
  int64 clid = 1;
  DepKind kind = 2;
}

message Gerrit {
  // Gerrit host.
  string host = 5;

  // Info contains subset of ChangeInfo listed below.
  //
  // NOTE: keep this list in sync with RemoveUnusedGerritInfo() function.
  //  * number
  //  * owner
  //      * id
  //      * email (may be not set)
  //  * project
  //  * ref
  //  * status
  //  * current_revision
  //  * revisions
  //      * kind
  //      * number
  //      * ref
  //      * created
  //      * description (patchset title)
  //      * commit (for current_revision only)
  //          * message (current CL description)
  //  * labels
  //      * optional
  //      * all (only if vote != 0)
  //          * user
  //              * id
  //              * email (may be not set)
  //      * value
  //  * messages
  //      * id
  //      * date
  //      * message
  //      * author
  //        * id
  //      * realauthor
  //        * id
  //  * updated
  //  * created
  gerrit.ChangeInfo info = 1;

  // Files are filenames touched in the current revision.
  //
  // It's derived from gerrit.ListFilesResponse, see
  // https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-files.
  repeated string files = 2;

  // Git dependencies of the current revision.
  repeated GerritGitDep git_deps = 3;

  // Free-form dependencies. Currently, sourced from CQ-Depend footers.
  // In the future, this may be derived from Gerrit hashtags, topics, or other
  // mechanisms.
  repeated GerritSoftDep soft_deps = 4;
}

// GerritGitDep is a dependency discovered via Git child->parent chain for one Gerrit CL.
message GerritGitDep {
  // Host is omitted because it's always the same as that of the CL.

  // Gerrit Change number.
  int64 change = 1;

  // Immediate is set iff this dep is an immediate parent of the Gerrit CL.
  //
  // Immediate dep must be submitted before its child.
  // Non-immediate CLs don't necessarily have to be submitted before:
  //   for example, for a chain <base> <- A1 <- B1 <- C1 <- D1
  //   D1's deps are [A,B,C] but only C is immediate, and 1 stands for patchset.
  //   Developer may then swap B,C without re-uploading D (say, to avoid
  //   patchset churn), resulting in a new logical chain:
  //      <base> <- A1 <- C2 <- B2
  //                   \
  //                    <- B1 <- C1 <- D1
  //
  //   In this case, Gerrit's related changes for D1 will still return A1,B1,C1,
  //   which CV interprets as C must be landed before D, while B and A should
  //   be landed before D.
  //
  // TODO(tandrii): this is replicating existing CQDaemon logic. I think
  // it'd be reasonable to treat all (A,B,C) as MUST BE submitted before D.
  bool immediate = 2;
}

message GerritSoftDep {
  // Gerrit host.
  string host = 1;
  // Gerrit change number.
  int64 change = 2;
}

// ApplicableConfig keeps track of configs applicable to a CL.
//
// This is computed based on known set of LUCI project configs, versions of
// which are updated by CV independently, so the ApplicableConfig are also
// eventually consistent.
//
// Normally, there is 1 applicable configs = exactly 1 project with 1 config
// group. If CL is no longer watched by CV, there will be 0 applicable configs.
//
// Sometimes, there can be 2+ applicable configs. This happens if either:
//  * eventual consistency: responsibility for CL is moved from one LUCI project
//    to another. Three is no way to make this atomically, so CL may temporarily
//    end up with 0 or 2 projects watching it, before settling on just 1.
//  * misconfiguration: two projects or 2 different ConfigGroups within the same
//    project watch the same CL.
// In either case, CV refuses to guess and will abstain from processing such
// CLs, but storing the list is very useful for CV debugging and potentially for
// better diagnostic messages to CV users and LUCI project owners.
message ApplicableConfig {
  message Project {
    string name = 1;
    // ID of the specific ConfigGroup. See cv/internal/config.ConfigGroupID.
    //
    // The referenced version may no longer be available to datastore,
    // commonly happening if CL wasn't active for a long time.
    repeated string config_group_ids = 2;
  }
  repeated Project projects = 2;
}

// DependentMeta stores metadata per LUCI project about this CL being a
// dependency of another one in the context of the specific LUCI project.
//
// This is necessary because soft dependencies (e.g. via CQ-Depend)
// can be arbitrary CL references (e.g. any GoBID), which aren't alone
// sufficient to determine ApplicableConfig. Thus, code review has to be
// queried first for CL details.
//
// In ideal case, code review responds with CL details, CV can verify that CL
// is watched by the current project, and then save Snapshot and
// ApplicableConfig.
//
// However, codereview may respond with an 403/404 error, s.t. CV can't
// determine an ApplicableConfig, but CV needs to persist the 403/404 error
// fact somehow s.t. it differs from yet-to-be-fetched CL.
//
// To illustrate, consider dependency of CL 200000 specified via
//    CQ-Depend: chrome-internal:184849
// in the context of `infra-internal` project. CV first needs to fetch 184849
// details from Gerrit authenticating as `infra-internal`. This CL doesn't
// belong to any infra repo, and as such `infra-internal` project-scoped
// account doesn't have READ access to it, so Gerrit responds with 404.
// This fact is stored in .DependentMeta["infra-internal"] = 404. Later,
// ProjectManager will read this fact, and respond on CL 200000 that CQ-Depend
// footer is wrong.
message DependentMeta {
  message Meta {
    // If true, means this CL doesn't exist or it isn't accessible to the
    // specific LUCI project.
    bool no_access = 1;
    // The timestamp when this was computed.
    google.protobuf.Timestamp update_time = 2;
  }
  // Maps LUCI Project to metadata.
  map<string, Meta> by_project = 1;
}

// CLError encapsulates all kinds of CL errors, which ultimately result in
// purging the CL.
message CLError {
  oneof kind {
    bool owner_lacks_email = 1;
    WatchedByManyConfigGroups watched_by_many_config_groups = 2;
    InvalidDeps invalid_deps = 3;
    string unsupported_mode = 4;
    bool self_cq_depend = 5;
  }

  message WatchedByManyConfigGroups {
    // Config group names without LUCI project prefix.
    repeated string config_groups = 1;
  }

  message InvalidDeps {
    repeated Dep unwatched = 1;
    repeated Dep wrong_config_group = 2;
    repeated Dep incompat_mode = 3;
  }
}
