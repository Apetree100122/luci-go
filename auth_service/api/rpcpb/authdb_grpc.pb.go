// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthDBClient is the client API for AuthDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthDBClient interface {
	// GetSnapshot serves the deflated AuthDB proto
	// message with snapshot of all groups.
	GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*Snapshot, error)
}

type authDBClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthDBClient(cc grpc.ClientConnInterface) AuthDBClient {
	return &authDBClient{cc}
}

func (c *authDBClient) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*Snapshot, error) {
	out := new(Snapshot)
	err := c.cc.Invoke(ctx, "/auth.service.AuthDB/GetSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthDBServer is the server API for AuthDB service.
// All implementations must embed UnimplementedAuthDBServer
// for forward compatibility
type AuthDBServer interface {
	// GetSnapshot serves the deflated AuthDB proto
	// message with snapshot of all groups.
	GetSnapshot(context.Context, *GetSnapshotRequest) (*Snapshot, error)
	mustEmbedUnimplementedAuthDBServer()
}

// UnimplementedAuthDBServer must be embedded to have forward compatible implementations.
type UnimplementedAuthDBServer struct {
}

func (UnimplementedAuthDBServer) GetSnapshot(context.Context, *GetSnapshotRequest) (*Snapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (UnimplementedAuthDBServer) mustEmbedUnimplementedAuthDBServer() {}

// UnsafeAuthDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthDBServer will
// result in compilation errors.
type UnsafeAuthDBServer interface {
	mustEmbedUnimplementedAuthDBServer()
}

func RegisterAuthDBServer(s grpc.ServiceRegistrar, srv AuthDBServer) {
	s.RegisterService(&AuthDB_ServiceDesc, srv)
}

func _AuthDB_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthDBServer).GetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.service.AuthDB/GetSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthDBServer).GetSnapshot(ctx, req.(*GetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthDB_ServiceDesc is the grpc.ServiceDesc for AuthDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.service.AuthDB",
	HandlerType: (*AuthDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSnapshot",
			Handler:    _AuthDB_GetSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/auth_service/api/rpcpb/authdb.proto",
}
