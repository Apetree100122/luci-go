// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: go.chromium.org/luci/auth_service/api/internalspb/internals.proto

package internalspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalsClient is the client API for Internals service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalsClient interface {
	// RefreshXSRFToken can be used to extend the lifetime of an XSRF token.
	RefreshXSRFToken(ctx context.Context, in *RefreshXSRFTokenRequest, opts ...grpc.CallOption) (*XSRFToken, error)
}

type internalsClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalsClient(cc grpc.ClientConnInterface) InternalsClient {
	return &internalsClient{cc}
}

func (c *internalsClient) RefreshXSRFToken(ctx context.Context, in *RefreshXSRFTokenRequest, opts ...grpc.CallOption) (*XSRFToken, error) {
	out := new(XSRFToken)
	err := c.cc.Invoke(ctx, "/auth.internals.Internals/RefreshXSRFToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalsServer is the server API for Internals service.
// All implementations must embed UnimplementedInternalsServer
// for forward compatibility
type InternalsServer interface {
	// RefreshXSRFToken can be used to extend the lifetime of an XSRF token.
	RefreshXSRFToken(context.Context, *RefreshXSRFTokenRequest) (*XSRFToken, error)
	mustEmbedUnimplementedInternalsServer()
}

// UnimplementedInternalsServer must be embedded to have forward compatible implementations.
type UnimplementedInternalsServer struct {
}

func (UnimplementedInternalsServer) RefreshXSRFToken(context.Context, *RefreshXSRFTokenRequest) (*XSRFToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshXSRFToken not implemented")
}
func (UnimplementedInternalsServer) mustEmbedUnimplementedInternalsServer() {}

// UnsafeInternalsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalsServer will
// result in compilation errors.
type UnsafeInternalsServer interface {
	mustEmbedUnimplementedInternalsServer()
}

func RegisterInternalsServer(s grpc.ServiceRegistrar, srv InternalsServer) {
	s.RegisterService(&Internals_ServiceDesc, srv)
}

func _Internals_RefreshXSRFToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshXSRFTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalsServer).RefreshXSRFToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.internals.Internals/RefreshXSRFToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalsServer).RefreshXSRFToken(ctx, req.(*RefreshXSRFTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Internals_ServiceDesc is the grpc.ServiceDesc for Internals service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Internals_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.internals.Internals",
	HandlerType: (*InternalsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefreshXSRFToken",
			Handler:    _Internals_RefreshXSRFToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/auth_service/api/internalspb/internals.proto",
}
