// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/scheduler/appengine/messages/config.proto

package messages

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Acl_Role int32

const (
	// Can do read-only operations, such as listing invocations of a Job.
	Acl_READER Acl_Role = 0
	// Can emit triggers for a Job.
	//
	// Being TRIGGERER implicitly grants READER permission.
	Acl_TRIGGERER Acl_Role = 2
	// Same as READER + TRIGGERER + can modify state of a Job or Invocation such
	// as aborting them.
	// LUCI scheduler (this service) is an OWNER of each `Job` and `Trigger`,
	// thus `Trigger`s are allowed to trigger all `Job`s defined in the same
	// project, regardless of their respective ACLs.
	Acl_OWNER Acl_Role = 1
)

var Acl_Role_name = map[int32]string{
	0: "READER",
	2: "TRIGGERER",
	1: "OWNER",
}

var Acl_Role_value = map[string]int32{
	"READER":    0,
	"TRIGGERER": 2,
	"OWNER":     1,
}

func (x Acl_Role) String() string {
	return proto.EnumName(Acl_Role_name, int32(x))
}

func (Acl_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{1, 0}
}

type TriggeringPolicy_Kind int32

const (
	// A placeholder for unrecognized policy kind.
	TriggeringPolicy_UNDEFINED TriggeringPolicy_Kind = 0
	// A greedy triggering function that takes all pending triggers (up to
	// max_batch_size limit) and collapses them into one new invocation,
	// deriving its properties from the most recent trigger alone. It doesn't
	// wait for a full batch, nor tries to batch evenly.
	TriggeringPolicy_GREEDY_BATCHING TriggeringPolicy_Kind = 1
	// A logarithmic triggering function that takes log_k N pending triggers (up
	// to max_batch_size limit) and collapses them into one new incovation,
	// deriving its properties from the most recent trigger alone, where N is
	// the total number of pending triggers and k is specified by the log_base
	// field below.
	TriggeringPolicy_LOGARITHMIC_BATCHING TriggeringPolicy_Kind = 2
)

var TriggeringPolicy_Kind_name = map[int32]string{
	0: "UNDEFINED",
	1: "GREEDY_BATCHING",
	2: "LOGARITHMIC_BATCHING",
}

var TriggeringPolicy_Kind_value = map[string]int32{
	"UNDEFINED":            0,
	"GREEDY_BATCHING":      1,
	"LOGARITHMIC_BATCHING": 2,
}

func (x TriggeringPolicy_Kind) String() string {
	return proto.EnumName(TriggeringPolicy_Kind_name, int32(x))
}

func (TriggeringPolicy_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{4, 0}
}

// ProjectConfig defines a schema for a config file that describe jobs belonging
// to some project.
type ProjectConfig struct {
	// Job is a set of jobs defined in the project.
	Job []*Job `protobuf:"bytes,1,rep,name=job,proto3" json:"job,omitempty"`
	// Trigger is a set of triggering jobs defined in the project.
	Trigger []*Trigger `protobuf:"bytes,2,rep,name=trigger,proto3" json:"trigger,omitempty"`
	// A list of ACL sets. Names must be unique.
	AclSets []*AclSet `protobuf:"bytes,3,rep,name=acl_sets,json=aclSets,proto3" json:"acl_sets,omitempty"`
	// A set of security options to be enabled individually for the project.
	SecurityOptions      *SecurityOptions `protobuf:"bytes,4,opt,name=security_options,json=securityOptions,proto3" json:"security_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ProjectConfig) Reset()         { *m = ProjectConfig{} }
func (m *ProjectConfig) String() string { return proto.CompactTextString(m) }
func (*ProjectConfig) ProtoMessage()    {}
func (*ProjectConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{0}
}

func (m *ProjectConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectConfig.Unmarshal(m, b)
}
func (m *ProjectConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectConfig.Marshal(b, m, deterministic)
}
func (m *ProjectConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectConfig.Merge(m, src)
}
func (m *ProjectConfig) XXX_Size() int {
	return xxx_messageInfo_ProjectConfig.Size(m)
}
func (m *ProjectConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectConfig proto.InternalMessageInfo

func (m *ProjectConfig) GetJob() []*Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *ProjectConfig) GetTrigger() []*Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *ProjectConfig) GetAclSets() []*AclSet {
	if m != nil {
		return m.AclSets
	}
	return nil
}

func (m *ProjectConfig) GetSecurityOptions() *SecurityOptions {
	if m != nil {
		return m.SecurityOptions
	}
	return nil
}

// A single access control rule.
type Acl struct {
	// Role denotes a list of actions that an identity can perform.
	Role Acl_Role `protobuf:"varint,1,opt,name=role,proto3,enum=scheduler.config.Acl_Role" json:"role,omitempty"`
	// Either email or "group:xyz" or auth service identity string "kind:name".
	GrantedTo            string   `protobuf:"bytes,2,opt,name=granted_to,json=grantedTo,proto3" json:"granted_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl) Reset()         { *m = Acl{} }
func (m *Acl) String() string { return proto.CompactTextString(m) }
func (*Acl) ProtoMessage()    {}
func (*Acl) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{1}
}

func (m *Acl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl.Unmarshal(m, b)
}
func (m *Acl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl.Marshal(b, m, deterministic)
}
func (m *Acl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl.Merge(m, src)
}
func (m *Acl) XXX_Size() int {
	return xxx_messageInfo_Acl.Size(m)
}
func (m *Acl) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl.DiscardUnknown(m)
}

var xxx_messageInfo_Acl proto.InternalMessageInfo

func (m *Acl) GetRole() Acl_Role {
	if m != nil {
		return m.Role
	}
	return Acl_READER
}

func (m *Acl) GetGrantedTo() string {
	if m != nil {
		return m.GrantedTo
	}
	return ""
}

// A set of Acl messages. Can be referenced in a Job or Trigger by name.
type AclSet struct {
	// A name of the ACL set, unique for a project.
	// Required. Must match regex '^[0-9A-Za-z_\-\.]{1,100}$'.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of access control rules.
	// The order does not matter.
	Acls                 []*Acl   `protobuf:"bytes,2,rep,name=acls,proto3" json:"acls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AclSet) Reset()         { *m = AclSet{} }
func (m *AclSet) String() string { return proto.CompactTextString(m) }
func (*AclSet) ProtoMessage()    {}
func (*AclSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{2}
}

func (m *AclSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AclSet.Unmarshal(m, b)
}
func (m *AclSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AclSet.Marshal(b, m, deterministic)
}
func (m *AclSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AclSet.Merge(m, src)
}
func (m *AclSet) XXX_Size() int {
	return xxx_messageInfo_AclSet.Size(m)
}
func (m *AclSet) XXX_DiscardUnknown() {
	xxx_messageInfo_AclSet.DiscardUnknown(m)
}

var xxx_messageInfo_AclSet proto.InternalMessageInfo

func (m *AclSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AclSet) GetAcls() []*Acl {
	if m != nil {
		return m.Acls
	}
	return nil
}

// SecurityOptions enable project specific security features.
type SecurityOptions struct {
	// Enables the use of project scoped service accounts.
	ProjectScopedServiceAccounts bool     `protobuf:"varint,1,opt,name=project_scoped_service_accounts,json=projectScopedServiceAccounts,proto3" json:"project_scoped_service_accounts,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *SecurityOptions) Reset()         { *m = SecurityOptions{} }
func (m *SecurityOptions) String() string { return proto.CompactTextString(m) }
func (*SecurityOptions) ProtoMessage()    {}
func (*SecurityOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{3}
}

func (m *SecurityOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityOptions.Unmarshal(m, b)
}
func (m *SecurityOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityOptions.Marshal(b, m, deterministic)
}
func (m *SecurityOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityOptions.Merge(m, src)
}
func (m *SecurityOptions) XXX_Size() int {
	return xxx_messageInfo_SecurityOptions.Size(m)
}
func (m *SecurityOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityOptions proto.InternalMessageInfo

func (m *SecurityOptions) GetProjectScopedServiceAccounts() bool {
	if m != nil {
		return m.ProjectScopedServiceAccounts
	}
	return false
}

// TriggeringPolicy defines a function that decides when and how to launch a
// job invocation, given the job's current state and a set of pending triggers.
type TriggeringPolicy struct {
	// Defines an algorithm to use for the triggering decisions.
	//
	// See comments for Kind enum field.
	//
	// Default is GREEDY_BATCHING.
	Kind TriggeringPolicy_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=scheduler.config.TriggeringPolicy_Kind" json:"kind,omitempty"`
	// Limits number of job invocations running at the same time.
	//
	// If the number of current active invocations is more or equal to this
	// setting, the triggering function will be skipped completely, since it isn't
	// allowed to trigger anything anyway.
	//
	// Default is 1.
	MaxConcurrentInvocations int64 `protobuf:"varint,2,opt,name=max_concurrent_invocations,json=maxConcurrentInvocations,proto3" json:"max_concurrent_invocations,omitempty"`
	// Limits how many triggers can be put into one invocation request.
	//
	// For example, setting this to 1 will make each trigger launch its own
	// invocation.
	//
	// Default is 1000 (which is ~= unlimited).
	MaxBatchSize int64 `protobuf:"varint,3,opt,name=max_batch_size,json=maxBatchSize,proto3" json:"max_batch_size,omitempty"`
	// Base of the logarithm operation during logarithmic batching.
	//
	// For example, setting this to 2, will cause 3 out of 8 pending triggers to
	// be combined into a single invocation with LOGARITHMIC_BATCHING kind. This
	// value is ignored by other policy kinds. Must be larger or equal to 1.0001
	// for numerical stability reasons.
	//
	// Required.
	LogBase              float32  `protobuf:"fixed32,4,opt,name=log_base,json=logBase,proto3" json:"log_base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TriggeringPolicy) Reset()         { *m = TriggeringPolicy{} }
func (m *TriggeringPolicy) String() string { return proto.CompactTextString(m) }
func (*TriggeringPolicy) ProtoMessage()    {}
func (*TriggeringPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{4}
}

func (m *TriggeringPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriggeringPolicy.Unmarshal(m, b)
}
func (m *TriggeringPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriggeringPolicy.Marshal(b, m, deterministic)
}
func (m *TriggeringPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggeringPolicy.Merge(m, src)
}
func (m *TriggeringPolicy) XXX_Size() int {
	return xxx_messageInfo_TriggeringPolicy.Size(m)
}
func (m *TriggeringPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggeringPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_TriggeringPolicy proto.InternalMessageInfo

func (m *TriggeringPolicy) GetKind() TriggeringPolicy_Kind {
	if m != nil {
		return m.Kind
	}
	return TriggeringPolicy_UNDEFINED
}

func (m *TriggeringPolicy) GetMaxConcurrentInvocations() int64 {
	if m != nil {
		return m.MaxConcurrentInvocations
	}
	return 0
}

func (m *TriggeringPolicy) GetMaxBatchSize() int64 {
	if m != nil {
		return m.MaxBatchSize
	}
	return 0
}

func (m *TriggeringPolicy) GetLogBase() float32 {
	if m != nil {
		return m.LogBase
	}
	return 0
}

// Job specifies a single regular job belonging to a project.
//
// Such jobs runs on a schedule or can be triggered by some trigger.
type Job struct {
	// Id is a name of the job (unique for the project).
	//
	// Must match '^[0-9A-Za-z_\-\. \)\(]{1,100}$'.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Schedule describes when to run the job.
	//
	// A job with a schedule can still be triggered by other triggering jobs
	// and via "Trigger" button in UI.
	//
	// Supported kinds of schedules (illustrated by examples):
	//   - "* 0 * * * *": cron-like expression, in a syntax supported by
	//     https://github.com/gorhill/cronexpr (see its docs for full reference).
	//     The cron engine will attempt to start a job at specified moments in
	//     time (based on UTC clock). If when triggering a job, previous
	//     invocation is still running, an overrun will be recorded (and next
	//     attempt to start a job happens based on the schedule, not when the
	//     previous invocation finishes). Some examples:
	//       "0 */3 * * * *" - each 3 hours: at 12:00 AM UTC, 3:00 AM UTC, ...
	//       "0 */3 * * *" - exact same thing (last field is optional)
	//       "0 2,10,18 * * *" - at 2 AM UTC, 10 AM UTC, 6 PM UTC
	//       "0 7 * * *" - at 7 AM UTC, once a day.
	//   - "with 10s interval": runs invocations in a loop, waiting 10s after
	//     finishing invocation before starting a new one. Overruns are not
	//     possible.
	//   - "continuously" is alias for "with 0s interval", meaning the job will
	//     run in a loop without any pauses.
	//   - "triggered" schedule indicates that job is only started via a trigger.
	//
	// Default is "triggered".
	Schedule string `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// Disabled is true to disable this job.
	//
	// Disabled job is equivalent to a deleted job: it can't be triggered, it
	// can't be referenced by other jobs and it doesn't show up in UI or API.
	//
	// Use this instead of commenting out the definition in case you want to
	// temporarily git rid of the job.
	Disabled bool `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// List of access control rules for the Job.
	// The order does not matter.
	// There can be at most 32 different acls for a Job, including those from
	// acl_sets.
	Acls []*Acl `protobuf:"bytes,5,rep,name=acls,proto3" json:"acls,omitempty"`
	// A list of ACL set names. Each ACL in each referenced ACL set will be
	// included in this Job.
	// The order does not matter.
	AclSets []string `protobuf:"bytes,6,rep,name=acl_sets,json=aclSets,proto3" json:"acl_sets,omitempty"`
	// TriggeringPolicy defines how job handles incoming triggering events.
	//
	// If not specified defaults to GREEDY_BATCHING with 1 max concurrent
	// invocation. See comments in TriggeringPolicy for more details.
	TriggeringPolicy *TriggeringPolicy `protobuf:"bytes,7,opt,name=triggering_policy,json=triggeringPolicy,proto3" json:"triggering_policy,omitempty"`
	// Noop is used for testing. It is "do nothing" task.
	Noop *NoopTask `protobuf:"bytes,100,opt,name=noop,proto3" json:"noop,omitempty"`
	// UrlFetch can be used to make a simple HTTP call.
	UrlFetch *UrlFetchTask `protobuf:"bytes,101,opt,name=url_fetch,json=urlFetch,proto3" json:"url_fetch,omitempty"`
	// BuildbucketTask can be used to schedule buildbucket job.
	Buildbucket          *BuildbucketTask `protobuf:"bytes,103,opt,name=buildbucket,proto3" json:"buildbucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{5}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *Job) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Job) GetAcls() []*Acl {
	if m != nil {
		return m.Acls
	}
	return nil
}

func (m *Job) GetAclSets() []string {
	if m != nil {
		return m.AclSets
	}
	return nil
}

func (m *Job) GetTriggeringPolicy() *TriggeringPolicy {
	if m != nil {
		return m.TriggeringPolicy
	}
	return nil
}

func (m *Job) GetNoop() *NoopTask {
	if m != nil {
		return m.Noop
	}
	return nil
}

func (m *Job) GetUrlFetch() *UrlFetchTask {
	if m != nil {
		return m.UrlFetch
	}
	return nil
}

func (m *Job) GetBuildbucket() *BuildbucketTask {
	if m != nil {
		return m.Buildbucket
	}
	return nil
}

// Trigger specifies a job that triggers other jobs.
//
// It is a special kind of a job that periodically checks the state of the world
// and triggers other jobs.
type Trigger struct {
	// Id is a name of the job (unique for the project).
	//
	// Must match '^[0-9A-Za-z_\-\. \)\(]{1,100}$'. It's in the same namespace as
	// regular jobs.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Schedule describes when to run this triggering job.
	//
	// See Job.schedule for more info. Default is "with 30s interval".
	Schedule string `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// Disabled is true to disable this job.
	//
	// Se Job.disabled for more info.
	Disabled bool `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// ACLs, see Job.acls and Job.acl_sets.
	Acls    []*Acl   `protobuf:"bytes,4,rep,name=acls,proto3" json:"acls,omitempty"`
	AclSets []string `protobuf:"bytes,5,rep,name=acl_sets,json=aclSets,proto3" json:"acl_sets,omitempty"`
	// TriggeringPolicy defines how job handles incoming triggering events.
	//
	// It is rare for a trigger itself to have a non-default triggering policy,
	// so most likely you should not touch this field.
	TriggeringPolicy *TriggeringPolicy `protobuf:"bytes,6,opt,name=triggering_policy,json=triggeringPolicy,proto3" json:"triggering_policy,omitempty"`
	// Triggers are IDs of jobs triggered by this trigger.
	Triggers []string `protobuf:"bytes,200,rep,name=triggers,proto3" json:"triggers,omitempty"`
	// Noop is used for testing. It is "do nothing" trigger.
	Noop *NoopTask `protobuf:"bytes,100,opt,name=noop,proto3" json:"noop,omitempty"`
	// Gitiles is used to trigger jobs for new commits on Gitiles.
	Gitiles              *GitilesTask `protobuf:"bytes,101,opt,name=gitiles,proto3" json:"gitiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Trigger) Reset()         { *m = Trigger{} }
func (m *Trigger) String() string { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()    {}
func (*Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{6}
}

func (m *Trigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trigger.Unmarshal(m, b)
}
func (m *Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trigger.Marshal(b, m, deterministic)
}
func (m *Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trigger.Merge(m, src)
}
func (m *Trigger) XXX_Size() int {
	return xxx_messageInfo_Trigger.Size(m)
}
func (m *Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_Trigger proto.InternalMessageInfo

func (m *Trigger) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Trigger) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *Trigger) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Trigger) GetAcls() []*Acl {
	if m != nil {
		return m.Acls
	}
	return nil
}

func (m *Trigger) GetAclSets() []string {
	if m != nil {
		return m.AclSets
	}
	return nil
}

func (m *Trigger) GetTriggeringPolicy() *TriggeringPolicy {
	if m != nil {
		return m.TriggeringPolicy
	}
	return nil
}

func (m *Trigger) GetTriggers() []string {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *Trigger) GetNoop() *NoopTask {
	if m != nil {
		return m.Noop
	}
	return nil
}

func (m *Trigger) GetGitiles() *GitilesTask {
	if m != nil {
		return m.Gitiles
	}
	return nil
}

// NoopTask is used for testing. It is a "do nothing" task that can emit fake
// triggers.
type NoopTask struct {
	SleepMs              int64    `protobuf:"varint,1,opt,name=sleep_ms,json=sleepMs,proto3" json:"sleep_ms,omitempty"`
	TriggersCount        int64    `protobuf:"varint,2,opt,name=triggers_count,json=triggersCount,proto3" json:"triggers_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoopTask) Reset()         { *m = NoopTask{} }
func (m *NoopTask) String() string { return proto.CompactTextString(m) }
func (*NoopTask) ProtoMessage()    {}
func (*NoopTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{7}
}

func (m *NoopTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoopTask.Unmarshal(m, b)
}
func (m *NoopTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoopTask.Marshal(b, m, deterministic)
}
func (m *NoopTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoopTask.Merge(m, src)
}
func (m *NoopTask) XXX_Size() int {
	return xxx_messageInfo_NoopTask.Size(m)
}
func (m *NoopTask) XXX_DiscardUnknown() {
	xxx_messageInfo_NoopTask.DiscardUnknown(m)
}

var xxx_messageInfo_NoopTask proto.InternalMessageInfo

func (m *NoopTask) GetSleepMs() int64 {
	if m != nil {
		return m.SleepMs
	}
	return 0
}

func (m *NoopTask) GetTriggersCount() int64 {
	if m != nil {
		return m.TriggersCount
	}
	return 0
}

// GitilesTask specifies parameters of what repo and which refs to watch for new
// commits.
//
// GitilesTask will trigger other jobs if either:
//   * ref's tip has changed (e.g. new commit landed on a ref),
//   * a ref has just been created.
//
// LIMITATIONS:
//
//  1. Per each fast-forward ref's tip change as observed by scheduler,
//     no more than 50 latest (according to gitiles default ordering) commits
//     will result in emitted triggers.
//     This is a safeguard against mistaken or deliberate but unusual git push
//     actions, which typically don't have intent of triggering a build for each
//     such commit.
//     If you absolutely need to act on every new commit even in such cases,
//     you will need to roll your own implementation, though you may still find
//     Scheduler GitilesTask useful to trigger your code on new changes.
//
//  2. No hard latency guarantee. A single invocation of GitilesTask may not be
//     able to process all the backlog. This is particularly true after a config
//     change changes the set of watched ref. However, GitilesTask is designed
//     to make continuous progress with each invocation.
type GitilesTask struct {
	// Repo is the URL of the Gitiles repository.
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// Refs is a list of Git references to track.
	//
	// Each ref can be either:
	//   * a fully qualified ref like "refs/heads/master" or "refs/tags/v1.2.3"
	//   * a regular expression with "regexp:" prefix to match multiple refs, e.g.
	//     "regexp:refs/heads/[^/]+" or "regexp:refs/branch-heads/\d+\.\d+", but
	//     the regular expression should have a literal prefix with at least two
	//     slashes present, e.g. "refs/release-\d+/foobar" is not allowed, because
	//     the literal prefix "refs/release-" contains only one slash. The regexp
	//     should not start with ^ or end with $ as they will be added
	//     automatically.
	Refs []string `protobuf:"bytes,2,rep,name=refs,proto3" json:"refs,omitempty"`
	// Optional path_regexps and path_regexps_exclude are lists of regular
	// expressions limiting emitted triggers only to commits whose tree diff
	// touches relevant files.
	//
	// If neither path_regexps nor path_regexps_exclude is specified (default),
	// emits triggers for any commit.
	// Specifying just path_regexps_exclude is not allowed.
	//
	// path_regexps and path_regexps_exclude rules apply on each individual commit
	// independently. For each commit, a set of all filepaths referenced in Git
	// commit diff is used for matching.  On top of simple file additions and file
	// modifictions, this also includes: file removals, file moves (old and new
	// path considered), and changing of file metadata (e.g., chmod +x). This
	// doesn't include directories (git doesn't track them explicitly).
	//
	// Triggers are emitted for a commit if only if at least 1 touched filepath
	//  1. is not matched by any path_regexps_exclude,
	//  2. AND is matched at least 1 path_regexps
	// **subject to caveats below** for exceptional cases.
	//
	// Each path_regexps and path_regexps_exclude is a regular expression
	// "a/b/c/.+". It should not start with ^ or end with $ as they will be added
	// automatically.
	//
	// CAVEATS:
	//  1. path_regexps: ".+"
	//     will NOT match commits which modify no files (aka empty commits) and
	//     as such differs from default case of not specifying any `path_regexps`.
	//  2. Per GitilesTask doc, if a ref fast-forwards >50 commits, only last 50
	//     commits are checked. If none of them matches any path specified here, a
	//     single trigger is emitted for the ref's new tip.
	//     Rational: it's better to emit redundant triggers than silently not emit
	//     triggers for commits beyond latest 50.
	//     TODO(tandrii): it's possible to improve this by examining diff
	//     between ref's last and new tips, but one has to worry about gitiles
	//     taking potentially very long time to compute it.
	//  3. If a ref tip has just been created, a trigger would be emitted
	//     regardless of corresponding commit's diff.
	PathRegexps          []string `protobuf:"bytes,3,rep,name=path_regexps,json=pathRegexps,proto3" json:"path_regexps,omitempty"`
	PathRegexpsExclude   []string `protobuf:"bytes,4,rep,name=path_regexps_exclude,json=pathRegexpsExclude,proto3" json:"path_regexps_exclude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitilesTask) Reset()         { *m = GitilesTask{} }
func (m *GitilesTask) String() string { return proto.CompactTextString(m) }
func (*GitilesTask) ProtoMessage()    {}
func (*GitilesTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{8}
}

func (m *GitilesTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitilesTask.Unmarshal(m, b)
}
func (m *GitilesTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitilesTask.Marshal(b, m, deterministic)
}
func (m *GitilesTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitilesTask.Merge(m, src)
}
func (m *GitilesTask) XXX_Size() int {
	return xxx_messageInfo_GitilesTask.Size(m)
}
func (m *GitilesTask) XXX_DiscardUnknown() {
	xxx_messageInfo_GitilesTask.DiscardUnknown(m)
}

var xxx_messageInfo_GitilesTask proto.InternalMessageInfo

func (m *GitilesTask) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *GitilesTask) GetRefs() []string {
	if m != nil {
		return m.Refs
	}
	return nil
}

func (m *GitilesTask) GetPathRegexps() []string {
	if m != nil {
		return m.PathRegexps
	}
	return nil
}

func (m *GitilesTask) GetPathRegexpsExclude() []string {
	if m != nil {
		return m.PathRegexpsExclude
	}
	return nil
}

// UrlFetchTask specifies parameters for simple HTTP call.
type UrlFetchTask struct {
	// Method is HTTP method to use, such as "GET" or "POST". Default is "GET".
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// Url to send the request to.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Timeout is how long to wait for request to complete. Default is 60 sec.
	TimeoutSec           int32    `protobuf:"varint,3,opt,name=timeout_sec,json=timeoutSec,proto3" json:"timeout_sec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UrlFetchTask) Reset()         { *m = UrlFetchTask{} }
func (m *UrlFetchTask) String() string { return proto.CompactTextString(m) }
func (*UrlFetchTask) ProtoMessage()    {}
func (*UrlFetchTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{9}
}

func (m *UrlFetchTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UrlFetchTask.Unmarshal(m, b)
}
func (m *UrlFetchTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UrlFetchTask.Marshal(b, m, deterministic)
}
func (m *UrlFetchTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UrlFetchTask.Merge(m, src)
}
func (m *UrlFetchTask) XXX_Size() int {
	return xxx_messageInfo_UrlFetchTask.Size(m)
}
func (m *UrlFetchTask) XXX_DiscardUnknown() {
	xxx_messageInfo_UrlFetchTask.DiscardUnknown(m)
}

var xxx_messageInfo_UrlFetchTask proto.InternalMessageInfo

func (m *UrlFetchTask) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *UrlFetchTask) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UrlFetchTask) GetTimeoutSec() int32 {
	if m != nil {
		return m.TimeoutSec
	}
	return 0
}

// BuildbucketTask specifies parameters of Buildbucket-based jobs.
type BuildbucketTask struct {
	// Server is hostname of the buildbucket service to use.
	// Typically, "cr-buildbucket.appspot.com".
	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// Bucket defines what bucket to add the task to.
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Builder defines what to run.
	Builder string `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	// Properties is arbitrary "key:value" pairs describing the task.
	// TODO(tandrii): which properties will be overridden if triggered?
	Properties []string `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty"`
	// Tags is a list of tags (as "key:value" pairs) to assign to the task.
	Tags                 []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildbucketTask) Reset()         { *m = BuildbucketTask{} }
func (m *BuildbucketTask) String() string { return proto.CompactTextString(m) }
func (*BuildbucketTask) ProtoMessage()    {}
func (*BuildbucketTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{10}
}

func (m *BuildbucketTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildbucketTask.Unmarshal(m, b)
}
func (m *BuildbucketTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildbucketTask.Marshal(b, m, deterministic)
}
func (m *BuildbucketTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildbucketTask.Merge(m, src)
}
func (m *BuildbucketTask) XXX_Size() int {
	return xxx_messageInfo_BuildbucketTask.Size(m)
}
func (m *BuildbucketTask) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildbucketTask.DiscardUnknown(m)
}

var xxx_messageInfo_BuildbucketTask proto.InternalMessageInfo

func (m *BuildbucketTask) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *BuildbucketTask) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *BuildbucketTask) GetBuilder() string {
	if m != nil {
		return m.Builder
	}
	return ""
}

func (m *BuildbucketTask) GetProperties() []string {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *BuildbucketTask) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// TaskDefWrapper is a union type of all possible tasks known to the scheduler.
//
// It is used internally when storing jobs in the datastore.
type TaskDefWrapper struct {
	Noop                 *NoopTask        `protobuf:"bytes,1,opt,name=noop,proto3" json:"noop,omitempty"`
	UrlFetch             *UrlFetchTask    `protobuf:"bytes,2,opt,name=url_fetch,json=urlFetch,proto3" json:"url_fetch,omitempty"`
	Buildbucket          *BuildbucketTask `protobuf:"bytes,4,opt,name=buildbucket,proto3" json:"buildbucket,omitempty"`
	Gitiles              *GitilesTask     `protobuf:"bytes,5,opt,name=gitiles,proto3" json:"gitiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TaskDefWrapper) Reset()         { *m = TaskDefWrapper{} }
func (m *TaskDefWrapper) String() string { return proto.CompactTextString(m) }
func (*TaskDefWrapper) ProtoMessage()    {}
func (*TaskDefWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b38e5823bccf1c5, []int{11}
}

func (m *TaskDefWrapper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskDefWrapper.Unmarshal(m, b)
}
func (m *TaskDefWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskDefWrapper.Marshal(b, m, deterministic)
}
func (m *TaskDefWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskDefWrapper.Merge(m, src)
}
func (m *TaskDefWrapper) XXX_Size() int {
	return xxx_messageInfo_TaskDefWrapper.Size(m)
}
func (m *TaskDefWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskDefWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_TaskDefWrapper proto.InternalMessageInfo

func (m *TaskDefWrapper) GetNoop() *NoopTask {
	if m != nil {
		return m.Noop
	}
	return nil
}

func (m *TaskDefWrapper) GetUrlFetch() *UrlFetchTask {
	if m != nil {
		return m.UrlFetch
	}
	return nil
}

func (m *TaskDefWrapper) GetBuildbucket() *BuildbucketTask {
	if m != nil {
		return m.Buildbucket
	}
	return nil
}

func (m *TaskDefWrapper) GetGitiles() *GitilesTask {
	if m != nil {
		return m.Gitiles
	}
	return nil
}

func init() {
	proto.RegisterEnum("scheduler.config.Acl_Role", Acl_Role_name, Acl_Role_value)
	proto.RegisterEnum("scheduler.config.TriggeringPolicy_Kind", TriggeringPolicy_Kind_name, TriggeringPolicy_Kind_value)
	proto.RegisterType((*ProjectConfig)(nil), "scheduler.config.ProjectConfig")
	proto.RegisterType((*Acl)(nil), "scheduler.config.Acl")
	proto.RegisterType((*AclSet)(nil), "scheduler.config.AclSet")
	proto.RegisterType((*SecurityOptions)(nil), "scheduler.config.SecurityOptions")
	proto.RegisterType((*TriggeringPolicy)(nil), "scheduler.config.TriggeringPolicy")
	proto.RegisterType((*Job)(nil), "scheduler.config.Job")
	proto.RegisterType((*Trigger)(nil), "scheduler.config.Trigger")
	proto.RegisterType((*NoopTask)(nil), "scheduler.config.NoopTask")
	proto.RegisterType((*GitilesTask)(nil), "scheduler.config.GitilesTask")
	proto.RegisterType((*UrlFetchTask)(nil), "scheduler.config.UrlFetchTask")
	proto.RegisterType((*BuildbucketTask)(nil), "scheduler.config.BuildbucketTask")
	proto.RegisterType((*TaskDefWrapper)(nil), "scheduler.config.TaskDefWrapper")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/scheduler/appengine/messages/config.proto", fileDescriptor_3b38e5823bccf1c5)
}

var fileDescriptor_3b38e5823bccf1c5 = []byte{
	// 1033 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x0d, 0x45, 0x4a, 0xa2, 0xae, 0xfc, 0x60, 0xa7, 0x49, 0xc1, 0xb8, 0x4d, 0xe2, 0x10, 0x2d,
	0xe2, 0x02, 0x85, 0x5c, 0xd8, 0x8b, 0x2e, 0x52, 0x14, 0x90, 0x25, 0x45, 0x91, 0xeb, 0xd8, 0xc1,
	0x48, 0x41, 0x9a, 0x6e, 0x08, 0x6a, 0x38, 0xa2, 0x26, 0xa6, 0x38, 0xc4, 0xcc, 0x30, 0x70, 0xb2,
	0x6b, 0x97, 0xdd, 0x74, 0xd3, 0x2f, 0xe8, 0xd7, 0xf4, 0x6b, 0x8a, 0x7e, 0x42, 0xc1, 0x21, 0x29,
	0xab, 0xb6, 0x83, 0xd4, 0x49, 0x56, 0x9a, 0x7b, 0xe6, 0x9c, 0x79, 0x9d, 0x7b, 0xaf, 0x08, 0x3f,
	0x44, 0xbc, 0x43, 0xe6, 0x82, 0x2f, 0x58, 0xb6, 0xe8, 0x70, 0x11, 0xed, 0xc6, 0x19, 0x61, 0xbb,
	0x92, 0xcc, 0x69, 0x98, 0xc5, 0x54, 0xec, 0x06, 0x69, 0x4a, 0x93, 0x88, 0x25, 0x74, 0x77, 0x41,
	0xa5, 0x0c, 0x22, 0x2a, 0x77, 0x09, 0x4f, 0x66, 0x2c, 0xea, 0xa4, 0x82, 0x2b, 0x8e, 0x9c, 0x25,
	0xb5, 0x53, 0xe0, 0xde, 0x3f, 0x06, 0xac, 0x3f, 0x15, 0xfc, 0x25, 0x25, 0xaa, 0xa7, 0x11, 0xf4,
	0x00, 0xcc, 0x97, 0x7c, 0xea, 0x1a, 0xdb, 0xe6, 0x4e, 0x7b, 0xef, 0x56, 0xe7, 0xa2, 0xa2, 0x73,
	0xc8, 0xa7, 0x38, 0x67, 0xa0, 0x7d, 0x68, 0x2a, 0xc1, 0xa2, 0x88, 0x0a, 0xb7, 0xa6, 0xc9, 0xb7,
	0x2f, 0x93, 0x27, 0x05, 0x01, 0x57, 0x4c, 0xb4, 0x0f, 0x76, 0x40, 0x62, 0x5f, 0x52, 0x25, 0x5d,
	0x53, 0xab, 0xdc, 0xcb, 0xaa, 0x2e, 0x89, 0xc7, 0x54, 0xe1, 0x66, 0xa0, 0x7f, 0x25, 0x3a, 0x02,
	0x47, 0x52, 0x92, 0x09, 0xa6, 0x5e, 0xfb, 0x3c, 0x55, 0x8c, 0x27, 0xd2, 0xb5, 0xb6, 0x8d, 0x9d,
	0xf6, 0xde, 0xfd, 0xcb, 0xe2, 0x71, 0xc9, 0x3c, 0x29, 0x88, 0x78, 0x53, 0xfe, 0x17, 0xf0, 0x7e,
	0x35, 0xc0, 0xec, 0x92, 0x18, 0x75, 0xc0, 0x12, 0x3c, 0xa6, 0xae, 0xb1, 0x6d, 0xec, 0x6c, 0xec,
	0x6d, 0x5d, 0x79, 0x8c, 0x0e, 0xe6, 0x31, 0xc5, 0x9a, 0x87, 0xee, 0x00, 0x44, 0x22, 0x48, 0x14,
	0x0d, 0x7d, 0xc5, 0xdd, 0xda, 0xb6, 0xb1, 0xd3, 0xc2, 0xad, 0x12, 0x99, 0x70, 0xef, 0x1b, 0xb0,
	0x72, 0x32, 0x02, 0x68, 0xe0, 0x41, 0xb7, 0x3f, 0xc0, 0xce, 0x0d, 0xb4, 0x0e, 0xad, 0x09, 0x1e,
	0x0d, 0x87, 0x03, 0x3c, 0xc0, 0x4e, 0x0d, 0xb5, 0xa0, 0x7e, 0xf2, 0xfc, 0x78, 0x80, 0x1d, 0xc3,
	0x1b, 0x42, 0xa3, 0xb8, 0x25, 0x42, 0x60, 0x25, 0xc1, 0xa2, 0x38, 0x46, 0x0b, 0xeb, 0x31, 0xfa,
	0x1a, 0xac, 0x80, 0xc4, 0xb2, 0x7c, 0xd7, 0x5b, 0x57, 0x1e, 0x0d, 0x6b, 0x8a, 0xf7, 0x13, 0x6c,
	0x5e, 0xb8, 0x31, 0x1a, 0xc0, 0xbd, 0xb4, 0xb0, 0xd4, 0x97, 0x84, 0xa7, 0x34, 0xf4, 0x25, 0x15,
	0xaf, 0x18, 0xa1, 0x7e, 0x40, 0x08, 0xcf, 0x12, 0x25, 0xf5, 0x66, 0x36, 0xfe, 0xa2, 0xa4, 0x8d,
	0x35, 0x6b, 0x5c, 0x90, 0xba, 0x25, 0xc7, 0xfb, 0xa3, 0x06, 0x4e, 0xe9, 0x1f, 0x4b, 0xa2, 0xa7,
	0x3c, 0x66, 0xe4, 0x35, 0x7a, 0x08, 0xd6, 0x29, 0x4b, 0xc2, 0xf2, 0xd1, 0x1e, 0xbc, 0xd5, 0xf1,
	0xa5, 0xa2, 0xf3, 0x23, 0x4b, 0x42, 0xac, 0x45, 0xe8, 0x7b, 0xd8, 0x5a, 0x04, 0x67, 0x3e, 0xe1,
	0x09, 0xc9, 0x84, 0xa0, 0x89, 0xf2, 0x59, 0xf2, 0x8a, 0x93, 0xa0, 0x70, 0x34, 0x7f, 0x51, 0x13,
	0xbb, 0x8b, 0xe0, 0xac, 0xb7, 0x24, 0x8c, 0xce, 0xe7, 0xd1, 0x97, 0xb0, 0x91, 0xab, 0xa7, 0x81,
	0x22, 0x73, 0x5f, 0xb2, 0x37, 0xd4, 0x35, 0xb5, 0x62, 0x6d, 0x11, 0x9c, 0x1d, 0xe4, 0xe0, 0x98,
	0xbd, 0xa1, 0xe8, 0x36, 0xd8, 0x31, 0x8f, 0xfc, 0x69, 0x20, 0xa9, 0xce, 0x91, 0x1a, 0x6e, 0xc6,
	0x3c, 0x3a, 0x08, 0x24, 0xf5, 0xfa, 0x60, 0xe5, 0x87, 0xc9, 0x5d, 0x79, 0x76, 0xdc, 0x1f, 0x3c,
	0x1a, 0x1d, 0x0f, 0xfa, 0xce, 0x0d, 0xf4, 0x29, 0x6c, 0x0e, 0xf1, 0x60, 0xd0, 0x7f, 0xe1, 0x1f,
	0x74, 0x27, 0xbd, 0xc7, 0xa3, 0xe3, 0xa1, 0x63, 0x20, 0x17, 0x6e, 0x1e, 0x9d, 0x0c, 0xbb, 0x78,
	0x34, 0x79, 0xfc, 0x64, 0xd4, 0x3b, 0x9f, 0xa9, 0x79, 0x7f, 0x9a, 0x60, 0x1e, 0xf2, 0x29, 0xda,
	0x80, 0x1a, 0x0b, 0x4b, 0xd7, 0x6a, 0x2c, 0x44, 0x5b, 0x60, 0x57, 0x8f, 0x51, 0x26, 0xc7, 0x32,
	0xce, 0xe7, 0x42, 0x26, 0x83, 0x69, 0x4c, 0x43, 0x7d, 0x68, 0x1b, 0x2f, 0xe3, 0xa5, 0xd7, 0xf5,
	0x77, 0x7a, 0x9d, 0xdf, 0x6d, 0x59, 0x3c, 0x8d, 0x6d, 0x73, 0xa7, 0x75, 0x5e, 0x22, 0x27, 0xf0,
	0x89, 0x5a, 0xbe, 0xbc, 0x9f, 0xea, 0xa7, 0x77, 0x9b, 0xba, 0x46, 0xbc, 0x77, 0x9b, 0x84, 0x1d,
	0x75, 0xd1, 0xe8, 0x0e, 0x58, 0x09, 0xe7, 0xa9, 0x1b, 0xea, 0x35, 0xae, 0xa8, 0x8e, 0x63, 0xce,
	0xd3, 0x49, 0x20, 0x4f, 0xb1, 0xe6, 0xa1, 0x87, 0xd0, 0xca, 0x44, 0xec, 0xcf, 0xa8, 0x22, 0x73,
	0x97, 0x6a, 0xd1, 0xdd, 0xcb, 0xa2, 0x67, 0x22, 0x7e, 0x94, 0x33, 0xb4, 0xd0, 0xce, 0xca, 0x08,
	0xf5, 0xa0, 0x3d, 0xcd, 0x58, 0x1c, 0x4e, 0x33, 0x72, 0x4a, 0x95, 0x1b, 0xbd, 0xad, 0xb6, 0x0f,
	0xce, 0x49, 0x7a, 0x85, 0x55, 0xd5, 0xa1, 0x65, 0x5b, 0x4e, 0xfd, 0xd0, 0xb2, 0x67, 0x4e, 0xe4,
	0xfd, 0x5d, 0x83, 0x66, 0x79, 0xc9, 0x8f, 0x6e, 0x94, 0x75, 0x3d, 0xa3, 0xea, 0xff, 0xc3, 0xa8,
	0xc6, 0x07, 0x18, 0xf5, 0x39, 0xd8, 0x25, 0x26, 0xdd, 0xbf, 0x0c, 0xbd, 0xd9, 0x12, 0xb8, 0xb6,
	0x8b, 0xdf, 0x41, 0x33, 0x62, 0x8a, 0xc5, 0x54, 0x96, 0x1e, 0xde, 0xb9, 0x2c, 0x19, 0x16, 0x04,
	0xad, 0xaa, 0xd8, 0xde, 0x11, 0xd8, 0xd5, 0x52, 0xf9, 0xed, 0x65, 0x4c, 0x69, 0xea, 0x2f, 0x8a,
	0x46, 0x63, 0xe2, 0xa6, 0x8e, 0x9f, 0x48, 0xf4, 0x15, 0x6c, 0x54, 0x67, 0xf3, 0x75, 0x9b, 0x29,
	0xab, 0x7e, 0xbd, 0x42, 0x7b, 0x39, 0xe8, 0xfd, 0x66, 0x40, 0x7b, 0x65, 0x9b, 0xbc, 0x47, 0x0a,
	0x9a, 0xf2, 0xaa, 0x47, 0xe6, 0xe3, 0x02, 0x9b, 0x15, 0x3d, 0x52, 0x63, 0x33, 0x89, 0xee, 0xc3,
	0x5a, 0x1a, 0xa8, 0xb9, 0x2f, 0x68, 0x44, 0xcf, 0xd2, 0xe2, 0x1f, 0xa6, 0x85, 0xdb, 0x39, 0x86,
	0x0b, 0x08, 0x7d, 0x0b, 0x37, 0x57, 0x29, 0x3e, 0x3d, 0x23, 0x71, 0x16, 0x52, 0xed, 0x6a, 0x0b,
	0xa3, 0x15, 0xea, 0xa0, 0x98, 0xf1, 0x5e, 0xc0, 0xda, 0x6a, 0xda, 0xa2, 0xcf, 0xa0, 0xb1, 0xa0,
	0x6a, 0xce, 0xab, 0x9c, 0x2a, 0x23, 0xe4, 0x80, 0x99, 0x89, 0xb8, 0x4c, 0xa9, 0x7c, 0x88, 0xee,
	0x41, 0x5b, 0xb1, 0x05, 0xe5, 0x99, 0xf2, 0x25, 0x25, 0x3a, 0xa1, 0xea, 0x18, 0x4a, 0x68, 0x4c,
	0x89, 0xf7, 0xbb, 0x01, 0x9b, 0x17, 0x72, 0x3a, 0x5f, 0x3e, 0x6f, 0xd7, 0x54, 0x54, 0xcb, 0x17,
	0x51, 0x8e, 0x97, 0xe5, 0x51, 0xec, 0x50, 0x46, 0xc8, 0x85, 0xa6, 0xae, 0x02, 0x2a, 0xf4, 0x06,
	0x2d, 0x5c, 0x85, 0xe8, 0x2e, 0x40, 0x2a, 0x78, 0x4a, 0x85, 0x62, 0x54, 0x96, 0x17, 0x5c, 0x41,
	0xf2, 0x17, 0x54, 0x41, 0x54, 0x65, 0xa8, 0x1e, 0x7b, 0xbf, 0xd4, 0x60, 0x23, 0x3f, 0x46, 0x9f,
	0xce, 0x9e, 0x8b, 0xfc, 0x73, 0x42, 0x2c, 0x73, 0xc8, 0x78, 0x9f, 0x4e, 0x50, 0xfb, 0xb0, 0x4e,
	0x60, 0xbd, 0x4f, 0x27, 0x58, 0xcd, 0xe2, 0xfa, 0x75, 0xb2, 0xf8, 0xd0, 0xb2, 0x4d, 0xc7, 0x3a,
	0x80, 0x9f, 0xed, 0xea, 0xf3, 0x69, 0xda, 0xd0, 0x1f, 0x4e, 0xfb, 0xff, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x9f, 0x51, 0x9b, 0x94, 0x7a, 0x09, 0x00, 0x00,
}
