// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: go.chromium.org/luci/analysis/internal/changepoints/proto/spanner.proto

package changepointspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SegmentState int32

const (
	SegmentState_SEGMENT_STATE_UNSPECIFIED SegmentState = 0
	// Both the start and end commit positions of the segment are the result
	// of analysis on the current input buffer.
	SegmentState_ACTIVE SegmentState = 1
	// The end commit position of the segment is the result of analysis on the
	// current input buffer, but the start commit position is the result of
	// past analysis.
	SegmentState_FINALIZING SegmentState = 2
	// Both the start and end commit positions of the segment are the result
	// of past analysis.
	SegmentState_FINALIZED SegmentState = 3
)

// Enum value maps for SegmentState.
var (
	SegmentState_name = map[int32]string{
		0: "SEGMENT_STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "FINALIZING",
		3: "FINALIZED",
	}
	SegmentState_value = map[string]int32{
		"SEGMENT_STATE_UNSPECIFIED": 0,
		"ACTIVE":                    1,
		"FINALIZING":                2,
		"FINALIZED":                 3,
	}
)

func (x SegmentState) Enum() *SegmentState {
	p := new(SegmentState)
	*p = x
	return p
}

func (x SegmentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentState) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_enumTypes[0].Descriptor()
}

func (SegmentState) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_enumTypes[0]
}

func (x SegmentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentState.Descriptor instead.
func (SegmentState) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP(), []int{0}
}

// Segments is used to store the finalized segments in Spanner.
type Segments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Segments, in ascending commit position order (oldest segment first).
	Segments []*Segment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *Segments) Reset() {
	*x = Segments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segments) ProtoMessage() {}

func (x *Segments) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segments.ProtoReflect.Descriptor instead.
func (*Segments) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP(), []int{0}
}

func (x *Segments) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// Segment stores the finalized parts of finalizing and finalized segments
// in Spanner.
// Finalized segments will be stored in full.
// Only the finalized part of a finalizing segment will be stored.
// The unfinalized parts of segments can be computed from the input buffer.
type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state of the segment.
	// Only finalizing or finalized segments will be stored in spanner.
	State SegmentState `protobuf:"varint,1,opt,name=state,proto3,enum=luci.analysis.internal.changepoints.SegmentState" json:"state,omitempty"`
	// If set, means the start of the segment is as a result of a change point
	// being identified.
	// If unset, means the segment started because this was the first result in
	// the known history of the test.
	HasStartChangepoint bool `protobuf:"varint,2,opt,name=has_start_changepoint,json=hasStartChangepoint,proto3" json:"has_start_changepoint,omitempty"`
	// The earliest commit position included in the segment.
	StartPosition int64 `protobuf:"varint,3,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	// The earliest hour a verdict with the given start_position was recorded.
	StartHour *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	// The end commit position of the segment.
	// If set, the invariant end_position >= start_position holds.
	EndPosition int64 `protobuf:"varint,5,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	// The latest hour a verdict with the last commit position in the segment
	// was recorded.
	EndHour *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_hour,json=endHour,proto3" json:"end_hour,omitempty"`
	// The lower bound of the change point position at the start of the segment
	// in a 99% two-tailed confidence interval. Inclusive.
	// Only set if has_start_changepoint is set. If set, the invariant
	// previous_segment.start_position <= start_position_lower_bound_99th <= start_position.
	StartPositionLowerBound_99Th int64 `protobuf:"varint,7,opt,name=start_position_lower_bound_99th,json=startPositionLowerBound99th,proto3" json:"start_position_lower_bound_99th,omitempty"`
	// The upper bound of the change point position at the start of the segment
	// in a 99% two-tailed confidence interval. Inclusive.
	// Only set if has_start_changepoint is set. If set, the invariant
	// start_position <= start_position_upper_bound_99th <= end_position
	// holds.
	StartPositionUpperBound_99Th int64 `protobuf:"varint,8,opt,name=start_position_upper_bound_99th,json=startPositionUpperBound99th,proto3" json:"start_position_upper_bound_99th,omitempty"`
	// The hour the most recent verdict with an unexpected test result
	// was produced. *Only* captures the most recent hour for verdicts
	// that are no longer in the input buffer. Used to set
	// has_recent_unexpected_results on the output.
	MostRecentUnexpectedResultHour *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=most_recent_unexpected_result_hour,json=mostRecentUnexpectedResultHour,proto3" json:"most_recent_unexpected_result_hour,omitempty"`
	// Finalized counts for the segment. Note that this should
	// *only* capture counts for verdicts that are no longer in
	// the input buffer.
	// Counts for verdicts in the input buffer can be obtained from the input
	// buffer.
	FinalizedCounts *Counts `protobuf:"bytes,10,opt,name=finalized_counts,json=finalizedCounts,proto3" json:"finalized_counts,omitempty"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP(), []int{1}
}

func (x *Segment) GetState() SegmentState {
	if x != nil {
		return x.State
	}
	return SegmentState_SEGMENT_STATE_UNSPECIFIED
}

func (x *Segment) GetHasStartChangepoint() bool {
	if x != nil {
		return x.HasStartChangepoint
	}
	return false
}

func (x *Segment) GetStartPosition() int64 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *Segment) GetStartHour() *timestamppb.Timestamp {
	if x != nil {
		return x.StartHour
	}
	return nil
}

func (x *Segment) GetEndPosition() int64 {
	if x != nil {
		return x.EndPosition
	}
	return 0
}

func (x *Segment) GetEndHour() *timestamppb.Timestamp {
	if x != nil {
		return x.EndHour
	}
	return nil
}

func (x *Segment) GetStartPositionLowerBound_99Th() int64 {
	if x != nil {
		return x.StartPositionLowerBound_99Th
	}
	return 0
}

func (x *Segment) GetStartPositionUpperBound_99Th() int64 {
	if x != nil {
		return x.StartPositionUpperBound_99Th
	}
	return 0
}

func (x *Segment) GetMostRecentUnexpectedResultHour() *timestamppb.Timestamp {
	if x != nil {
		return x.MostRecentUnexpectedResultHour
	}
	return nil
}

func (x *Segment) GetFinalizedCounts() *Counts {
	if x != nil {
		return x.FinalizedCounts
	}
	return nil
}

// All exclude the effect of skipped test results.
type Counts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of unexpected non-skipped test results.
	UnexpectedResults int64 `protobuf:"varint,1,opt,name=unexpected_results,json=unexpectedResults,proto3" json:"unexpected_results,omitempty"`
	// The total number of non-skipped test results.
	TotalResults int64 `protobuf:"varint,2,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
	// The number of test runs which had an unexpected test result but were
	// not retried.
	UnexpectedUnretriedRuns int64 `protobuf:"varint,3,opt,name=unexpected_unretried_runs,json=unexpectedUnretriedRuns,proto3" json:"unexpected_unretried_runs,omitempty"`
	// The number of test run which had an unexpected test result, were
	// retried, and still contained only unexpected test results.
	UnexpectedAfterRetryRuns int64 `protobuf:"varint,4,opt,name=unexpected_after_retry_runs,json=unexpectedAfterRetryRuns,proto3" json:"unexpected_after_retry_runs,omitempty"`
	// The number of test runs which had an unexpected test result, were
	// retried, and eventually recorded an expected test result.
	FlakyRuns int64 `protobuf:"varint,5,opt,name=flaky_runs,json=flakyRuns,proto3" json:"flaky_runs,omitempty"`
	// The total number of test runs.
	TotalRuns int64 `protobuf:"varint,6,opt,name=total_runs,json=totalRuns,proto3" json:"total_runs,omitempty"`
	// The following verdict statistics exclude the effect of exonerations,
	// and skipped test results. Verdicts with only skipped results are not counted
	// at all.
	// The number of verdicts with only unexpected test results.
	UnexpectedVerdicts int64 `protobuf:"varint,7,opt,name=unexpected_verdicts,json=unexpectedVerdicts,proto3" json:"unexpected_verdicts,omitempty"`
	// The number of verdicts with a mix of expected and unexpected test results.
	FlakyVerdicts int64 `protobuf:"varint,8,opt,name=flaky_verdicts,json=flakyVerdicts,proto3" json:"flaky_verdicts,omitempty"`
	// The total number of verdicts.
	TotalVerdicts int64 `protobuf:"varint,9,opt,name=total_verdicts,json=totalVerdicts,proto3" json:"total_verdicts,omitempty"`
}

func (x *Counts) Reset() {
	*x = Counts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Counts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Counts) ProtoMessage() {}

func (x *Counts) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Counts.ProtoReflect.Descriptor instead.
func (*Counts) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP(), []int{2}
}

func (x *Counts) GetUnexpectedResults() int64 {
	if x != nil {
		return x.UnexpectedResults
	}
	return 0
}

func (x *Counts) GetTotalResults() int64 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

func (x *Counts) GetUnexpectedUnretriedRuns() int64 {
	if x != nil {
		return x.UnexpectedUnretriedRuns
	}
	return 0
}

func (x *Counts) GetUnexpectedAfterRetryRuns() int64 {
	if x != nil {
		return x.UnexpectedAfterRetryRuns
	}
	return 0
}

func (x *Counts) GetFlakyRuns() int64 {
	if x != nil {
		return x.FlakyRuns
	}
	return 0
}

func (x *Counts) GetTotalRuns() int64 {
	if x != nil {
		return x.TotalRuns
	}
	return 0
}

func (x *Counts) GetUnexpectedVerdicts() int64 {
	if x != nil {
		return x.UnexpectedVerdicts
	}
	return 0
}

func (x *Counts) GetFlakyVerdicts() int64 {
	if x != nil {
		return x.FlakyVerdicts
	}
	return 0
}

func (x *Counts) GetTotalVerdicts() int64 {
	if x != nil {
		return x.TotalVerdicts
	}
	return 0
}

var File_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDesc = []byte{
	0x0a, 0x47, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x54, 0x0a, 0x08, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8e, 0x05, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x61,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x6f, 0x75, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x39, 0x39, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x39, 0x39, 0x74, 0x68,
	0x12, 0x44, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x39,
	0x39, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x39, 0x39, 0x74, 0x68, 0x12, 0x66, 0x0a, 0x22, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e,
	0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x56,
	0x0a, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75,
	0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x75,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x52, 0x75, 0x6e,
	0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x52, 0x75, 0x6e, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72,
	0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x6e, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x56, 0x65,
	0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x2a, 0x58, 0x0a,
	0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x03, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescData = file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDesc
)

func file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescData)
	})
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_goTypes = []interface{}{
	(SegmentState)(0),             // 0: luci.analysis.internal.changepoints.SegmentState
	(*Segments)(nil),              // 1: luci.analysis.internal.changepoints.Segments
	(*Segment)(nil),               // 2: luci.analysis.internal.changepoints.Segment
	(*Counts)(nil),                // 3: luci.analysis.internal.changepoints.Counts
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_depIdxs = []int32{
	2, // 0: luci.analysis.internal.changepoints.Segments.segments:type_name -> luci.analysis.internal.changepoints.Segment
	0, // 1: luci.analysis.internal.changepoints.Segment.state:type_name -> luci.analysis.internal.changepoints.SegmentState
	4, // 2: luci.analysis.internal.changepoints.Segment.start_hour:type_name -> google.protobuf.Timestamp
	4, // 3: luci.analysis.internal.changepoints.Segment.end_hour:type_name -> google.protobuf.Timestamp
	4, // 4: luci.analysis.internal.changepoints.Segment.most_recent_unexpected_result_hour:type_name -> google.protobuf.Timestamp
	3, // 5: luci.analysis.internal.changepoints.Segment.finalized_counts:type_name -> luci.analysis.internal.changepoints.Counts
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_init() }
func file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_init() {
	if File_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Counts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto = out.File
	file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDesc = nil
	file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_depIdxs = nil
}
