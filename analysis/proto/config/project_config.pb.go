// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: go.chromium.org/luci/analysis/proto/config/project_config.proto

package configpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This enum represents the Buganizer priorities.
// It is equivalent to the one in Buganizer API.
type BuganizerPriority int32

const (
	// Priority unspecified, Do not use this value.
	BuganizerPriority_BUGANIZER_PRIORITY_UNSPECIFIED BuganizerPriority = 0
	// P0, Highest priority.
	BuganizerPriority_P0 BuganizerPriority = 1
	BuganizerPriority_P1 BuganizerPriority = 2
	BuganizerPriority_P2 BuganizerPriority = 3
	BuganizerPriority_P3 BuganizerPriority = 4
	BuganizerPriority_P4 BuganizerPriority = 5
)

// Enum value maps for BuganizerPriority.
var (
	BuganizerPriority_name = map[int32]string{
		0: "BUGANIZER_PRIORITY_UNSPECIFIED",
		1: "P0",
		2: "P1",
		3: "P2",
		4: "P3",
		5: "P4",
	}
	BuganizerPriority_value = map[string]int32{
		"BUGANIZER_PRIORITY_UNSPECIFIED": 0,
		"P0":                             1,
		"P1":                             2,
		"P2":                             3,
		"P3":                             4,
		"P4":                             5,
	}
)

func (x BuganizerPriority) Enum() *BuganizerPriority {
	p := new(BuganizerPriority)
	*p = x
	return p
}

func (x BuganizerPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuganizerPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_enumTypes[0].Descriptor()
}

func (BuganizerPriority) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_enumTypes[0]
}

func (x BuganizerPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuganizerPriority.Descriptor instead.
func (BuganizerPriority) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{0}
}

// An enum that represents the bug filing system that the project uses.
type ProjectConfig_BugSystem int32

const (
	// An unspecified bug system, Do not use, this will
	// break LUCI Analysis bug filing functionality.
	ProjectConfig_BUG_SYSTEM_UNSPECIFIED ProjectConfig_BugSystem = 0
	// Use Monorail to file bugs.
	ProjectConfig_MONORAIL ProjectConfig_BugSystem = 1
	// Use Buganizer to file bugs.
	ProjectConfig_BUGANIZER ProjectConfig_BugSystem = 2
)

// Enum value maps for ProjectConfig_BugSystem.
var (
	ProjectConfig_BugSystem_name = map[int32]string{
		0: "BUG_SYSTEM_UNSPECIFIED",
		1: "MONORAIL",
		2: "BUGANIZER",
	}
	ProjectConfig_BugSystem_value = map[string]int32{
		"BUG_SYSTEM_UNSPECIFIED": 0,
		"MONORAIL":               1,
		"BUGANIZER":              2,
	}
)

func (x ProjectConfig_BugSystem) Enum() *ProjectConfig_BugSystem {
	p := new(ProjectConfig_BugSystem)
	*p = x
	return p
}

func (x ProjectConfig_BugSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectConfig_BugSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_enumTypes[1].Descriptor()
}

func (ProjectConfig_BugSystem) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_enumTypes[1]
}

func (x ProjectConfig_BugSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectConfig_BugSystem.Descriptor instead.
func (ProjectConfig_BugSystem) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{0, 0}
}

// ProjectConfig is the project-specific configuration data for LUCI Analysis.
type ProjectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The project metadata (eg. display name).
	ProjectMetadata *ProjectMetadata `protobuf:"bytes,6,opt,name=project_metadata,json=projectMetadata,proto3" json:"project_metadata,omitempty"`
	// The bug system to use for filing bugs.
	BugSystem ProjectConfig_BugSystem `protobuf:"varint,7,opt,name=bug_system,json=bugSystem,proto3,enum=luci.analysis.config.ProjectConfig_BugSystem" json:"bug_system,omitempty"`
	// The monorail configuration to use when filing bugs.
	Monorail *MonorailProject `protobuf:"bytes,1,opt,name=monorail,proto3" json:"monorail,omitempty"`
	// The Buganzier configuration to use when filing bugs.
	Buganizer *BuganizerProject `protobuf:"bytes,8,opt,name=buganizer,proto3" json:"buganizer,omitempty"`
	// Deprecated. No longer has any effect. Retained for textproto
	// compatibility only. Use bug_filing_thresholds instead.
	BugFilingThreshold *ImpactThreshold `protobuf:"bytes,2,opt,name=bug_filing_threshold,json=bugFilingThreshold,proto3" json:"bug_filing_threshold,omitempty"`
	// Per realm configurations.
	Realms []*RealmConfig `protobuf:"bytes,3,rep,name=realms,proto3" json:"realms,omitempty"`
	// The last time this project configuration was updated.
	// LUCI Analysis sets and stores this value internally. Do not set
	// in your project's configuration file, it will be ignored.
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Configuration for how to cluster test results.
	Clustering *Clustering `protobuf:"bytes,5,opt,name=clustering,proto3" json:"clustering,omitempty"`
	// Configuration for automatic bug management.
	BugManagement *BugManagement `protobuf:"bytes,9,opt,name=bug_management,json=bugManagement,proto3" json:"bug_management,omitempty"`
	// The threshold at which to file bugs.
	// If a reason cluster's impact exceeds the given threshold,
	// a bug will be filed for it.
	// Alternatively, if a test name cluster's impact exceeds 134% of the given
	// threshold, a bug will also be filed for it.
	//
	// LUCI Analysis's bias towards reason clusters reflects the fact that bugs
	// filed for reasons should be better scoped and more actionable
	// (focus on one problem).
	//
	// The thresholds are considered satisfied if any of the individual impact metric
	// thresholds is met or exceeded (i.e. if multiple thresholds are set, they
	// are combined using an OR-semantic). If no threshold is set on any individual
	// metric, the threshold as a whole is unsatisfiable.
	BugFilingThresholds []*ImpactMetricThreshold `protobuf:"bytes,10,rep,name=bug_filing_thresholds,json=bugFilingThresholds,proto3" json:"bug_filing_thresholds,omitempty"`
	// Configuration related to metrics in LUCI Analysis.
	Metrics *Metrics `protobuf:"bytes,11,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *ProjectConfig) Reset() {
	*x = ProjectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectConfig) ProtoMessage() {}

func (x *ProjectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectConfig.ProtoReflect.Descriptor instead.
func (*ProjectConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{0}
}

func (x *ProjectConfig) GetProjectMetadata() *ProjectMetadata {
	if x != nil {
		return x.ProjectMetadata
	}
	return nil
}

func (x *ProjectConfig) GetBugSystem() ProjectConfig_BugSystem {
	if x != nil {
		return x.BugSystem
	}
	return ProjectConfig_BUG_SYSTEM_UNSPECIFIED
}

func (x *ProjectConfig) GetMonorail() *MonorailProject {
	if x != nil {
		return x.Monorail
	}
	return nil
}

func (x *ProjectConfig) GetBuganizer() *BuganizerProject {
	if x != nil {
		return x.Buganizer
	}
	return nil
}

func (x *ProjectConfig) GetBugFilingThreshold() *ImpactThreshold {
	if x != nil {
		return x.BugFilingThreshold
	}
	return nil
}

func (x *ProjectConfig) GetRealms() []*RealmConfig {
	if x != nil {
		return x.Realms
	}
	return nil
}

func (x *ProjectConfig) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ProjectConfig) GetClustering() *Clustering {
	if x != nil {
		return x.Clustering
	}
	return nil
}

func (x *ProjectConfig) GetBugManagement() *BugManagement {
	if x != nil {
		return x.BugManagement
	}
	return nil
}

func (x *ProjectConfig) GetBugFilingThresholds() []*ImpactMetricThreshold {
	if x != nil {
		return x.BugFilingThresholds
	}
	return nil
}

func (x *ProjectConfig) GetMetrics() *Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// ProjectMetadata provides data about the project that are mostly used in ui.
type ProjectMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the preferred display name for the project in the UI.
	// Deprecated: not used anymore.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *ProjectMetadata) Reset() {
	*x = ProjectMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectMetadata) ProtoMessage() {}

func (x *ProjectMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectMetadata.ProtoReflect.Descriptor instead.
func (*ProjectMetadata) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{1}
}

func (x *ProjectMetadata) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// Settings related to metrics used to measure cluster impact.
type Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Overrides to the default metrics configuration for a project.
	Overrides []*Metrics_MetricOverride `protobuf:"bytes,1,rep,name=overrides,proto3" json:"overrides,omitempty"`
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{2}
}

func (x *Metrics) GetOverrides() []*Metrics_MetricOverride {
	if x != nil {
		return x.Overrides
	}
	return nil
}

// Settings related to bug management.
type BugManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disables creation of comments on bugs when LUCI Analysis successfully
	// handles duplicate bugs by merging/updating failure association rules.
	//
	// This setting does not prevent the creation of comments in response
	// to errors handling duplicate bugs.
	DisableDuplicateBugComments bool `protobuf:"varint,1,opt,name=disable_duplicate_bug_comments,json=disableDuplicateBugComments,proto3" json:"disable_duplicate_bug_comments,omitempty"`
}

func (x *BugManagement) Reset() {
	*x = BugManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BugManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugManagement) ProtoMessage() {}

func (x *BugManagement) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugManagement.ProtoReflect.Descriptor instead.
func (*BugManagement) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{3}
}

func (x *BugManagement) GetDisableDuplicateBugComments() bool {
	if x != nil {
		return x.DisableDuplicateBugComments
	}
	return false
}

// ImpactThreshold specifies a condition on a cluster's impact metrics.
// The threshold is considered satisfied if any of the individual metric
// thresholds is met or exceeded (i.e. if multiple thresholds are set, they
// are combined using an OR-semantic). If no threshold is set on any individual
// metric, the threshold as a whole is unsatisfiable.
type ImpactThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of test results that were unexpected failures.
	TestResultsFailed *MetricThreshold `protobuf:"bytes,4,opt,name=test_results_failed,json=testResultsFailed,proto3" json:"test_results_failed,omitempty"`
	// The number of test runs that failed.
	// A test run (also known as a 'shard' (chromium) or 'task' (Chrome OS))
	// is considered failed if all tries of test(s) in it unexpectedly failed.
	// The failed test run is attributed to the last failure of each of the
	// test(s) that failed on all tries.
	TestRunsFailed *MetricThreshold `protobuf:"bytes,5,opt,name=test_runs_failed,json=testRunsFailed,proto3" json:"test_runs_failed,omitempty"`
	// The number of presubmit runs that failed.
	PresubmitRunsFailed *MetricThreshold `protobuf:"bytes,6,opt,name=presubmit_runs_failed,json=presubmitRunsFailed,proto3" json:"presubmit_runs_failed,omitempty"`
	// The number of test failures on critical builders that were exonerated,
	// with an exoneration reason other than NOT_CRITICAL.
	CriticalFailuresExonerated *MetricThreshold `protobuf:"bytes,7,opt,name=critical_failures_exonerated,json=criticalFailuresExonerated,proto3" json:"critical_failures_exonerated,omitempty"`
	// Deprecated. No longer has any effect. Retained for textproto
	// compatibility only.
	UnexpectedFailures_1D *int64 `protobuf:"varint,1,opt,name=unexpected_failures_1d,json=unexpectedFailures1d,proto3,oneof" json:"unexpected_failures_1d,omitempty"`
	// Deprecated. No longer has any effect. Retained for textproto
	// compatibility only.
	UnexpectedFailures_3D *int64 `protobuf:"varint,2,opt,name=unexpected_failures_3d,json=unexpectedFailures3d,proto3,oneof" json:"unexpected_failures_3d,omitempty"`
	// Deprecated. No longer has any effect. Retained for textproto
	// compatibility only.
	UnexpectedFailures_7D *int64 `protobuf:"varint,3,opt,name=unexpected_failures_7d,json=unexpectedFailures7d,proto3,oneof" json:"unexpected_failures_7d,omitempty"`
}

func (x *ImpactThreshold) Reset() {
	*x = ImpactThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpactThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpactThreshold) ProtoMessage() {}

func (x *ImpactThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpactThreshold.ProtoReflect.Descriptor instead.
func (*ImpactThreshold) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{4}
}

func (x *ImpactThreshold) GetTestResultsFailed() *MetricThreshold {
	if x != nil {
		return x.TestResultsFailed
	}
	return nil
}

func (x *ImpactThreshold) GetTestRunsFailed() *MetricThreshold {
	if x != nil {
		return x.TestRunsFailed
	}
	return nil
}

func (x *ImpactThreshold) GetPresubmitRunsFailed() *MetricThreshold {
	if x != nil {
		return x.PresubmitRunsFailed
	}
	return nil
}

func (x *ImpactThreshold) GetCriticalFailuresExonerated() *MetricThreshold {
	if x != nil {
		return x.CriticalFailuresExonerated
	}
	return nil
}

func (x *ImpactThreshold) GetUnexpectedFailures_1D() int64 {
	if x != nil && x.UnexpectedFailures_1D != nil {
		return *x.UnexpectedFailures_1D
	}
	return 0
}

func (x *ImpactThreshold) GetUnexpectedFailures_3D() int64 {
	if x != nil && x.UnexpectedFailures_3D != nil {
		return *x.UnexpectedFailures_3D
	}
	return 0
}

func (x *ImpactThreshold) GetUnexpectedFailures_7D() int64 {
	if x != nil && x.UnexpectedFailures_7D != nil {
		return *x.UnexpectedFailures_7D
	}
	return 0
}

// ImpactMetricThreshold specifies a condition on a cluster's impact metric.
type ImpactMetricThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the impact metric.
	// eg.
	// human-cls-failed-presubmit: The number of presubmit runs that failed.
	// critical-failures-exonerated: The number of test failures on critical builders that were exonerated
	//
	//	with an exoneration reason other than NOT_CRITICAL.
	//
	// test-runs-failed: The number of test runs that failed.
	//
	//	A test run (also known as a 'shard' (chromium) or 'task' (Chrome OS))
	//	is considered failed if all tries of test(s) in it unexpectedly failed.
	//	The failed test run is attributed to the last failure of each of the
	//	test(s) that failed on all tries.
	//
	// failures: The number of test results that were unexpected failures.
	//
	// Full list of available metrics here:
	// https://source.chromium.org/chromium/infra/infra/+/main:go/src/go.chromium.org/luci/analysis/internal/analysis/metrics/metrics.go
	MetricId string `protobuf:"bytes,1,opt,name=metric_id,json=metricId,proto3" json:"metric_id,omitempty"`
	// The thresholds against a metric.
	Threshold *MetricThreshold `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *ImpactMetricThreshold) Reset() {
	*x = ImpactMetricThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpactMetricThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpactMetricThreshold) ProtoMessage() {}

func (x *ImpactMetricThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpactMetricThreshold.ProtoReflect.Descriptor instead.
func (*ImpactMetricThreshold) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{5}
}

func (x *ImpactMetricThreshold) GetMetricId() string {
	if x != nil {
		return x.MetricId
	}
	return ""
}

func (x *ImpactMetricThreshold) GetThreshold() *MetricThreshold {
	if x != nil {
		return x.Threshold
	}
	return nil
}

// MetricThreshold specifies thresholds for a particular metric.
// The threshold is considered satisfied if any of the individual metric
// thresholds is met or exceeded (i.e. if multiple thresholds are set, they
// are combined using an OR-semantic). If no threshold is set, the threshold
// as a whole is unsatisfiable.
type MetricThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The threshold for one day.
	OneDay *int64 `protobuf:"varint,1,opt,name=one_day,json=oneDay,proto3,oneof" json:"one_day,omitempty"`
	// The threshold for three day.
	ThreeDay *int64 `protobuf:"varint,2,opt,name=three_day,json=threeDay,proto3,oneof" json:"three_day,omitempty"`
	// The threshold for seven days.
	SevenDay *int64 `protobuf:"varint,3,opt,name=seven_day,json=sevenDay,proto3,oneof" json:"seven_day,omitempty"`
}

func (x *MetricThreshold) Reset() {
	*x = MetricThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricThreshold) ProtoMessage() {}

func (x *MetricThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricThreshold.ProtoReflect.Descriptor instead.
func (*MetricThreshold) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{6}
}

func (x *MetricThreshold) GetOneDay() int64 {
	if x != nil && x.OneDay != nil {
		return *x.OneDay
	}
	return 0
}

func (x *MetricThreshold) GetThreeDay() int64 {
	if x != nil && x.ThreeDay != nil {
		return *x.ThreeDay
	}
	return 0
}

func (x *MetricThreshold) GetSevenDay() int64 {
	if x != nil && x.SevenDay != nil {
		return *x.SevenDay
	}
	return 0
}

// MonorailProject describes the configuration to use when filing bugs
// into a given monorail project.
type MonorailProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The monorail project being described.
	// E.g. "chromium".
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The field values to use when creating new bugs.
	// For example, on chromium issue tracker, there is a manadatory
	// issue type field (field 10), which must be set to "Bug".
	DefaultFieldValues []*MonorailFieldValue `protobuf:"bytes,2,rep,name=default_field_values,json=defaultFieldValues,proto3" json:"default_field_values,omitempty"`
	// The ID of the issue's priority field. You can find this by visiting
	// https://monorail-prod.appspot.com/p/<project>/adminLabels, scrolling
	// down to Custom fields and finding the ID of the field you wish to set.
	PriorityFieldId int64 `protobuf:"varint,3,opt,name=priority_field_id,json=priorityFieldId,proto3" json:"priority_field_id,omitempty"`
	// The possible bug priorities and their associated impact thresholds.
	// Priorities must be listed from highest (i.e. P0) to lowest (i.e. P3).
	// Higher priorities can only be reached if the thresholds for all lower
	// priorities are also met.
	// The impact thresholds for setting the lowest priority implicitly
	// identifies the bug closure threshold -- if no priority can be
	// matched, the bug is closed. Satisfying the threshold for filing bugs MUST
	// at least imply the threshold for the lowest priority, and MAY imply
	// the thresholds of higher priorities.
	Priorities []*MonorailPriority `protobuf:"bytes,4,rep,name=priorities,proto3" json:"priorities,omitempty"`
	// Controls the amount of hysteresis used in setting bug priorities.
	// Once a bug is assigned a given priority, its priority will only be
	// increased if it exceeds the next priority's thresholds by the
	// specified percentage margin, and decreased if the current priority's
	// thresholds exceed the bug's impact by the given percentage margin.
	//
	// A value of 100 indicates impact may be double the threshold for
	// the next highest priority value, (or half the threshold of the
	// current priority value,) before a bug's priority is increased
	// (or decreased).
	//
	// Valid values are from 0 (no hystersis) to 1,000 (10x hysteresis).
	PriorityHysteresisPercent int64 `protobuf:"varint,5,opt,name=priority_hysteresis_percent,json=priorityHysteresisPercent,proto3" json:"priority_hysteresis_percent,omitempty"`
	// The prefix that should appear when displaying bugs from the
	// given bug tracking system. E.g. "crbug.com" or "fxbug.dev".
	// If no prefix is specified, only the bug number will appear.
	// Otherwise, the supplifed prefix will appear, followed by a
	// forward slash ("/"), followed by the bug number.
	// Valid prefixes match `^[a-z0-9\-.]{0,64}$`.
	DisplayPrefix string `protobuf:"bytes,6,opt,name=display_prefix,json=displayPrefix,proto3" json:"display_prefix,omitempty"`
	// The preferred hostname to use in links to monorail. For example,
	// "bugs.chromium.org" or "bugs.fuchsia.dev".
	MonorailHostname string `protobuf:"bytes,7,opt,name=monorail_hostname,json=monorailHostname,proto3" json:"monorail_hostname,omitempty"`
	// Whether the Restrict-View-Google tag should be omitted on new
	// auto-filed bugs. This makes those bugs publically visible.
	// If unset, defaults to filing with Restrict-View-Google.
	FileWithoutRestrictViewGoogle bool `protobuf:"varint,8,opt,name=file_without_restrict_view_google,json=fileWithoutRestrictViewGoogle,proto3" json:"file_without_restrict_view_google,omitempty"`
}

func (x *MonorailProject) Reset() {
	*x = MonorailProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonorailProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonorailProject) ProtoMessage() {}

func (x *MonorailProject) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonorailProject.ProtoReflect.Descriptor instead.
func (*MonorailProject) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{7}
}

func (x *MonorailProject) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *MonorailProject) GetDefaultFieldValues() []*MonorailFieldValue {
	if x != nil {
		return x.DefaultFieldValues
	}
	return nil
}

func (x *MonorailProject) GetPriorityFieldId() int64 {
	if x != nil {
		return x.PriorityFieldId
	}
	return 0
}

func (x *MonorailProject) GetPriorities() []*MonorailPriority {
	if x != nil {
		return x.Priorities
	}
	return nil
}

func (x *MonorailProject) GetPriorityHysteresisPercent() int64 {
	if x != nil {
		return x.PriorityHysteresisPercent
	}
	return 0
}

func (x *MonorailProject) GetDisplayPrefix() string {
	if x != nil {
		return x.DisplayPrefix
	}
	return ""
}

func (x *MonorailProject) GetMonorailHostname() string {
	if x != nil {
		return x.MonorailHostname
	}
	return ""
}

func (x *MonorailProject) GetFileWithoutRestrictViewGoogle() bool {
	if x != nil {
		return x.FileWithoutRestrictViewGoogle
	}
	return false
}

// MonorailFieldValue describes a monorail field/value pair.
type MonorailFieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the field to set. You can find this by visiting
	// https://monorail-prod.appspot.com/p/<project>/adminLabels, scrolling
	// down to Custom fields and finding the ID of the field you wish to set.
	FieldId int64 `protobuf:"varint,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	// The field value. Values are encoded according to the field type:
	//   - Enumeration types: the string enumeration value (e.g. "Bug").
	//   - Integer types: the integer, converted to a string (e.g. "1052").
	//   - String types: the value, included verbatim.
	//   - User types: the user's resource name (e.g. "users/2627516260").
	//     User IDs can be identified by looking at the people listing for a
	//     project:  https://monorail-prod.appspot.com/p/<project>/people/list.
	//     The User ID is included in the URL as u=<number> when clicking into
	//     the page for a particular user. For example, "user/3816576959" is
	//     https://monorail-prod.appspot.com/p/chromium/people/detail?u=3816576959.
	//   - Date types: the number of seconds since epoch, as a string
	//     (e.g. "1609459200" for 1 January 2021).
	//   - URL type: the URL value, as a string (e.g. "https://www.google.com/").
	//
	// The source of truth for mapping of field types to values is as
	// defined in the Monorail v3 API, found here:
	// https://source.chromium.org/chromium/infra/infra/+/main:appengine/monorail/api/v3/api_proto/issue_objects.proto?q=%22message%20FieldValue%22
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MonorailFieldValue) Reset() {
	*x = MonorailFieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonorailFieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonorailFieldValue) ProtoMessage() {}

func (x *MonorailFieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonorailFieldValue.ProtoReflect.Descriptor instead.
func (*MonorailFieldValue) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{8}
}

func (x *MonorailFieldValue) GetFieldId() int64 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *MonorailFieldValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// MonorailPriority represents configuration for when to use a given
// priority value in a bug.
type MonorailPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The monorail priority value. For example, "0". This depends on the
	// valid priority field values you have defined in your monorail project.
	Priority string `protobuf:"bytes,1,opt,name=priority,proto3" json:"priority,omitempty"`
	// Deprecated. No longer has any effect. Retained for textproto
	// compatibility only. Use thresholds instead.
	Threshold *ImpactThreshold `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// The threshold at which to apply the priority.
	// The thresholds are considered satisfied if any of the individual impact metric
	// thresholds is met or exceeded (i.e. if multiple thresholds are set, they
	// are combined using an OR-semantic).
	Thresholds []*ImpactMetricThreshold `protobuf:"bytes,3,rep,name=thresholds,proto3" json:"thresholds,omitempty"`
}

func (x *MonorailPriority) Reset() {
	*x = MonorailPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonorailPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonorailPriority) ProtoMessage() {}

func (x *MonorailPriority) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonorailPriority.ProtoReflect.Descriptor instead.
func (*MonorailPriority) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{9}
}

func (x *MonorailPriority) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *MonorailPriority) GetThreshold() *ImpactThreshold {
	if x != nil {
		return x.Threshold
	}
	return nil
}

func (x *MonorailPriority) GetThresholds() []*ImpactMetricThreshold {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

// Configurations per realm.
type RealmConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the realm.
	//
	// Must match `^[a-z0-9_\.\-/]{1,400}$`.
	// Must not contain the project part. I.e. for "chromium:ci" realm the value
	// here must be "ci".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Test variant analysis configurations for the realm.
	TestVariantAnalysis *TestVariantAnalysisConfig `protobuf:"bytes,2,opt,name=test_variant_analysis,json=testVariantAnalysis,proto3" json:"test_variant_analysis,omitempty"`
}

func (x *RealmConfig) Reset() {
	*x = RealmConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealmConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealmConfig) ProtoMessage() {}

func (x *RealmConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealmConfig.ProtoReflect.Descriptor instead.
func (*RealmConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{10}
}

func (x *RealmConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RealmConfig) GetTestVariantAnalysis() *TestVariantAnalysisConfig {
	if x != nil {
		return x.TestVariantAnalysis
	}
	return nil
}

// Configuration for how test results are clustered.
type Clustering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rules used to cluster test results by test name.
	// The order of rules matters; the first matching rule will be used
	// to cluster a given test result.
	//
	// If no rule matches, the test results will be clustered on the
	// full test name. This corresponds approximately to the rule:
	//
	//	{
	//	  name: "Full test name"
	//	  pattern: "^(?P<testname>.*)$"
	//	  like_template: "${testname}"
	//	}
	TestNameRules []*TestNameClusteringRule `protobuf:"bytes,1,rep,name=test_name_rules,json=testNameRules,proto3" json:"test_name_rules,omitempty"`
	// Regular expressions used to mask out part of a failure reason
	// prior to clustering.
	//
	// The process of generating the clustering key is:
	//  1. All '%', '_' and '\' characters in the failure reason are
	//     escaped to generate a SQL LIKE expression that matches the
	//     failure reason literally.
	//  2. Regular expressions are run over the escaped failure reason
	//     one by one to identify parts of the failure reason to mask
	//     out (replace by a SQL LIKE wildcard match).
	//  3. The clustering key is used in the failure association rule
	//     of a newly field bug, or hashed to generate the clustering
	//     key.
	//
	// For regular expression run against the failure reason,
	// the part of the reason that matches the first (capturing)
	// subexpression is masked out in the reason cluster.
	// All non-overlapping matches are replaced.
	//
	// For example, given the masking expression:
	// "^\\[Fixture failure\\] (\\w+):"
	// The failure reason:
	// `[Fixture failure] myFixture: some_error`
	// will be escaped to (in step 1):
	// `[Fixture failure] myFixture: some\_error`
	// and will yield the following output after masking (step 2):
	// `[Fixture failure] %: some\_error`
	//
	// Masking expressions are applied in the order that they appear
	// in the list.
	ReasonMaskPatterns []string `protobuf:"bytes,2,rep,name=reason_mask_patterns,json=reasonMaskPatterns,proto3" json:"reason_mask_patterns,omitempty"`
}

func (x *Clustering) Reset() {
	*x = Clustering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clustering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clustering) ProtoMessage() {}

func (x *Clustering) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clustering.ProtoReflect.Descriptor instead.
func (*Clustering) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{11}
}

func (x *Clustering) GetTestNameRules() []*TestNameClusteringRule {
	if x != nil {
		return x.TestNameRules
	}
	return nil
}

func (x *Clustering) GetReasonMaskPatterns() []string {
	if x != nil {
		return x.ReasonMaskPatterns
	}
	return nil
}

// A rule used to cluster a test result by test name.
type TestNameClusteringRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A human-readable name for the rule. This should be unique for each rule.
	// This may be used by LUCI Analysis to explain why it chose to cluster the
	// test name in this way.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The regular expression describing which test names should be clustered
	// by this rule.
	//
	// Example.
	//
	//	Assume our project uploads google test (gtest) results with the test
	//	name prefix "gtest://".
	//	If want to cluster value-parameterized google tests
	//	together based on the test suite and test case name (ignoring
	//	the value parameter), we may use a pattern like:
	//	  "^gtest://(\w+/)?(?P<testcase>\w+\.\w+)/\w+$"
	//
	//	This will allow us to cluster test names like:
	//	  "gtest://InstantiationOne/ColorSpaceTest.testNullTransform/0"
	//	  "gtest://InstantiationOne/ColorSpaceTest.testNullTransform/1"
	//	  "gtest://InstantiationTwo/ColorSpaceTest.testNullTransform/0"
	//	together.
	//
	//	See https://github.com/google/googletest/blob/main/docs/advanced.md#how-to-write-value-parameterized-tests
	//	to understand value-parameterised google tests.
	//
	// Use ?P<name> to name capture groups, so their values can be used in
	// like_template below.
	Pattern string `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// The template used to generate a LIKE expression on test names
	// that defines the test name cluster identified by this rule.
	//
	// This like expression has two purposes:
	// (1) If the test name cluster is large enough to justify the
	//
	//	creation of a bug cluster, the like expression is used to
	//	generate a failure association rule of the following form:
	//	   test LIKE "<evaluated like_template>"
	//
	// (2) A hash of the expression is used as the clustering key for the
	//
	//	test name-based suggested cluster. This generally has the desired
	//	clustering behaviour, i.e. the parts of the test name which
	//	are important enough to included in the LIKE expression for (1)
	//	are also those on which clustering should occur.
	//
	// As is usual for LIKE expressions, the template can contain
	// the following operators to do wildcard matching:
	// * '%' for wildcard match of an arbitrary number of characters, and
	// * '_' for single character wildcard match.
	//
	// To match literal '%' or '_', escape the operator with a '\',
	// i.e. use "\%" or "\_" to match literal '%' and '_' respectively.
	// To match literal '\', you should use "\\".
	//
	// The template can refer to parts of the test name matched by
	// the rule pattern using ${name}, where name refers to the capture
	// group (see pattern). To insert the literal '$', the sequence '$$'
	// should be used.
	//
	// Example.
	//
	//	Assume our project uploads google test (gtest) results with the test
	//	name prefix "gtest://". Further assume we used the pattern:
	//	  "^gtest://(\w+/)?(?P<testcase>\w+\.\w+)/\w+$"
	//
	//	We might use the following like_template:
	//	  "gtest://%${testcase}%"
	//
	//	When instantiated for a value-parameterised test, e.g.
	//	"gtest://InstantiationOne/ColorSpaceTest.testNullTransform/0",
	//	the result would be a failure association rule like:
	//	  test LIKE "gtest://%ColorSpaceTest.testNullTransform%"
	//
	//	Note the use of ${testcase} to refer to the testname capture group
	//	specified in the pattern example.
	//
	//	See https://github.com/google/googletest/blob/main/docs/advanced.md#how-to-write-value-parameterized-tests
	//	to understand value-parameterised google tests.
	//
	// It is known that not all clusters can be precisely matched by
	// a LIKE expression. Nonetheless, LUCI Analysis prefers LIKE expressions
	// as they are easier to comprehend and modify by users, and in
	// most cases, the added precision is not required.
	//
	// As such, your rule should try to ensure the generated LIKE statement
	// captures your clustering logic as best it can. Your LIKE expression
	// MUST match all test names matched by your regex pattern, and MAY
	// capture additional test names (though this is preferably minimised,
	// to reduce differences between the suggested clusters and eventual
	// bug clusters).
	//
	// LUCI Analysis will automatically escape any '%' '_' and '\' in parts of
	// the matched test name before substitution to ensure captured parts
	// of the test name are matched literally and not interpreted.
	LikeTemplate string `protobuf:"bytes,3,opt,name=like_template,json=likeTemplate,proto3" json:"like_template,omitempty"`
}

func (x *TestNameClusteringRule) Reset() {
	*x = TestNameClusteringRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestNameClusteringRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNameClusteringRule) ProtoMessage() {}

func (x *TestNameClusteringRule) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestNameClusteringRule.ProtoReflect.Descriptor instead.
func (*TestNameClusteringRule) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{12}
}

func (x *TestNameClusteringRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestNameClusteringRule) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *TestNameClusteringRule) GetLikeTemplate() string {
	if x != nil {
		return x.LikeTemplate
	}
	return ""
}

// Defines the required details for a Buganizer component.
type BuganizerComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the component that we will use to file bugs in.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BuganizerComponent) Reset() {
	*x = BuganizerComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuganizerComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuganizerComponent) ProtoMessage() {}

func (x *BuganizerComponent) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuganizerComponent.ProtoReflect.Descriptor instead.
func (*BuganizerComponent) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{13}
}

func (x *BuganizerComponent) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// The Buganizer configuration, this should only be
// used when the bug tracking system ins Buganizer.
type BuganizerProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default Buganizer component.
	// This component will be used if we failed to find
	// a component for a cluster.
	DefaultComponent *BuganizerComponent `protobuf:"bytes,1,opt,name=default_component,json=defaultComponent,proto3" json:"default_component,omitempty"`
	// Controls the amount of hysteresis used in setting bug priorities.
	// Once a bug is assigned a given priority, its priority will only be
	// increased if it exceeds the next priority's thresholds by the
	// specified percentage margin, and decreased if the current priority's
	// thresholds exceed the bug's impact by the given percentage margin.
	//
	// A value of 100 indicates impact may be double the threshold for
	// the next highest priority value, (or half the threshold of the
	// current priority value,) before a bug's priority is increased
	// (or decreased).
	//
	// Valid values are from 0 (no hystersis) to 1,000 (10x hysteresis).
	PriorityHysteresisPercent int64 `protobuf:"varint,2,opt,name=priority_hysteresis_percent,json=priorityHysteresisPercent,proto3" json:"priority_hysteresis_percent,omitempty"`
	// A list of priority mappings that will be used to determine the
	// priority of the bug based on the threshold.
	// The priorities must be the ones in BuganizerPriority.
	// They must be in descending order of highest to lowset priority
	// and without duplicates.
	// In order to meet a higher priority, the impact must match all lower
	// priorities' criteria first.
	PriorityMappings []*BuganizerProject_PriorityMapping `protobuf:"bytes,3,rep,name=priority_mappings,json=priorityMappings,proto3" json:"priority_mappings,omitempty"`
}

func (x *BuganizerProject) Reset() {
	*x = BuganizerProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuganizerProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuganizerProject) ProtoMessage() {}

func (x *BuganizerProject) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuganizerProject.ProtoReflect.Descriptor instead.
func (*BuganizerProject) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{14}
}

func (x *BuganizerProject) GetDefaultComponent() *BuganizerComponent {
	if x != nil {
		return x.DefaultComponent
	}
	return nil
}

func (x *BuganizerProject) GetPriorityHysteresisPercent() int64 {
	if x != nil {
		return x.PriorityHysteresisPercent
	}
	return 0
}

func (x *BuganizerProject) GetPriorityMappings() []*BuganizerProject_PriorityMapping {
	if x != nil {
		return x.PriorityMappings
	}
	return nil
}

type Metrics_MetricOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the impact metric.
	//
	// Full list of available metrics here:
	// https://source.chromium.org/chromium/infra/infra/+/main:go/src/go.chromium.org/luci/analysis/internal/analysis/metrics/metrics.go
	MetricId string `protobuf:"bytes,1,opt,name=metric_id,json=metricId,proto3" json:"metric_id,omitempty"`
	// Whether the metric should be selected by default.
	IsDefault *bool `protobuf:"varint,2,opt,name=is_default,json=isDefault,proto3,oneof" json:"is_default,omitempty"`
	// Controls the default sort order between metrics. By default,
	// a list will sort by the metric with the highest sort priority,
	// followed by the metric with second highest sort priority,
	// and so on.
	SortPriority *int32 `protobuf:"varint,3,opt,name=sort_priority,json=sortPriority,proto3,oneof" json:"sort_priority,omitempty"`
}

func (x *Metrics_MetricOverride) Reset() {
	*x = Metrics_MetricOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metrics_MetricOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics_MetricOverride) ProtoMessage() {}

func (x *Metrics_MetricOverride) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics_MetricOverride.ProtoReflect.Descriptor instead.
func (*Metrics_MetricOverride) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Metrics_MetricOverride) GetMetricId() string {
	if x != nil {
		return x.MetricId
	}
	return ""
}

func (x *Metrics_MetricOverride) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

func (x *Metrics_MetricOverride) GetSortPriority() int32 {
	if x != nil && x.SortPriority != nil {
		return *x.SortPriority
	}
	return 0
}

// A mapping between a Buganizer priority to an Impact Threshold.
// We use this to determine that which priority to set for a bug.
type BuganizerProject_PriorityMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Buganizer priority that will be mapped to a threshold.
	Priority BuganizerPriority `protobuf:"varint,1,opt,name=priority,proto3,enum=luci.analysis.config.BuganizerPriority" json:"priority,omitempty"`
	// Deprecated. No longer has any effect. Retained for textproto
	// compatibility only. Use thresholds instead.
	Threshold *ImpactThreshold `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// The threshold at which to apply the priority.
	// The thresholds are considered satisfied if any of the individual impact metric
	// thresholds is met or exceeded (i.e. if multiple thresholds are set, they
	// are combined using an OR-semantic).
	Thresholds []*ImpactMetricThreshold `protobuf:"bytes,3,rep,name=thresholds,proto3" json:"thresholds,omitempty"`
}

func (x *BuganizerProject_PriorityMapping) Reset() {
	*x = BuganizerProject_PriorityMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuganizerProject_PriorityMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuganizerProject_PriorityMapping) ProtoMessage() {}

func (x *BuganizerProject_PriorityMapping) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuganizerProject_PriorityMapping.ProtoReflect.Descriptor instead.
func (*BuganizerProject_PriorityMapping) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP(), []int{14, 0}
}

func (x *BuganizerProject_PriorityMapping) GetPriority() BuganizerPriority {
	if x != nil {
		return x.Priority
	}
	return BuganizerPriority_BUGANIZER_PRIORITY_UNSPECIFIED
}

func (x *BuganizerProject_PriorityMapping) GetThreshold() *ImpactThreshold {
	if x != nil {
		return x.Threshold
	}
	return nil
}

func (x *BuganizerProject_PriorityMapping) GetThresholds() []*ImpactMetricThreshold {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

var File_go_chromium_org_luci_analysis_proto_config_project_config_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x06, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0a, 0x62,
	0x75, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x09,
	0x62, 0x75, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x09,
	0x62, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x62, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x72, 0x12, 0x57, 0x0a, 0x14, 0x62, 0x75, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x12, 0x62, 0x75, 0x67, 0x46, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x6c, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x0e, 0x62, 0x75, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x62, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x15, 0x62, 0x75, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x13, 0x62, 0x75, 0x67, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x44, 0x0a,
	0x09, 0x42, 0x75, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55,
	0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x4e, 0x4f, 0x52, 0x41,
	0x49, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x55, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x45,
	0x52, 0x10, 0x02, 0x22, 0x34, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x07, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x1a, 0x9c, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c,
	0x73, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x22, 0x54, 0x0a, 0x0d, 0x42, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x75, 0x67, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xff, 0x04, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x11,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x4f, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x59, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f,
	0x72, 0x75, 0x6e, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x13, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x67, 0x0a,
	0x1c, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x73, 0x5f, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x1a, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x45, 0x78, 0x6f, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x16, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x31, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x14, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x31, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x16, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x33, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x14, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x33, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16,
	0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x73, 0x5f, 0x37, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x14,
	0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x73, 0x37, 0x64, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x75, 0x6e, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x31, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x33, 0x64, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x37, 0x64, 0x22, 0x79, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x44,
	0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65,
	0x65, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x65, 0x76, 0x65, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e,
	0x65, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f,
	0x64, 0x61, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x64, 0x61,
	0x79, 0x22, 0xd9, 0x03, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x5a, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x79, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x48, 0x79,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x66, 0x69, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x22, 0x45, 0x0a,
	0x12, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0a, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x6c,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x74, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x22, 0x94, 0x01, 0x0a, 0x0a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x54, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x22, 0x6b, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x42, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf9, 0x03, 0x0a, 0x10, 0x42,
	0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x55, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x68, 0x79, 0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x48, 0x79, 0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xe8, 0x01, 0x0a, 0x0f,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x43, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2a, 0x5f, 0x0a, 0x11, 0x42, 0x75, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x42,
	0x55, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x50, 0x30, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x31, 0x10, 0x02, 0x12,
	0x06, 0x0a, 0x02, 0x50, 0x32, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x33, 0x10, 0x04, 0x12,
	0x06, 0x0a, 0x02, 0x50, 0x34, 0x10, 0x05, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescData = file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDesc
)

func file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescData)
	})
	return file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_config_project_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_go_chromium_org_luci_analysis_proto_config_project_config_proto_goTypes = []interface{}{
	(BuganizerPriority)(0),                   // 0: luci.analysis.config.BuganizerPriority
	(ProjectConfig_BugSystem)(0),             // 1: luci.analysis.config.ProjectConfig.BugSystem
	(*ProjectConfig)(nil),                    // 2: luci.analysis.config.ProjectConfig
	(*ProjectMetadata)(nil),                  // 3: luci.analysis.config.ProjectMetadata
	(*Metrics)(nil),                          // 4: luci.analysis.config.Metrics
	(*BugManagement)(nil),                    // 5: luci.analysis.config.BugManagement
	(*ImpactThreshold)(nil),                  // 6: luci.analysis.config.ImpactThreshold
	(*ImpactMetricThreshold)(nil),            // 7: luci.analysis.config.ImpactMetricThreshold
	(*MetricThreshold)(nil),                  // 8: luci.analysis.config.MetricThreshold
	(*MonorailProject)(nil),                  // 9: luci.analysis.config.MonorailProject
	(*MonorailFieldValue)(nil),               // 10: luci.analysis.config.MonorailFieldValue
	(*MonorailPriority)(nil),                 // 11: luci.analysis.config.MonorailPriority
	(*RealmConfig)(nil),                      // 12: luci.analysis.config.RealmConfig
	(*Clustering)(nil),                       // 13: luci.analysis.config.Clustering
	(*TestNameClusteringRule)(nil),           // 14: luci.analysis.config.TestNameClusteringRule
	(*BuganizerComponent)(nil),               // 15: luci.analysis.config.BuganizerComponent
	(*BuganizerProject)(nil),                 // 16: luci.analysis.config.BuganizerProject
	(*Metrics_MetricOverride)(nil),           // 17: luci.analysis.config.Metrics.MetricOverride
	(*BuganizerProject_PriorityMapping)(nil), // 18: luci.analysis.config.BuganizerProject.PriorityMapping
	(*timestamppb.Timestamp)(nil),            // 19: google.protobuf.Timestamp
	(*TestVariantAnalysisConfig)(nil),        // 20: luci.analysis.config.TestVariantAnalysisConfig
}
var file_go_chromium_org_luci_analysis_proto_config_project_config_proto_depIdxs = []int32{
	3,  // 0: luci.analysis.config.ProjectConfig.project_metadata:type_name -> luci.analysis.config.ProjectMetadata
	1,  // 1: luci.analysis.config.ProjectConfig.bug_system:type_name -> luci.analysis.config.ProjectConfig.BugSystem
	9,  // 2: luci.analysis.config.ProjectConfig.monorail:type_name -> luci.analysis.config.MonorailProject
	16, // 3: luci.analysis.config.ProjectConfig.buganizer:type_name -> luci.analysis.config.BuganizerProject
	6,  // 4: luci.analysis.config.ProjectConfig.bug_filing_threshold:type_name -> luci.analysis.config.ImpactThreshold
	12, // 5: luci.analysis.config.ProjectConfig.realms:type_name -> luci.analysis.config.RealmConfig
	19, // 6: luci.analysis.config.ProjectConfig.last_updated:type_name -> google.protobuf.Timestamp
	13, // 7: luci.analysis.config.ProjectConfig.clustering:type_name -> luci.analysis.config.Clustering
	5,  // 8: luci.analysis.config.ProjectConfig.bug_management:type_name -> luci.analysis.config.BugManagement
	7,  // 9: luci.analysis.config.ProjectConfig.bug_filing_thresholds:type_name -> luci.analysis.config.ImpactMetricThreshold
	4,  // 10: luci.analysis.config.ProjectConfig.metrics:type_name -> luci.analysis.config.Metrics
	17, // 11: luci.analysis.config.Metrics.overrides:type_name -> luci.analysis.config.Metrics.MetricOverride
	8,  // 12: luci.analysis.config.ImpactThreshold.test_results_failed:type_name -> luci.analysis.config.MetricThreshold
	8,  // 13: luci.analysis.config.ImpactThreshold.test_runs_failed:type_name -> luci.analysis.config.MetricThreshold
	8,  // 14: luci.analysis.config.ImpactThreshold.presubmit_runs_failed:type_name -> luci.analysis.config.MetricThreshold
	8,  // 15: luci.analysis.config.ImpactThreshold.critical_failures_exonerated:type_name -> luci.analysis.config.MetricThreshold
	8,  // 16: luci.analysis.config.ImpactMetricThreshold.threshold:type_name -> luci.analysis.config.MetricThreshold
	10, // 17: luci.analysis.config.MonorailProject.default_field_values:type_name -> luci.analysis.config.MonorailFieldValue
	11, // 18: luci.analysis.config.MonorailProject.priorities:type_name -> luci.analysis.config.MonorailPriority
	6,  // 19: luci.analysis.config.MonorailPriority.threshold:type_name -> luci.analysis.config.ImpactThreshold
	7,  // 20: luci.analysis.config.MonorailPriority.thresholds:type_name -> luci.analysis.config.ImpactMetricThreshold
	20, // 21: luci.analysis.config.RealmConfig.test_variant_analysis:type_name -> luci.analysis.config.TestVariantAnalysisConfig
	14, // 22: luci.analysis.config.Clustering.test_name_rules:type_name -> luci.analysis.config.TestNameClusteringRule
	15, // 23: luci.analysis.config.BuganizerProject.default_component:type_name -> luci.analysis.config.BuganizerComponent
	18, // 24: luci.analysis.config.BuganizerProject.priority_mappings:type_name -> luci.analysis.config.BuganizerProject.PriorityMapping
	0,  // 25: luci.analysis.config.BuganizerProject.PriorityMapping.priority:type_name -> luci.analysis.config.BuganizerPriority
	6,  // 26: luci.analysis.config.BuganizerProject.PriorityMapping.threshold:type_name -> luci.analysis.config.ImpactThreshold
	7,  // 27: luci.analysis.config.BuganizerProject.PriorityMapping.thresholds:type_name -> luci.analysis.config.ImpactMetricThreshold
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_config_project_config_proto_init() }
func file_go_chromium_org_luci_analysis_proto_config_project_config_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_config_project_config_proto != nil {
		return
	}
	file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BugManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpactThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpactMetricThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonorailProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonorailFieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonorailPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealmConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clustering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestNameClusteringRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuganizerComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuganizerProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metrics_MetricOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuganizerProject_PriorityMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_config_project_config_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_config_project_config_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_analysis_proto_config_project_config_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_config_project_config_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_config_project_config_proto = out.File
	file_go_chromium_org_luci_analysis_proto_config_project_config_proto_rawDesc = nil
	file_go_chromium_org_luci_analysis_proto_config_project_config_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_config_project_config_proto_depIdxs = nil
}
