// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: go.chromium.org/luci/analysis/proto/bq/failure_association_rules_history_row.proto

package bqpb

import (
	v1 "go.chromium.org/luci/analysis/proto/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FailureAssociationRulesHistoryRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The LUCI Project this bug belongs to.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The unique identifier for the rule. This rule_id corresponds to the cluster_id
	// in the clustered_failures table.
	RuleId string `protobuf:"bytes,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// The rule predicate, defining which failures are being associated.
	RuleDefinition string `protobuf:"bytes,3,opt,name=rule_definition,json=ruleDefinition,proto3" json:"rule_definition,omitempty"`
	// The time the rule was created.
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// The last time the rule was updated.
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// The last time either rule_definition or is_active is changed.
	PredicateLastUpdated *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=predicate_last_updated,json=predicateLastUpdated,proto3" json:"predicate_last_updated,omitempty"`
	// The system and the id of where the bug is tracked.
	Bug *FailureAssociationRulesHistoryRow_Bug `protobuf:"bytes,7,opt,name=bug,proto3" json:"bug,omitempty"`
	// Whether the bug must still be updated by LUCI Analysis, and whether
	// failures should still be matched against this rule.
	IsActive bool `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Whether this rule should manage the priority and verified status
	// of the associated bug based on the impact of the cluster defined
	// by this rule.
	IsManagingBug bool `protobuf:"varint,9,opt,name=is_managing_bug,json=isManagingBug,proto3" json:"is_managing_bug,omitempty"`
	// Indicates whether we should update the priority of the bug
	// that is associated with this rule based on the cluster's impact.
	// This toggle has must have no effect if the is_managing_bug toggle is off.
	IsManagingBugPriority bool `protobuf:"varint,10,opt,name=is_managing_bug_priority,json=isManagingBugPriority,proto3" json:"is_managing_bug_priority,omitempty"`
	// Tracks when the field is_managing_bug_priority was last updated.
	IsManagingBugPriorityLastUpdated *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=is_managing_bug_priority_last_updated,json=isManagingBugPriorityLastUpdated,proto3" json:"is_managing_bug_priority_last_updated,omitempty"`
	// This suggested cluster this rule was created from.
	// Until re-clustering is complete (and the residual impact of the source
	// cluster has reduced to zero), source_cluster.algorithm and source_cluster.id
	// tell bug filing to ignore the source suggested cluster when
	// determining whether new bugs need to be filed.
	SourceCluster *v1.ClusterId `protobuf:"bytes,12,opt,name=source_cluster,json=sourceCluster,proto3" json:"source_cluster,omitempty"`
	// The time the entry was ingested to this bigquery table.
	ExportedTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=exported_time,json=exportedTime,proto3" json:"exported_time,omitempty"`
}

func (x *FailureAssociationRulesHistoryRow) Reset() {
	*x = FailureAssociationRulesHistoryRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureAssociationRulesHistoryRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureAssociationRulesHistoryRow) ProtoMessage() {}

func (x *FailureAssociationRulesHistoryRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureAssociationRulesHistoryRow.ProtoReflect.Descriptor instead.
func (*FailureAssociationRulesHistoryRow) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDescGZIP(), []int{0}
}

func (x *FailureAssociationRulesHistoryRow) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *FailureAssociationRulesHistoryRow) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *FailureAssociationRulesHistoryRow) GetRuleDefinition() string {
	if x != nil {
		return x.RuleDefinition
	}
	return ""
}

func (x *FailureAssociationRulesHistoryRow) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *FailureAssociationRulesHistoryRow) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *FailureAssociationRulesHistoryRow) GetPredicateLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.PredicateLastUpdated
	}
	return nil
}

func (x *FailureAssociationRulesHistoryRow) GetBug() *FailureAssociationRulesHistoryRow_Bug {
	if x != nil {
		return x.Bug
	}
	return nil
}

func (x *FailureAssociationRulesHistoryRow) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *FailureAssociationRulesHistoryRow) GetIsManagingBug() bool {
	if x != nil {
		return x.IsManagingBug
	}
	return false
}

func (x *FailureAssociationRulesHistoryRow) GetIsManagingBugPriority() bool {
	if x != nil {
		return x.IsManagingBugPriority
	}
	return false
}

func (x *FailureAssociationRulesHistoryRow) GetIsManagingBugPriorityLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.IsManagingBugPriorityLastUpdated
	}
	return nil
}

func (x *FailureAssociationRulesHistoryRow) GetSourceCluster() *v1.ClusterId {
	if x != nil {
		return x.SourceCluster
	}
	return nil
}

func (x *FailureAssociationRulesHistoryRow) GetExportedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExportedTime
	}
	return nil
}

type FailureAssociationRulesHistoryRow_Bug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// system is the bug tracking system containing the bug the failures are
	// associated with. The only supported values are 'monorail' and 'buganizer'.
	System string `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	// id is the identifier of the bug the failures are associated with, as
	// identified by the bug tracking system itself. For monorail, the scheme is
	// {project}/{numeric_id}, for buganizer, the scheme is {numeric_id}.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FailureAssociationRulesHistoryRow_Bug) Reset() {
	*x = FailureAssociationRulesHistoryRow_Bug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureAssociationRulesHistoryRow_Bug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureAssociationRulesHistoryRow_Bug) ProtoMessage() {}

func (x *FailureAssociationRulesHistoryRow_Bug) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureAssociationRulesHistoryRow_Bug.ProtoReflect.Descriptor instead.
func (*FailureAssociationRulesHistoryRow_Bug) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FailureAssociationRulesHistoryRow_Bug) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *FailureAssociationRulesHistoryRow_Bug) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDesc = []byte{
	0x0a, 0x52, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x71, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x06, 0x0a,
	0x21, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x50,
	0x0a, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x49, 0x0a, 0x03, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x6f, 0x77, 0x2e, 0x42, 0x75, 0x67, 0x52, 0x03, 0x62, 0x75, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x67,
	0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x75, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x75,
	0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x6b, 0x0a, 0x25, 0x69, 0x73, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x20, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x42, 0x75, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x2d, 0x0a, 0x03, 0x42,
	0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x6f,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x62, 0x71, 0x3b, 0x62, 0x71, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDescData = file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDesc
)

func file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDescData)
	})
	return file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_goTypes = []interface{}{
	(*FailureAssociationRulesHistoryRow)(nil),     // 0: luci.analysis.bq.FailureAssociationRulesHistoryRow
	(*FailureAssociationRulesHistoryRow_Bug)(nil), // 1: luci.analysis.bq.FailureAssociationRulesHistoryRow.Bug
	(*timestamppb.Timestamp)(nil),                 // 2: google.protobuf.Timestamp
	(*v1.ClusterId)(nil),                          // 3: luci.analysis.v1.ClusterId
}
var file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_depIdxs = []int32{
	2, // 0: luci.analysis.bq.FailureAssociationRulesHistoryRow.creation_time:type_name -> google.protobuf.Timestamp
	2, // 1: luci.analysis.bq.FailureAssociationRulesHistoryRow.last_updated:type_name -> google.protobuf.Timestamp
	2, // 2: luci.analysis.bq.FailureAssociationRulesHistoryRow.predicate_last_updated:type_name -> google.protobuf.Timestamp
	1, // 3: luci.analysis.bq.FailureAssociationRulesHistoryRow.bug:type_name -> luci.analysis.bq.FailureAssociationRulesHistoryRow.Bug
	2, // 4: luci.analysis.bq.FailureAssociationRulesHistoryRow.is_managing_bug_priority_last_updated:type_name -> google.protobuf.Timestamp
	3, // 5: luci.analysis.bq.FailureAssociationRulesHistoryRow.source_cluster:type_name -> luci.analysis.v1.ClusterId
	2, // 6: luci.analysis.bq.FailureAssociationRulesHistoryRow.exported_time:type_name -> google.protobuf.Timestamp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() {
	file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_init()
}
func file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureAssociationRulesHistoryRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureAssociationRulesHistoryRow_Bug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto = out.File
	file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_rawDesc = nil
	file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_bq_failure_association_rules_history_row_proto_depIdxs = nil
}
