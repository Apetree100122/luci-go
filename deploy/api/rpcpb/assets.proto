// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package deploy.service;

option go_package = "go.chromium.org/luci/deploy/api/rpcpb";

import "go.chromium.org/luci/deploy/api/modelpb/asset.proto";


// Assets service allows to view and interact with Assets.
service Assets {
  // GetAsset returns an Asset given its ID.
  rpc GetAsset(GetAssetRequest) returns (deploy.model.Asset);
  // ListAssets lists assets matching specified filters (if any).
  rpc ListAssets(ListAssetsRequest) returns (ListAssetsResponse);
  // ListAssetHistory fetches an asset and its actuation history.
  rpc ListAssetHistory(ListAssetHistoryRequest) returns (ListAssetHistoryResponse);
}


// GetAssetRequest specifies what asset to fetch.
message GetAssetRequest {
  string asset_id = 1;
}


// ListAssetsRequest specifies what assets to list.
//
// Empty request means to list all available assets.
message ListAssetsRequest {
}


// ListAssetsResponse contains asset listing.
message ListAssetsResponse {
  // Assets in order of their IDs.
  repeated deploy.model.Asset assets = 1;
}


// ListAssetHistoryRequest specifies what historical records to fetch.
//
// AssetHistory records have consecutive integer IDs. Newer entries have larger
// IDs. Oldest entries are periodically trimmed. As a result, possible IDs lie
// in an interval `[oldest_retained_id, last_recorded_id]`, where both ends can
// increase any time when older entries are trimmed and newer entries are
// recorded.
//
// ListAssetHistory fetches entries in reverse chronological order (the most
// recent entries with highest ID come first).
//
// If `latest_history_id` is given, it defines a range of records to fetch as
// `(latest_history_id-limit, latest_history_id]`. The response will contain
// records from intersection of this interval with interval of all possible
// IDs (as defined above).
//
// If `latest_history_id` is absent, it is assumed to be `last_recorded_id`.
//
// If `limit` is absent, it is assumed to be some default page size. It is also
// silently capped by some largish value.
message ListAssetHistoryRequest {
  // ID of an asset to fetch the history of.
  string asset_id = 1;
  // ID of the most recent historical entry to fetch (for pagination).
  int64 latest_history_id = 2;
  // Limit on the number of entries to fetch.
  int32 limit = 3;
}


// ListAssetHistoryResponse contains an asset and its actuation history.
message ListAssetHistoryResponse {
  // Asset at its current state.
  deploy.model.Asset asset = 1;
  // A historical entry being recorded right now, if any.
  deploy.model.AssetHistory current = 2;
  // ID of the most recently recorded and committed entry (for pagination back).
  int64 last_recorded_history_id = 3;
  // Historical records starting with `latest_history_id`.
  repeated deploy.model.AssetHistory history = 4;
}
