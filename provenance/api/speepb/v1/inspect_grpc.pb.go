// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: go.chromium.org/luci/provenance/api/speepb/v1/inspect.proto

package speepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InspectClient is the client API for Inspect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InspectClient interface {
	// Report network traffict observed during FETCH, COMPILE and UPLOAD stage.
	ReportNetworkActivity(ctx context.Context, in *ReportNetworkActivityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type inspectClient struct {
	cc grpc.ClientConnInterface
}

func NewInspectClient(cc grpc.ClientConnInterface) InspectClient {
	return &inspectClient{cc}
}

func (c *inspectClient) ReportNetworkActivity(ctx context.Context, in *ReportNetworkActivityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/spee.v1.Inspect/ReportNetworkActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InspectServer is the server API for Inspect service.
// All implementations must embed UnimplementedInspectServer
// for forward compatibility
type InspectServer interface {
	// Report network traffict observed during FETCH, COMPILE and UPLOAD stage.
	ReportNetworkActivity(context.Context, *ReportNetworkActivityRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInspectServer()
}

// UnimplementedInspectServer must be embedded to have forward compatible implementations.
type UnimplementedInspectServer struct {
}

func (UnimplementedInspectServer) ReportNetworkActivity(context.Context, *ReportNetworkActivityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportNetworkActivity not implemented")
}
func (UnimplementedInspectServer) mustEmbedUnimplementedInspectServer() {}

// UnsafeInspectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InspectServer will
// result in compilation errors.
type UnsafeInspectServer interface {
	mustEmbedUnimplementedInspectServer()
}

func RegisterInspectServer(s grpc.ServiceRegistrar, srv InspectServer) {
	s.RegisterService(&Inspect_ServiceDesc, srv)
}

func _Inspect_ReportNetworkActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportNetworkActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectServer).ReportNetworkActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spee.v1.Inspect/ReportNetworkActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectServer).ReportNetworkActivity(ctx, req.(*ReportNetworkActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Inspect_ServiceDesc is the grpc.ServiceDesc for Inspect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inspect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spee.v1.Inspect",
	HandlerType: (*InspectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportNetworkActivity",
			Handler:    _Inspect_ReportNetworkActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/provenance/api/speepb/v1/inspect.proto",
}
