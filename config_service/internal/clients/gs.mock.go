// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: gs.go

package clients

import (
	context "context"
	reflect "reflect"

	storage "cloud.google.com/go/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockGsClient is a mock of GsClient interface.
type MockGsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGsClientMockRecorder
}

// MockGsClientMockRecorder is the mock recorder for MockGsClient.
type MockGsClientMockRecorder struct {
	mock *MockGsClient
}

// NewMockGsClient creates a new mock instance.
func NewMockGsClient(ctrl *gomock.Controller) *MockGsClient {
	mock := &MockGsClient{ctrl: ctrl}
	mock.recorder = &MockGsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGsClient) EXPECT() *MockGsClientMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockGsClient) Read(ctx context.Context, bucket, object string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, bucket, object)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockGsClientMockRecorder) Read(ctx, bucket, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockGsClient)(nil).Read), ctx, bucket, object)
}

// SignedURL mocks base method.
func (m *MockGsClient) SignedURL(bucket, object string, opts *storage.SignedURLOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignedURL", bucket, object, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignedURL indicates an expected call of SignedURL.
func (mr *MockGsClientMockRecorder) SignedURL(bucket, object, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignedURL", reflect.TypeOf((*MockGsClient)(nil).SignedURL), bucket, object, opts)
}

// UploadIf mocks base method.
func (m *MockGsClient) UploadIf(ctx context.Context, bucket, object string, data []byte, conditions storage.Conditions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadIf", ctx, bucket, object, data, conditions)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadIf indicates an expected call of UploadIf.
func (mr *MockGsClientMockRecorder) UploadIf(ctx, bucket, object, data, conditions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadIf", reflect.TypeOf((*MockGsClient)(nil).UploadIf), ctx, bucket, object, data, conditions)
}
