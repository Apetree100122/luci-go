// Code generated by MockGen. DO NOT EDIT.
// Source: config_service_grpc.pb.go

package configpb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "go.chromium.org/luci/common/proto/config"
	grpc "google.golang.org/grpc"
)

// MockConfigsClient is a mock of ConfigsClient interface.
type MockConfigsClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigsClientMockRecorder
}

// MockConfigsClientMockRecorder is the mock recorder for MockConfigsClient.
type MockConfigsClientMockRecorder struct {
	mock *MockConfigsClient
}

// NewMockConfigsClient creates a new mock instance.
func NewMockConfigsClient(ctrl *gomock.Controller) *MockConfigsClient {
	mock := &MockConfigsClient{ctrl: ctrl}
	mock.recorder = &MockConfigsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigsClient) EXPECT() *MockConfigsClientMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigsClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*Config, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfig", varargs...)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigsClientMockRecorder) GetConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigsClient)(nil).GetConfig), varargs...)
}

// GetConfigSet mocks base method.
func (m *MockConfigsClient) GetConfigSet(ctx context.Context, in *GetConfigSetRequest, opts ...grpc.CallOption) (*ConfigSet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigSet", varargs...)
	ret0, _ := ret[0].(*ConfigSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigSet indicates an expected call of GetConfigSet.
func (mr *MockConfigsClientMockRecorder) GetConfigSet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigSet", reflect.TypeOf((*MockConfigsClient)(nil).GetConfigSet), varargs...)
}

// GetProjectConfigs mocks base method.
func (m *MockConfigsClient) GetProjectConfigs(ctx context.Context, in *GetProjectConfigsRequest, opts ...grpc.CallOption) (*GetProjectConfigsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectConfigs", varargs...)
	ret0, _ := ret[0].(*GetProjectConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectConfigs indicates an expected call of GetProjectConfigs.
func (mr *MockConfigsClientMockRecorder) GetProjectConfigs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectConfigs", reflect.TypeOf((*MockConfigsClient)(nil).GetProjectConfigs), varargs...)
}

// ListConfigSets mocks base method.
func (m *MockConfigsClient) ListConfigSets(ctx context.Context, in *ListConfigSetsRequest, opts ...grpc.CallOption) (*ListConfigSetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigSets", varargs...)
	ret0, _ := ret[0].(*ListConfigSetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigSets indicates an expected call of ListConfigSets.
func (mr *MockConfigsClientMockRecorder) ListConfigSets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigSets", reflect.TypeOf((*MockConfigsClient)(nil).ListConfigSets), varargs...)
}

// ValidateConfigs mocks base method.
func (m *MockConfigsClient) ValidateConfigs(ctx context.Context, in *ValidateConfigsRequest, opts ...grpc.CallOption) (*config.ValidationResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateConfigs", varargs...)
	ret0, _ := ret[0].(*config.ValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateConfigs indicates an expected call of ValidateConfigs.
func (mr *MockConfigsClientMockRecorder) ValidateConfigs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfigs", reflect.TypeOf((*MockConfigsClient)(nil).ValidateConfigs), varargs...)
}

// MockConfigsServer is a mock of ConfigsServer interface.
type MockConfigsServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigsServerMockRecorder
}

// MockConfigsServerMockRecorder is the mock recorder for MockConfigsServer.
type MockConfigsServerMockRecorder struct {
	mock *MockConfigsServer
}

// NewMockConfigsServer creates a new mock instance.
func NewMockConfigsServer(ctrl *gomock.Controller) *MockConfigsServer {
	mock := &MockConfigsServer{ctrl: ctrl}
	mock.recorder = &MockConfigsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigsServer) EXPECT() *MockConfigsServerMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigsServer) GetConfig(arg0 context.Context, arg1 *GetConfigRequest) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigsServerMockRecorder) GetConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigsServer)(nil).GetConfig), arg0, arg1)
}

// GetConfigSet mocks base method.
func (m *MockConfigsServer) GetConfigSet(arg0 context.Context, arg1 *GetConfigSetRequest) (*ConfigSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigSet", arg0, arg1)
	ret0, _ := ret[0].(*ConfigSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigSet indicates an expected call of GetConfigSet.
func (mr *MockConfigsServerMockRecorder) GetConfigSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigSet", reflect.TypeOf((*MockConfigsServer)(nil).GetConfigSet), arg0, arg1)
}

// GetProjectConfigs mocks base method.
func (m *MockConfigsServer) GetProjectConfigs(arg0 context.Context, arg1 *GetProjectConfigsRequest) (*GetProjectConfigsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectConfigs", arg0, arg1)
	ret0, _ := ret[0].(*GetProjectConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectConfigs indicates an expected call of GetProjectConfigs.
func (mr *MockConfigsServerMockRecorder) GetProjectConfigs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectConfigs", reflect.TypeOf((*MockConfigsServer)(nil).GetProjectConfigs), arg0, arg1)
}

// ListConfigSets mocks base method.
func (m *MockConfigsServer) ListConfigSets(arg0 context.Context, arg1 *ListConfigSetsRequest) (*ListConfigSetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigSets", arg0, arg1)
	ret0, _ := ret[0].(*ListConfigSetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigSets indicates an expected call of ListConfigSets.
func (mr *MockConfigsServerMockRecorder) ListConfigSets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigSets", reflect.TypeOf((*MockConfigsServer)(nil).ListConfigSets), arg0, arg1)
}

// ValidateConfigs mocks base method.
func (m *MockConfigsServer) ValidateConfigs(arg0 context.Context, arg1 *ValidateConfigsRequest) (*config.ValidationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfigs", arg0, arg1)
	ret0, _ := ret[0].(*config.ValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateConfigs indicates an expected call of ValidateConfigs.
func (mr *MockConfigsServerMockRecorder) ValidateConfigs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfigs", reflect.TypeOf((*MockConfigsServer)(nil).ValidateConfigs), arg0, arg1)
}

// mustEmbedUnimplementedConfigsServer mocks base method.
func (m *MockConfigsServer) mustEmbedUnimplementedConfigsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedConfigsServer")
}

// mustEmbedUnimplementedConfigsServer indicates an expected call of mustEmbedUnimplementedConfigsServer.
func (mr *MockConfigsServerMockRecorder) mustEmbedUnimplementedConfigsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedConfigsServer", reflect.TypeOf((*MockConfigsServer)(nil).mustEmbedUnimplementedConfigsServer))
}

// MockUnsafeConfigsServer is a mock of UnsafeConfigsServer interface.
type MockUnsafeConfigsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeConfigsServerMockRecorder
}

// MockUnsafeConfigsServerMockRecorder is the mock recorder for MockUnsafeConfigsServer.
type MockUnsafeConfigsServerMockRecorder struct {
	mock *MockUnsafeConfigsServer
}

// NewMockUnsafeConfigsServer creates a new mock instance.
func NewMockUnsafeConfigsServer(ctrl *gomock.Controller) *MockUnsafeConfigsServer {
	mock := &MockUnsafeConfigsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeConfigsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeConfigsServer) EXPECT() *MockUnsafeConfigsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedConfigsServer mocks base method.
func (m *MockUnsafeConfigsServer) mustEmbedUnimplementedConfigsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedConfigsServer")
}

// mustEmbedUnimplementedConfigsServer indicates an expected call of mustEmbedUnimplementedConfigsServer.
func (mr *MockUnsafeConfigsServerMockRecorder) mustEmbedUnimplementedConfigsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedConfigsServer", reflect.TypeOf((*MockUnsafeConfigsServer)(nil).mustEmbedUnimplementedConfigsServer))
}
