// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/common/proto/gitiles/gitiles.proto

package gitiles

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	git "go.chromium.org/luci/common/proto/git"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// List copied from
// https://github.com/google/gitiles/blob/65edbe49f2b3882a5979f602383ef0c7b2b8ee0c/java/com/google/gitiles/ArchiveFormat.java
type ArchiveRequest_Format int32

const (
	ArchiveRequest_Invalid ArchiveRequest_Format = 0
	ArchiveRequest_GZIP    ArchiveRequest_Format = 1
	ArchiveRequest_TAR     ArchiveRequest_Format = 2
	ArchiveRequest_BZIP2   ArchiveRequest_Format = 3
	ArchiveRequest_XZ      ArchiveRequest_Format = 4
)

var ArchiveRequest_Format_name = map[int32]string{
	0: "Invalid",
	1: "GZIP",
	2: "TAR",
	3: "BZIP2",
	4: "XZ",
}

var ArchiveRequest_Format_value = map[string]int32{
	"Invalid": 0,
	"GZIP":    1,
	"TAR":     2,
	"BZIP2":   3,
	"XZ":      4,
}

func (x ArchiveRequest_Format) String() string {
	return proto.EnumName(ArchiveRequest_Format_name, int32(x))
}

func (ArchiveRequest_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4cdf9f15dd6bc12a, []int{4, 0}
}

type DownloadFileRequest_Format int32

const (
	DownloadFileRequest_FormatInvalid DownloadFileRequest_Format = 0
	DownloadFileRequest_TEXT          DownloadFileRequest_Format = 1
)

var DownloadFileRequest_Format_name = map[int32]string{
	0: "FormatInvalid",
	1: "TEXT",
}

var DownloadFileRequest_Format_value = map[string]int32{
	"FormatInvalid": 0,
	"TEXT":          1,
}

func (x DownloadFileRequest_Format) String() string {
	return proto.EnumName(DownloadFileRequest_Format_name, int32(x))
}

func (DownloadFileRequest_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4cdf9f15dd6bc12a, []int{6, 0}
}

// LogRequest is request message for Gitiles.Log rpc.
type LogRequest struct {
	// Gitiles project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/master
	// Required.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The commit where to start the listing from.
	// The value can be:
	//   - a git revision as 40-char string or its prefix so long as its unique in repo.
	//   - a ref such as "refs/heads/branch"
	//   - a ref defined as n-th parent of R in the form "R~n".
	//     For example, "master~2" or "deadbeef~1".
	// Required.
	Committish string `protobuf:"bytes,3,opt,name=committish,proto3" json:"committish,omitempty"`
	// If specified, only commits not reachable from this commit (inclusive)
	// will be returned.
	//
	// In git's notation, this is
	//   $ git log ^exclude_ancestors_of committish
	//  OR
	//   $ git log exclude_ancestors_of..committish
	// https://git-scm.com/docs/gitrevisions#gitrevisions-Theememtwo-dotRangeNotation
	//
	// For example, given this repo
	//
	//     base -> A -> B -> C == refs/heads/master
	//        \
	//         X -> Y -> Z  == refs/heads/release
	//
	// calling Log(committish='refs/heads/release',
	//             exclude_ancestors_of='refs/heads/master')
	// will return ['Z', Y', 'X'].
	ExcludeAncestorsOf string `protobuf:"bytes,2,opt,name=exclude_ancestors_of,json=excludeAncestorsOf,proto3" json:"exclude_ancestors_of,omitempty"`
	// If true, include tree diff in commits.
	TreeDiff bool `protobuf:"varint,4,opt,name=tree_diff,json=treeDiff,proto3" json:"tree_diff,omitempty"`
	// Value of next_page_token in LogResponse to continue.
	PageToken string `protobuf:"bytes,10,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// If > 0, number of commits to retrieve.
	PageSize             int32    `protobuf:"varint,11,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRequest) Reset()         { *m = LogRequest{} }
func (m *LogRequest) String() string { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()    {}
func (*LogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdf9f15dd6bc12a, []int{0}
}

func (m *LogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRequest.Unmarshal(m, b)
}
func (m *LogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRequest.Marshal(b, m, deterministic)
}
func (m *LogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRequest.Merge(m, src)
}
func (m *LogRequest) XXX_Size() int {
	return xxx_messageInfo_LogRequest.Size(m)
}
func (m *LogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogRequest proto.InternalMessageInfo

func (m *LogRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *LogRequest) GetCommittish() string {
	if m != nil {
		return m.Committish
	}
	return ""
}

func (m *LogRequest) GetExcludeAncestorsOf() string {
	if m != nil {
		return m.ExcludeAncestorsOf
	}
	return ""
}

func (m *LogRequest) GetTreeDiff() bool {
	if m != nil {
		return m.TreeDiff
	}
	return false
}

func (m *LogRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *LogRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// LogRequest is response message for Gitiles.Log rpc.
type LogResponse struct {
	// Retrieved commits.
	Log []*git.Commit `protobuf:"bytes,1,rep,name=log,proto3" json:"log,omitempty"`
	// A page token for next LogRequest to fetch next page of commits.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogResponse) Reset()         { *m = LogResponse{} }
func (m *LogResponse) String() string { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()    {}
func (*LogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdf9f15dd6bc12a, []int{1}
}

func (m *LogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogResponse.Unmarshal(m, b)
}
func (m *LogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogResponse.Marshal(b, m, deterministic)
}
func (m *LogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogResponse.Merge(m, src)
}
func (m *LogResponse) XXX_Size() int {
	return xxx_messageInfo_LogResponse.Size(m)
}
func (m *LogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogResponse proto.InternalMessageInfo

func (m *LogResponse) GetLog() []*git.Commit {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *LogResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// RefsRequest is a request message of Gitiles.Refs RPC.
type RefsRequest struct {
	// Gitiles project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/master
	// Required.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Limits which refs to resolve to only those matching {refsPath}/*.
	//
	// Must be "refs" or start with "refs/".
	// Must not include glob '*'.
	// Use "refs/heads" to retrieve all branches.
	//
	// To fetch **all** refs in a repo, specify just "refs" but beware of two
	// caveats:
	//  * refs returned include a ref for each patchset for each Gerrit change
	//    associated with the repo.
	//  * returned map will contain special "HEAD" ref whose value in resulting map
	//    will be name of the actual ref to which "HEAD" points, which is typically
	//    "refs/heads/master".
	//
	// Thus, if you are looking for all tags and all branches of repo, it's
	// recommended to issue two Refs calls limited to "refs/tags" and "refs/heads"
	// instead of one call for "refs".
	//
	// Since Gerrit allows per-ref ACLs, it is possible that some refs matching
	// refPrefix would not be present in results because current user isn't granted
	// read permission on them.
	RefsPath             string   `protobuf:"bytes,2,opt,name=refs_path,json=refsPath,proto3" json:"refs_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefsRequest) Reset()         { *m = RefsRequest{} }
func (m *RefsRequest) String() string { return proto.CompactTextString(m) }
func (*RefsRequest) ProtoMessage()    {}
func (*RefsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdf9f15dd6bc12a, []int{2}
}

func (m *RefsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefsRequest.Unmarshal(m, b)
}
func (m *RefsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefsRequest.Marshal(b, m, deterministic)
}
func (m *RefsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefsRequest.Merge(m, src)
}
func (m *RefsRequest) XXX_Size() int {
	return xxx_messageInfo_RefsRequest.Size(m)
}
func (m *RefsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefsRequest proto.InternalMessageInfo

func (m *RefsRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *RefsRequest) GetRefsPath() string {
	if m != nil {
		return m.RefsPath
	}
	return ""
}

// RefsResponse is a response message of Gitiles.Refs RPC.
type RefsResponse struct {
	// revisions maps a ref to a revision.
	// Git branches have keys start with "refs/heads/".
	Revisions            map[string]string `protobuf:"bytes,2,rep,name=revisions,proto3" json:"revisions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RefsResponse) Reset()         { *m = RefsResponse{} }
func (m *RefsResponse) String() string { return proto.CompactTextString(m) }
func (*RefsResponse) ProtoMessage()    {}
func (*RefsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdf9f15dd6bc12a, []int{3}
}

func (m *RefsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefsResponse.Unmarshal(m, b)
}
func (m *RefsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefsResponse.Marshal(b, m, deterministic)
}
func (m *RefsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefsResponse.Merge(m, src)
}
func (m *RefsResponse) XXX_Size() int {
	return xxx_messageInfo_RefsResponse.Size(m)
}
func (m *RefsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefsResponse proto.InternalMessageInfo

func (m *RefsResponse) GetRevisions() map[string]string {
	if m != nil {
		return m.Revisions
	}
	return nil
}

// ArchiveRequest is a request message of the Gitiles.Archive RPC.
type ArchiveRequest struct {
	// Gitiles project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/master
	// Required.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The ref at which to generate the project archive for.
	//
	// viz refs/for/branch or just branch
	Ref string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// Format of the returned project archive.
	Format               ArchiveRequest_Format `protobuf:"varint,3,opt,name=format,proto3,enum=gitiles.ArchiveRequest_Format" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ArchiveRequest) Reset()         { *m = ArchiveRequest{} }
func (m *ArchiveRequest) String() string { return proto.CompactTextString(m) }
func (*ArchiveRequest) ProtoMessage()    {}
func (*ArchiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdf9f15dd6bc12a, []int{4}
}

func (m *ArchiveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArchiveRequest.Unmarshal(m, b)
}
func (m *ArchiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArchiveRequest.Marshal(b, m, deterministic)
}
func (m *ArchiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveRequest.Merge(m, src)
}
func (m *ArchiveRequest) XXX_Size() int {
	return xxx_messageInfo_ArchiveRequest.Size(m)
}
func (m *ArchiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveRequest proto.InternalMessageInfo

func (m *ArchiveRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ArchiveRequest) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *ArchiveRequest) GetFormat() ArchiveRequest_Format {
	if m != nil {
		return m.Format
	}
	return ArchiveRequest_Invalid
}

type ArchiveResponse struct {
	// Suggested name of the returned archive.
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// Contents of the archive streamed from gitiles.
	//
	// The underlying server RPC streams back the contents. This API simplifies
	// the RPC to a non-streaming response.
	Contents             []byte   `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArchiveResponse) Reset()         { *m = ArchiveResponse{} }
func (m *ArchiveResponse) String() string { return proto.CompactTextString(m) }
func (*ArchiveResponse) ProtoMessage()    {}
func (*ArchiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdf9f15dd6bc12a, []int{5}
}

func (m *ArchiveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArchiveResponse.Unmarshal(m, b)
}
func (m *ArchiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArchiveResponse.Marshal(b, m, deterministic)
}
func (m *ArchiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveResponse.Merge(m, src)
}
func (m *ArchiveResponse) XXX_Size() int {
	return xxx_messageInfo_ArchiveResponse.Size(m)
}
func (m *ArchiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveResponse proto.InternalMessageInfo

func (m *ArchiveResponse) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ArchiveResponse) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type DownloadFileRequest struct {
	// Gitiles project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/master
	// Required.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The commit where to start the listing from.
	// The value can be:
	//   - a git revision as 40-char string or its prefix so long as its unique in repo.
	//   - a ref such as "refs/heads/branch"
	//   - a ref defined as n-th parent of R in the form "R~n".
	//     For example, "master~2" or "deadbeef~1".
	// Required.
	Committish string `protobuf:"bytes,2,opt,name=committish,proto3" json:"committish,omitempty"`
	// Path relative to the project root to the file to download.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Format to download file in.
	Format               DownloadFileRequest_Format `protobuf:"varint,4,opt,name=format,proto3,enum=gitiles.DownloadFileRequest_Format" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DownloadFileRequest) Reset()         { *m = DownloadFileRequest{} }
func (m *DownloadFileRequest) String() string { return proto.CompactTextString(m) }
func (*DownloadFileRequest) ProtoMessage()    {}
func (*DownloadFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdf9f15dd6bc12a, []int{6}
}

func (m *DownloadFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadFileRequest.Unmarshal(m, b)
}
func (m *DownloadFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadFileRequest.Marshal(b, m, deterministic)
}
func (m *DownloadFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadFileRequest.Merge(m, src)
}
func (m *DownloadFileRequest) XXX_Size() int {
	return xxx_messageInfo_DownloadFileRequest.Size(m)
}
func (m *DownloadFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadFileRequest proto.InternalMessageInfo

func (m *DownloadFileRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *DownloadFileRequest) GetCommittish() string {
	if m != nil {
		return m.Committish
	}
	return ""
}

func (m *DownloadFileRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DownloadFileRequest) GetFormat() DownloadFileRequest_Format {
	if m != nil {
		return m.Format
	}
	return DownloadFileRequest_FormatInvalid
}

type DownloadFileResponse struct {
	// Decoded contents of the downloaded file.
	//
	// The underlying server RPC streams back the contents. This API simplifies
	// the RPC to a non-streaming response.
	Contents             string   `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadFileResponse) Reset()         { *m = DownloadFileResponse{} }
func (m *DownloadFileResponse) String() string { return proto.CompactTextString(m) }
func (*DownloadFileResponse) ProtoMessage()    {}
func (*DownloadFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdf9f15dd6bc12a, []int{7}
}

func (m *DownloadFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadFileResponse.Unmarshal(m, b)
}
func (m *DownloadFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadFileResponse.Marshal(b, m, deterministic)
}
func (m *DownloadFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadFileResponse.Merge(m, src)
}
func (m *DownloadFileResponse) XXX_Size() int {
	return xxx_messageInfo_DownloadFileResponse.Size(m)
}
func (m *DownloadFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadFileResponse proto.InternalMessageInfo

func (m *DownloadFileResponse) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

func init() {
	proto.RegisterEnum("gitiles.ArchiveRequest_Format", ArchiveRequest_Format_name, ArchiveRequest_Format_value)
	proto.RegisterEnum("gitiles.DownloadFileRequest_Format", DownloadFileRequest_Format_name, DownloadFileRequest_Format_value)
	proto.RegisterType((*LogRequest)(nil), "gitiles.LogRequest")
	proto.RegisterType((*LogResponse)(nil), "gitiles.LogResponse")
	proto.RegisterType((*RefsRequest)(nil), "gitiles.RefsRequest")
	proto.RegisterType((*RefsResponse)(nil), "gitiles.RefsResponse")
	proto.RegisterMapType((map[string]string)(nil), "gitiles.RefsResponse.RevisionsEntry")
	proto.RegisterType((*ArchiveRequest)(nil), "gitiles.ArchiveRequest")
	proto.RegisterType((*ArchiveResponse)(nil), "gitiles.ArchiveResponse")
	proto.RegisterType((*DownloadFileRequest)(nil), "gitiles.DownloadFileRequest")
	proto.RegisterType((*DownloadFileResponse)(nil), "gitiles.DownloadFileResponse")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/common/proto/gitiles/gitiles.proto", fileDescriptor_4cdf9f15dd6bc12a)
}

var fileDescriptor_4cdf9f15dd6bc12a = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xd9, 0x6e, 0xdb, 0x3a,
	0x10, 0x8d, 0x24, 0xc7, 0xcb, 0x38, 0x8b, 0xee, 0xc4, 0x17, 0x57, 0x70, 0x6e, 0x02, 0x43, 0x5d,
	0xe0, 0x27, 0xb9, 0x50, 0xd1, 0x05, 0x4d, 0x51, 0x20, 0x69, 0x16, 0x18, 0x48, 0x51, 0x43, 0xf5,
	0x43, 0x90, 0x17, 0x43, 0x95, 0x29, 0x99, 0x8d, 0x2c, 0xba, 0x12, 0xed, 0x26, 0x79, 0xed, 0x0f,
	0xf4, 0x57, 0xfa, 0x15, 0x7d, 0xee, 0x1f, 0x15, 0xa4, 0x96, 0xd8, 0x59, 0x9a, 0xf6, 0x49, 0x9c,
	0x33, 0x33, 0x87, 0x87, 0x87, 0x43, 0xc1, 0x8b, 0x80, 0x59, 0xde, 0x28, 0x66, 0x63, 0x3a, 0x1d,
	0x5b, 0x2c, 0x0e, 0x3a, 0xe1, 0xd4, 0xa3, 0x1d, 0x8f, 0x8d, 0xc7, 0x2c, 0xea, 0x4c, 0x62, 0xc6,
	0x59, 0x27, 0xa0, 0x9c, 0x86, 0x24, 0xc9, 0xbf, 0x96, 0x44, 0xb1, 0x92, 0x85, 0x4d, 0xfb, 0x8f,
	0x18, 0x24, 0x40, 0x79, 0xda, 0x6c, 0xfe, 0x54, 0x00, 0x8e, 0x59, 0xe0, 0x90, 0xcf, 0x53, 0x92,
	0x70, 0x34, 0xa0, 0x32, 0x89, 0xd9, 0x27, 0xe2, 0x71, 0x43, 0x69, 0x29, 0xed, 0x9a, 0x93, 0x87,
	0xb8, 0x0d, 0x90, 0x36, 0x72, 0x9a, 0x8c, 0x0c, 0x4d, 0x26, 0xe7, 0x10, 0x7c, 0x02, 0x0d, 0x72,
	0xee, 0x85, 0xd3, 0x21, 0x19, 0xb8, 0x91, 0x47, 0x12, 0xce, 0xe2, 0x64, 0xc0, 0x7c, 0x43, 0x95,
	0x95, 0x98, 0xe5, 0x76, 0xf3, 0xd4, 0x7b, 0x1f, 0x37, 0xa1, 0xc6, 0x63, 0x42, 0x06, 0x43, 0xea,
	0xfb, 0x46, 0xa9, 0xa5, 0xb4, 0xab, 0x4e, 0x55, 0x00, 0xfb, 0xd4, 0xf7, 0x71, 0x0b, 0x60, 0xe2,
	0x06, 0x64, 0xc0, 0xd9, 0x19, 0x89, 0x0c, 0x90, 0x24, 0x35, 0x81, 0xf4, 0x05, 0x20, 0x7a, 0x65,
	0x3a, 0xa1, 0x97, 0xc4, 0xa8, 0xb7, 0x94, 0xf6, 0xb2, 0x53, 0x15, 0xc0, 0x07, 0x7a, 0x49, 0xcc,
	0x3e, 0xd4, 0xe5, 0x91, 0x92, 0x09, 0x8b, 0x12, 0x82, 0x5b, 0xa0, 0x85, 0x2c, 0x30, 0x94, 0x96,
	0xd6, 0xae, 0xdb, 0x75, 0x2b, 0xa0, 0xdc, 0x7a, 0x2b, 0x75, 0x3b, 0x02, 0xc7, 0xc7, 0xb0, 0x1e,
	0x91, 0x73, 0x3e, 0x98, 0xdb, 0x2e, 0xd5, 0xbc, 0x2a, 0xe0, 0x5e, 0xbe, 0xa5, 0xb9, 0x0f, 0x75,
	0x87, 0xf8, 0xc9, 0xfd, 0x4e, 0x6d, 0x42, 0x2d, 0x26, 0x7e, 0x32, 0x98, 0xb8, 0x7c, 0x94, 0x51,
	0x55, 0x05, 0xd0, 0x73, 0xf9, 0xc8, 0xfc, 0xa6, 0xc0, 0x4a, 0x4a, 0x93, 0xa9, 0xdb, 0x13, 0xd5,
	0x33, 0x9a, 0x50, 0x16, 0x25, 0x86, 0x2a, 0x35, 0x3e, 0xb4, 0xf2, 0x0b, 0x9e, 0xaf, 0xb4, 0x9c,
	0xbc, 0xec, 0x20, 0xe2, 0xf1, 0x85, 0x73, 0xd5, 0xd6, 0x7c, 0x0d, 0x6b, 0x8b, 0x49, 0xd4, 0x41,
	0x3b, 0x23, 0x17, 0x99, 0x32, 0xb1, 0xc4, 0x06, 0x2c, 0xcf, 0xdc, 0x70, 0x4a, 0x32, 0x45, 0x69,
	0xf0, 0x4a, 0x7d, 0xa9, 0x98, 0xdf, 0x15, 0x58, 0xdb, 0x8d, 0xbd, 0x11, 0x9d, 0x91, 0xfb, 0x0f,
	0xa7, 0x83, 0x16, 0x93, 0xfc, 0x56, 0xc5, 0x12, 0x9f, 0x43, 0xd9, 0x67, 0xf1, 0xd8, 0xe5, 0x72,
	0x28, 0xd6, 0xec, 0xed, 0x42, 0xfd, 0x22, 0xa9, 0x75, 0x28, 0xab, 0x9c, 0xac, 0xda, 0xdc, 0x81,
	0x72, 0x8a, 0x60, 0x1d, 0x2a, 0xdd, 0x68, 0xe6, 0x86, 0x74, 0xa8, 0x2f, 0x61, 0x15, 0x4a, 0x47,
	0xa7, 0xdd, 0x9e, 0xae, 0x60, 0x05, 0xb4, 0xfe, 0xae, 0xa3, 0xab, 0x58, 0x83, 0xe5, 0xbd, 0xd3,
	0x6e, 0xcf, 0xd6, 0x35, 0x2c, 0x83, 0x7a, 0x72, 0xaa, 0x97, 0xcc, 0x2e, 0xac, 0x17, 0xec, 0x99,
	0x91, 0x4d, 0xa8, 0xfa, 0x34, 0x24, 0x91, 0x3b, 0x26, 0x99, 0xe8, 0x22, 0x16, 0x39, 0x8f, 0x45,
	0x9c, 0x44, 0x3c, 0x91, 0xd2, 0x57, 0x9c, 0x22, 0x36, 0x7f, 0x28, 0xb0, 0xb1, 0xcf, 0xbe, 0x44,
	0x21, 0x73, 0x87, 0x87, 0x34, 0x24, 0x7f, 0xfb, 0x14, 0xd4, 0x1b, 0x4f, 0x01, 0xa1, 0x24, 0xef,
	0x3e, 0x7d, 0x24, 0x72, 0x8d, 0x3b, 0x85, 0x4b, 0x25, 0xe9, 0xd2, 0x83, 0xc2, 0xa5, 0x5b, 0xf6,
	0xbe, 0x6e, 0xd5, 0xa3, 0xc2, 0xaa, 0x7f, 0x60, 0x35, 0x5d, 0x2d, 0x18, 0xd6, 0x3f, 0x38, 0xe9,
	0xeb, 0x8a, 0x69, 0x43, 0x63, 0x91, 0xec, 0xca, 0x99, 0xe2, 0xf4, 0x99, 0x33, 0x79, 0x6c, 0x7f,
	0x55, 0xa1, 0x72, 0x94, 0x2a, 0x41, 0x1b, 0xb4, 0x63, 0x16, 0xe0, 0x46, 0x21, 0xed, 0xea, 0xc7,
	0xd0, 0x6c, 0x2c, 0x82, 0x29, 0xb3, 0xb9, 0x84, 0xcf, 0xa0, 0x24, 0x86, 0x14, 0x1b, 0xd7, 0x66,
	0x36, 0xed, 0xfa, 0xf7, 0xd6, 0x49, 0x36, 0x97, 0xf0, 0x0d, 0x54, 0xb2, 0xfb, 0xc3, 0xff, 0xee,
	0x98, 0x97, 0xa6, 0x71, 0x33, 0x51, 0xf4, 0xbf, 0x83, 0x95, 0xf9, 0xa3, 0xe2, 0xff, 0xbf, 0xb3,
	0xb3, 0xb9, 0x75, 0x47, 0x36, 0xa7, 0xfb, 0x58, 0x96, 0x3f, 0xc3, 0xa7, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x3f, 0xa6, 0x77, 0x46, 0x84, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GitilesClient is the client API for Gitiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitilesClient interface {
	// Log retrieves commit log.
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	// Refs retrieves repo refs.
	Refs(ctx context.Context, in *RefsRequest, opts ...grpc.CallOption) (*RefsResponse, error)
	// Archive retrieves archived contents of the project.
	//
	// An archive is a shallow bundle of the contents of a repository.
	//
	// DEPRECATED: Use DownloadFile to obtain plain text files.
	// TODO(pprabhu): Migrate known users to DownloadFile and delete this RPC.
	Archive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveResponse, error)
	// DownloadFile retrieves a file from the project.
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error)
}
type gitilesPRPCClient struct {
	client *prpc.Client
}

func NewGitilesPRPCClient(client *prpc.Client) GitilesClient {
	return &gitilesPRPCClient{client}
}

func (c *gitilesPRPCClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.client.Call(ctx, "gitiles.Gitiles", "Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesPRPCClient) Refs(ctx context.Context, in *RefsRequest, opts ...grpc.CallOption) (*RefsResponse, error) {
	out := new(RefsResponse)
	err := c.client.Call(ctx, "gitiles.Gitiles", "Refs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesPRPCClient) Archive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveResponse, error) {
	out := new(ArchiveResponse)
	err := c.client.Call(ctx, "gitiles.Gitiles", "Archive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesPRPCClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	out := new(DownloadFileResponse)
	err := c.client.Call(ctx, "gitiles.Gitiles", "DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type gitilesClient struct {
	cc *grpc.ClientConn
}

func NewGitilesClient(cc *grpc.ClientConn) GitilesClient {
	return &gitilesClient{cc}
}

func (c *gitilesClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/gitiles.Gitiles/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesClient) Refs(ctx context.Context, in *RefsRequest, opts ...grpc.CallOption) (*RefsResponse, error) {
	out := new(RefsResponse)
	err := c.cc.Invoke(ctx, "/gitiles.Gitiles/Refs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesClient) Archive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveResponse, error) {
	out := new(ArchiveResponse)
	err := c.cc.Invoke(ctx, "/gitiles.Gitiles/Archive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	out := new(DownloadFileResponse)
	err := c.cc.Invoke(ctx, "/gitiles.Gitiles/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitilesServer is the server API for Gitiles service.
type GitilesServer interface {
	// Log retrieves commit log.
	Log(context.Context, *LogRequest) (*LogResponse, error)
	// Refs retrieves repo refs.
	Refs(context.Context, *RefsRequest) (*RefsResponse, error)
	// Archive retrieves archived contents of the project.
	//
	// An archive is a shallow bundle of the contents of a repository.
	//
	// DEPRECATED: Use DownloadFile to obtain plain text files.
	// TODO(pprabhu): Migrate known users to DownloadFile and delete this RPC.
	Archive(context.Context, *ArchiveRequest) (*ArchiveResponse, error)
	// DownloadFile retrieves a file from the project.
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error)
}

// UnimplementedGitilesServer can be embedded to have forward compatible implementations.
type UnimplementedGitilesServer struct {
}

func (*UnimplementedGitilesServer) Log(ctx context.Context, req *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (*UnimplementedGitilesServer) Refs(ctx context.Context, req *RefsRequest) (*RefsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refs not implemented")
}
func (*UnimplementedGitilesServer) Archive(ctx context.Context, req *ArchiveRequest) (*ArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Archive not implemented")
}
func (*UnimplementedGitilesServer) DownloadFile(ctx context.Context, req *DownloadFileRequest) (*DownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}

func RegisterGitilesServer(s prpc.Registrar, srv GitilesServer) {
	s.RegisterService(&_Gitiles_serviceDesc, srv)
}

func _Gitiles_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitilesServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitiles.Gitiles/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitilesServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gitiles_Refs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitilesServer).Refs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitiles.Gitiles/Refs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitilesServer).Refs(ctx, req.(*RefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gitiles_Archive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitilesServer).Archive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitiles.Gitiles/Archive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitilesServer).Archive(ctx, req.(*ArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gitiles_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitilesServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitiles.Gitiles/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitilesServer).DownloadFile(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gitiles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitiles.Gitiles",
	HandlerType: (*GitilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _Gitiles_Log_Handler,
		},
		{
			MethodName: "Refs",
			Handler:    _Gitiles_Refs_Handler,
		},
		{
			MethodName: "Archive",
			Handler:    _Gitiles_Archive_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _Gitiles_DownloadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/common/proto/gitiles/gitiles.proto",
}
