// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/common/proto/gerrit/gerrit.proto

package gerrit

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Specifies what extra information to include in the response.
//
// Source of truth:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#query-options
type QueryOption int32

const (
	QueryOption_OPTION_UNSPECIFIED QueryOption = 0
	// A summary of each label required for submit, and approvers that have
	// granted (or rejected) with that label.
	QueryOption_LABELS QueryOption = 1
	// Detailed label information, including numeric values of all existing
	// approvals, recognized label values, values permitted to be set by the
	// current user, all reviewers by state, and reviewers that may be removed by
	// the current user.
	QueryOption_DETAILED_LABELS QueryOption = 2
	// Describe the current revision (patch set) of the change, including the
	// commit SHA-1 and URLs to fetch from.
	QueryOption_CURRENT_REVISION QueryOption = 4
	// Describe all revisions, not just current.
	QueryOption_ALL_REVISIONS QueryOption = 8
	// Parse and output all header fields from the commit object, including
	// message. Only valid when the CURRENT_REVISION or ALL_REVISIONS option is
	// selected.
	QueryOption_CURRENT_COMMIT QueryOption = 16
	// Parse and output all header fields from the output revisions. If only
	// CURRENT_REVISION was requested then only the current revision’s commit data
	// will be output.
	QueryOption_ALL_COMMITS QueryOption = 32
	// List files modified by the commit and magic files, including basic line
	// counts inserted/deleted per file. Only valid when the CURRENT_REVISION or
	// ALL_REVISIONS option is selected.
	QueryOption_CURRENT_FILES QueryOption = 64
	// List files modified by the commit and magic files, including basic line
	// counts inserted/deleted per file. If only the CURRENT_REVISION was
	// requested then only that commit’s modified files will be output.
	QueryOption_ALL_FILES QueryOption = 128
	// Include _account_id, email and username fields when referencing accounts.
	QueryOption_DETAILED_ACCOUNTS QueryOption = 256
	// Include updates to reviewers set as ReviewerUpdateInfo entities.
	QueryOption_REVIEWER_UPDATES QueryOption = 512
	// Include messages associated with the change.
	QueryOption_MESSAGES QueryOption = 1024
	// Include information on available actions for the change and its current
	// revision. Ignored if the caller is not authenticated.
	QueryOption_CURRENT_ACTIONS QueryOption = 2048
	// Include information on available change actions for the change. Ignored if
	// the caller is not authenticated.
	QueryOption_CHANGE_ACTIONS QueryOption = 4096
	// Include the reviewed field if all of the following are true:
	// - the change is open
	// - the caller is authenticated
	// - the caller has commented on the change more recently than the last update
	//   from the change owner, i.e. this change would show up in the results of
	//   reviewedby:self.
	QueryOption_REVIEWED QueryOption = 8192
	// Skip the mergeable field in ChangeInfo. For fast moving projects, this
	// field must be recomputed often, which is slow for projects with big trees.
	QueryOption_SKIP_MERGEABLE QueryOption = 16384
	// Include the submittable field in ChangeInfo, which can be used to tell if
	// the change is reviewed and ready for submit.
	QueryOption_SUBMITTABLE QueryOption = 32768
	// Include the web_links field in CommitInfo, therefore only valid in
	// combination with CURRENT_COMMIT or ALL_COMMITS.
	QueryOption_WEB_LINKS QueryOption = 65536
	// Include potential problems with the change.
	QueryOption_CHECK QueryOption = 131072
	// Include the full commit message with Gerrit-specific commit footers in the
	// RevisionInfo.
	QueryOption_COMMIT_FOOTERS QueryOption = 262144
	// Include push certificate information in the RevisionInfo. Ignored if signed
	// push is not enabled on the server.
	QueryOption_PUSH_CERTIFICATES QueryOption = 524288
	// Include references to external tracking systems as TrackingIdInfo.
	QueryOption_TRACKING_IDS QueryOption = 1048576
	// Include the commands field in the FetchInfo for revisions. Only valid when
	// the CURRENT_REVISION or ALL_REVISIONS option is selected.
	QueryOption_DOWNLOAD_COMMANDS QueryOption = 2097152
)

var QueryOption_name = map[int32]string{
	0:       "OPTION_UNSPECIFIED",
	1:       "LABELS",
	2:       "DETAILED_LABELS",
	4:       "CURRENT_REVISION",
	8:       "ALL_REVISIONS",
	16:      "CURRENT_COMMIT",
	32:      "ALL_COMMITS",
	64:      "CURRENT_FILES",
	128:     "ALL_FILES",
	256:     "DETAILED_ACCOUNTS",
	512:     "REVIEWER_UPDATES",
	1024:    "MESSAGES",
	2048:    "CURRENT_ACTIONS",
	4096:    "CHANGE_ACTIONS",
	8192:    "REVIEWED",
	16384:   "SKIP_MERGEABLE",
	32768:   "SUBMITTABLE",
	65536:   "WEB_LINKS",
	131072:  "CHECK",
	262144:  "COMMIT_FOOTERS",
	524288:  "PUSH_CERTIFICATES",
	1048576: "TRACKING_IDS",
	2097152: "DOWNLOAD_COMMANDS",
}

var QueryOption_value = map[string]int32{
	"OPTION_UNSPECIFIED": 0,
	"LABELS":             1,
	"DETAILED_LABELS":    2,
	"CURRENT_REVISION":   4,
	"ALL_REVISIONS":      8,
	"CURRENT_COMMIT":     16,
	"ALL_COMMITS":        32,
	"CURRENT_FILES":      64,
	"ALL_FILES":          128,
	"DETAILED_ACCOUNTS":  256,
	"REVIEWER_UPDATES":   512,
	"MESSAGES":           1024,
	"CURRENT_ACTIONS":    2048,
	"CHANGE_ACTIONS":     4096,
	"REVIEWED":           8192,
	"SKIP_MERGEABLE":     16384,
	"SUBMITTABLE":        32768,
	"WEB_LINKS":          65536,
	"CHECK":              131072,
	"COMMIT_FOOTERS":     262144,
	"PUSH_CERTIFICATES":  524288,
	"TRACKING_IDS":       1048576,
	"DOWNLOAD_COMMANDS":  2097152,
}

func (x QueryOption) String() string {
	return proto.EnumName(QueryOption_name, int32(x))
}

func (QueryOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{0}
}

type MergeableStrategy int32

const (
	MergeableStrategy_MERGEABLE_STRATEGY_UNSPECIFIED MergeableStrategy = 0
	MergeableStrategy_RECURSIVE                      MergeableStrategy = 1
	MergeableStrategy_RESOLVE                        MergeableStrategy = 2
	MergeableStrategy_SIMPLE_TWO_WAY_IN_CORE         MergeableStrategy = 3
	MergeableStrategy_OURS                           MergeableStrategy = 4
	MergeableStrategy_THEIRS                         MergeableStrategy = 5
)

var MergeableStrategy_name = map[int32]string{
	0: "MERGEABLE_STRATEGY_UNSPECIFIED",
	1: "RECURSIVE",
	2: "RESOLVE",
	3: "SIMPLE_TWO_WAY_IN_CORE",
	4: "OURS",
	5: "THEIRS",
}

var MergeableStrategy_value = map[string]int32{
	"MERGEABLE_STRATEGY_UNSPECIFIED": 0,
	"RECURSIVE":                      1,
	"RESOLVE":                        2,
	"SIMPLE_TWO_WAY_IN_CORE":         3,
	"OURS":                           4,
	"THEIRS":                         5,
}

func (x MergeableStrategy) String() string {
	return proto.EnumName(MergeableStrategy_name, int32(x))
}

func (MergeableStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{1}
}

type ChangeInfo_Status int32

const (
	ChangeInfo_STATUS_INVALID ChangeInfo_Status = 0
	ChangeInfo_NEW            ChangeInfo_Status = 1
	ChangeInfo_MERGED         ChangeInfo_Status = 2
	ChangeInfo_ABANDONED      ChangeInfo_Status = 3
)

var ChangeInfo_Status_name = map[int32]string{
	0: "STATUS_INVALID",
	1: "NEW",
	2: "MERGED",
	3: "ABANDONED",
}

var ChangeInfo_Status_value = map[string]int32{
	"STATUS_INVALID": 0,
	"NEW":            1,
	"MERGED":         2,
	"ABANDONED":      3,
}

func (x ChangeInfo_Status) String() string {
	return proto.EnumName(ChangeInfo_Status_name, int32(x))
}

func (ChangeInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{2, 0}
}

// The kind of change for this revision.
type RevisionInfo_Kind int32

const (
	RevisionInfo_KIND_INVALID              RevisionInfo_Kind = 0
	RevisionInfo_REWORK                    RevisionInfo_Kind = 1
	RevisionInfo_TRIVIAL_REBASE            RevisionInfo_Kind = 2
	RevisionInfo_MERGE_FIRST_PARENT_UPDATE RevisionInfo_Kind = 3
	RevisionInfo_NO_CODE_CHANGE            RevisionInfo_Kind = 4
	RevisionInfo_NO_CHANGE                 RevisionInfo_Kind = 5
)

var RevisionInfo_Kind_name = map[int32]string{
	0: "KIND_INVALID",
	1: "REWORK",
	2: "TRIVIAL_REBASE",
	3: "MERGE_FIRST_PARENT_UPDATE",
	4: "NO_CODE_CHANGE",
	5: "NO_CHANGE",
}

var RevisionInfo_Kind_value = map[string]int32{
	"KIND_INVALID":              0,
	"REWORK":                    1,
	"TRIVIAL_REBASE":            2,
	"MERGE_FIRST_PARENT_UPDATE": 3,
	"NO_CODE_CHANGE":            4,
	"NO_CHANGE":                 5,
}

func (x RevisionInfo_Kind) String() string {
	return proto.EnumName(RevisionInfo_Kind_name, int32(x))
}

func (RevisionInfo_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{3, 0}
}

type FileInfo_Status int32

const (
	FileInfo_M FileInfo_Status = 0
	FileInfo_A FileInfo_Status = 1
	FileInfo_D FileInfo_Status = 2
	FileInfo_R FileInfo_Status = 3
	FileInfo_C FileInfo_Status = 4
	FileInfo_W FileInfo_Status = 5
)

var FileInfo_Status_name = map[int32]string{
	0: "M",
	1: "A",
	2: "D",
	3: "R",
	4: "C",
	5: "W",
}

var FileInfo_Status_value = map[string]int32{
	"M": 0,
	"A": 1,
	"D": 2,
	"R": 3,
	"C": 4,
	"W": 5,
}

func (x FileInfo_Status) String() string {
	return proto.EnumName(FileInfo_Status_name, int32(x))
}

func (FileInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{5, 0}
}

type MergeableInfo_SubmitType int32

const (
	MergeableInfo_SUBMIT_TYPE_UNSPECIFIED MergeableInfo_SubmitType = 0
	MergeableInfo_MERGE_IF_NECESSARY      MergeableInfo_SubmitType = 1
	MergeableInfo_FAST_FORWARD_ONLY       MergeableInfo_SubmitType = 2
	MergeableInfo_REBASE_IF_NECESSARY     MergeableInfo_SubmitType = 3
	MergeableInfo_REBASE_ALWAYS           MergeableInfo_SubmitType = 4
	MergeableInfo_MERGE_ALWAYS            MergeableInfo_SubmitType = 5
	MergeableInfo_CHERRY_PICK             MergeableInfo_SubmitType = 6
)

var MergeableInfo_SubmitType_name = map[int32]string{
	0: "SUBMIT_TYPE_UNSPECIFIED",
	1: "MERGE_IF_NECESSARY",
	2: "FAST_FORWARD_ONLY",
	3: "REBASE_IF_NECESSARY",
	4: "REBASE_ALWAYS",
	5: "MERGE_ALWAYS",
	6: "CHERRY_PICK",
}

var MergeableInfo_SubmitType_value = map[string]int32{
	"SUBMIT_TYPE_UNSPECIFIED": 0,
	"MERGE_IF_NECESSARY":      1,
	"FAST_FORWARD_ONLY":       2,
	"REBASE_IF_NECESSARY":     3,
	"REBASE_ALWAYS":           4,
	"MERGE_ALWAYS":            5,
	"CHERRY_PICK":             6,
}

func (x MergeableInfo_SubmitType) String() string {
	return proto.EnumName(MergeableInfo_SubmitType_name, int32(x))
}

func (MergeableInfo_SubmitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{15, 0}
}

// Request to get information for a single change.
//
// Encodes path arguments and query options described at
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-change
type GetChangeRequest struct {
	// Change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// What to include in the response.
	Options              []QueryOption `protobuf:"varint,2,rep,packed,name=options,proto3,enum=gerrit.QueryOption" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetChangeRequest) Reset()         { *m = GetChangeRequest{} }
func (m *GetChangeRequest) String() string { return proto.CompactTextString(m) }
func (*GetChangeRequest) ProtoMessage()    {}
func (*GetChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{0}
}

func (m *GetChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetChangeRequest.Unmarshal(m, b)
}
func (m *GetChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetChangeRequest.Marshal(b, m, deterministic)
}
func (m *GetChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChangeRequest.Merge(m, src)
}
func (m *GetChangeRequest) XXX_Size() int {
	return xxx_messageInfo_GetChangeRequest.Size(m)
}
func (m *GetChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetChangeRequest proto.InternalMessageInfo

func (m *GetChangeRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *GetChangeRequest) GetOptions() []QueryOption {
	if m != nil {
		return m.Options
	}
	return nil
}

// Information about an account.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-accounts.html#account-info
type AccountInfo struct {
	// The full name of the user.
	// Only set if detailed account information is requested.
	// See option DETAILED_ACCOUNTS for change queries
	// and option DETAILS for account queries.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The email address the user prefers to be contacted through.
	// Only set if detailed account information is requested.
	// See option DETAILED_ACCOUNTS for change queries
	// and options DETAILS and ALL_EMAILS for account queries.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// A list of the secondary email addresses of the user.
	// Only set for account queries when the ALL_EMAILS option or the suggest
	// parameter is set. Secondary emails are only included if the calling user
	// has the Modify Account, and hence is allowed to see secondary emails of
	// other users.
	SecondaryEmails []string `protobuf:"bytes,3,rep,name=secondary_emails,json=secondaryEmails,proto3" json:"secondary_emails,omitempty"`
	// The username of the user.
	// Only set if detailed account information is requested.
	// See option DETAILED_ACCOUNTS for change queries
	// and option DETAILS for account queries.
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountInfo) Reset()         { *m = AccountInfo{} }
func (m *AccountInfo) String() string { return proto.CompactTextString(m) }
func (*AccountInfo) ProtoMessage()    {}
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{1}
}

func (m *AccountInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountInfo.Unmarshal(m, b)
}
func (m *AccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountInfo.Marshal(b, m, deterministic)
}
func (m *AccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountInfo.Merge(m, src)
}
func (m *AccountInfo) XXX_Size() int {
	return xxx_messageInfo_AccountInfo.Size(m)
}
func (m *AccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccountInfo proto.InternalMessageInfo

func (m *AccountInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccountInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AccountInfo) GetSecondaryEmails() []string {
	if m != nil {
		return m.SecondaryEmails
	}
	return nil
}

func (m *AccountInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Information about a change.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#change-info
type ChangeInfo struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The owner of the change.
	Owner *AccountInfo `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The project of this change. For example, "chromium/src".
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Ref that this change targets, e.g.: refs/heads/master
	//
	// Note that the gerrit API may return short branch name (master instead of
	// refs/heads/master) but we convert it to a ref for consistency across the
	// API.
	Ref    string            `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	Status ChangeInfo_Status `protobuf:"varint,5,opt,name=status,proto3,enum=gerrit.ChangeInfo_Status" json:"status,omitempty"`
	// Current revision of the change.
	//
	// See:
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-id
	CurrentRevision string `protobuf:"bytes,6,opt,name=current_revision,json=currentRevision,proto3" json:"current_revision,omitempty"`
	// A map of patch set commit IDs to RevisionInfos.
	//
	// Only set if revision information is requested.
	Revisions map[string]*RevisionInfo `protobuf:"bytes,7,rep,name=revisions,proto3" json:"revisions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map of label names to LabelInfos.
	//
	// Only set if label info is requested.
	Labels               map[string]*LabelInfo `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ChangeInfo) Reset()         { *m = ChangeInfo{} }
func (m *ChangeInfo) String() string { return proto.CompactTextString(m) }
func (*ChangeInfo) ProtoMessage()    {}
func (*ChangeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{2}
}

func (m *ChangeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeInfo.Unmarshal(m, b)
}
func (m *ChangeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeInfo.Marshal(b, m, deterministic)
}
func (m *ChangeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeInfo.Merge(m, src)
}
func (m *ChangeInfo) XXX_Size() int {
	return xxx_messageInfo_ChangeInfo.Size(m)
}
func (m *ChangeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeInfo proto.InternalMessageInfo

func (m *ChangeInfo) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ChangeInfo) GetOwner() *AccountInfo {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *ChangeInfo) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ChangeInfo) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *ChangeInfo) GetStatus() ChangeInfo_Status {
	if m != nil {
		return m.Status
	}
	return ChangeInfo_STATUS_INVALID
}

func (m *ChangeInfo) GetCurrentRevision() string {
	if m != nil {
		return m.CurrentRevision
	}
	return ""
}

func (m *ChangeInfo) GetRevisions() map[string]*RevisionInfo {
	if m != nil {
		return m.Revisions
	}
	return nil
}

func (m *ChangeInfo) GetLabels() map[string]*LabelInfo {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Information about a patch set.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-info
type RevisionInfo struct {
	// The kind of this patch set.
	Kind RevisionInfo_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=gerrit.RevisionInfo_Kind" json:"kind,omitempty"`
	// The patch set number.
	Number int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// The uploader of this patch set.
	Uploader *AccountInfo `protobuf:"bytes,3,opt,name=uploader,proto3" json:"uploader,omitempty"`
	// The Git reference for the patch set.
	Ref string `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	// A map of file paths to FileInfos.
	//
	// Only set if file information is requested.
	Files                map[string]*FileInfo `protobuf:"bytes,6,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RevisionInfo) Reset()         { *m = RevisionInfo{} }
func (m *RevisionInfo) String() string { return proto.CompactTextString(m) }
func (*RevisionInfo) ProtoMessage()    {}
func (*RevisionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{3}
}

func (m *RevisionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevisionInfo.Unmarshal(m, b)
}
func (m *RevisionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevisionInfo.Marshal(b, m, deterministic)
}
func (m *RevisionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevisionInfo.Merge(m, src)
}
func (m *RevisionInfo) XXX_Size() int {
	return xxx_messageInfo_RevisionInfo.Size(m)
}
func (m *RevisionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RevisionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RevisionInfo proto.InternalMessageInfo

func (m *RevisionInfo) GetKind() RevisionInfo_Kind {
	if m != nil {
		return m.Kind
	}
	return RevisionInfo_KIND_INVALID
}

func (m *RevisionInfo) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *RevisionInfo) GetUploader() *AccountInfo {
	if m != nil {
		return m.Uploader
	}
	return nil
}

func (m *RevisionInfo) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *RevisionInfo) GetFiles() map[string]*FileInfo {
	if m != nil {
		return m.Files
	}
	return nil
}

// Information about a Label.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#label-info
type LabelInfo struct {
	// Whether the label is optional.
	Optional bool `protobuf:"varint,1,opt,name=optional,proto3" json:"optional,omitempty"`
	// One user who approved this label on the change.
	Approved *AccountInfo `protobuf:"bytes,2,opt,name=approved,proto3" json:"approved,omitempty"`
	// One user who rejected this label on the change.
	Rejected *AccountInfo `protobuf:"bytes,3,opt,name=rejected,proto3" json:"rejected,omitempty"`
	// One user who recommended this label on the change.
	Recommended *AccountInfo `protobuf:"bytes,4,opt,name=recommended,proto3" json:"recommended,omitempty"`
	// One user who disliked this label on the change.
	Disliked *AccountInfo `protobuf:"bytes,5,opt,name=disliked,proto3" json:"disliked,omitempty"`
	// If true, the label blocks submit operation.
	Blocking bool `protobuf:"varint,6,opt,name=blocking,proto3" json:"blocking,omitempty"`
	// The voting value of the user who recommended/disliked this label on the
	// change if it is not "+1"/"-1".
	Value int32 `protobuf:"varint,7,opt,name=value,proto3" json:"value,omitempty"`
	// The default voting value for the label.
	DefaultValue         int32    `protobuf:"varint,8,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelInfo) Reset()         { *m = LabelInfo{} }
func (m *LabelInfo) String() string { return proto.CompactTextString(m) }
func (*LabelInfo) ProtoMessage()    {}
func (*LabelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{4}
}

func (m *LabelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelInfo.Unmarshal(m, b)
}
func (m *LabelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelInfo.Marshal(b, m, deterministic)
}
func (m *LabelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelInfo.Merge(m, src)
}
func (m *LabelInfo) XXX_Size() int {
	return xxx_messageInfo_LabelInfo.Size(m)
}
func (m *LabelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LabelInfo proto.InternalMessageInfo

func (m *LabelInfo) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *LabelInfo) GetApproved() *AccountInfo {
	if m != nil {
		return m.Approved
	}
	return nil
}

func (m *LabelInfo) GetRejected() *AccountInfo {
	if m != nil {
		return m.Rejected
	}
	return nil
}

func (m *LabelInfo) GetRecommended() *AccountInfo {
	if m != nil {
		return m.Recommended
	}
	return nil
}

func (m *LabelInfo) GetDisliked() *AccountInfo {
	if m != nil {
		return m.Disliked
	}
	return nil
}

func (m *LabelInfo) GetBlocking() bool {
	if m != nil {
		return m.Blocking
	}
	return false
}

func (m *LabelInfo) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *LabelInfo) GetDefaultValue() int32 {
	if m != nil {
		return m.DefaultValue
	}
	return 0
}

// Information about a file in a patch set.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#file-info
type FileInfo struct {
	// Status of the file.
	Status FileInfo_Status `protobuf:"varint,1,opt,name=status,proto3,enum=gerrit.FileInfo_Status" json:"status,omitempty"`
	// Whether the file is binary.
	Binary bool `protobuf:"varint,2,opt,name=binary,proto3" json:"binary,omitempty"`
	// The old file path; only set if renamed or copied.
	OldPath string `protobuf:"bytes,3,opt,name=old_path,json=oldPath,proto3" json:"old_path,omitempty"`
	// Number of lines inserted.
	LinesInserted int32 `protobuf:"varint,4,opt,name=lines_inserted,json=linesInserted,proto3" json:"lines_inserted,omitempty"`
	// Number of lines deleted.
	LinesDeleted int32 `protobuf:"varint,5,opt,name=lines_deleted,json=linesDeleted,proto3" json:"lines_deleted,omitempty"`
	// Number of bytes by which the file size increased/decreased.
	SizeDelta int64 `protobuf:"varint,6,opt,name=size_delta,json=sizeDelta,proto3" json:"size_delta,omitempty"`
	// File size in bytes.
	Size                 int64    `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{5}
}

func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfo.Unmarshal(m, b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return xxx_messageInfo_FileInfo.Size(m)
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetStatus() FileInfo_Status {
	if m != nil {
		return m.Status
	}
	return FileInfo_M
}

func (m *FileInfo) GetBinary() bool {
	if m != nil {
		return m.Binary
	}
	return false
}

func (m *FileInfo) GetOldPath() string {
	if m != nil {
		return m.OldPath
	}
	return ""
}

func (m *FileInfo) GetLinesInserted() int32 {
	if m != nil {
		return m.LinesInserted
	}
	return 0
}

func (m *FileInfo) GetLinesDeleted() int32 {
	if m != nil {
		return m.LinesDeleted
	}
	return 0
}

func (m *FileInfo) GetSizeDelta() int64 {
	if m != nil {
		return m.SizeDelta
	}
	return 0
}

func (m *FileInfo) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

// Information for creating a new change.
//
// Fields are a subset of:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#change-input
type CreateChangeRequest struct {
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Ref to base the new change at. e.g. refs/heads/master
	Ref     string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Subject string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	// 40-digit hex SHA-1 of the git commit which will be the parent commit of the
	// newly created change. If set, it must be a merged commit on the destination
	// branch.
	BaseCommit           string   `protobuf:"bytes,4,opt,name=base_commit,json=baseCommit,proto3" json:"base_commit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateChangeRequest) Reset()         { *m = CreateChangeRequest{} }
func (m *CreateChangeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateChangeRequest) ProtoMessage()    {}
func (*CreateChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{6}
}

func (m *CreateChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateChangeRequest.Unmarshal(m, b)
}
func (m *CreateChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateChangeRequest.Marshal(b, m, deterministic)
}
func (m *CreateChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChangeRequest.Merge(m, src)
}
func (m *CreateChangeRequest) XXX_Size() int {
	return xxx_messageInfo_CreateChangeRequest.Size(m)
}
func (m *CreateChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChangeRequest proto.InternalMessageInfo

func (m *CreateChangeRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *CreateChangeRequest) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *CreateChangeRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *CreateChangeRequest) GetBaseCommit() string {
	if m != nil {
		return m.BaseCommit
	}
	return ""
}

// Information to submit a change.
//
// This is a placeholder to support the arguments from:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-change
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-input
type SubmitChangeRequest struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitChangeRequest) Reset()         { *m = SubmitChangeRequest{} }
func (m *SubmitChangeRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitChangeRequest) ProtoMessage()    {}
func (*SubmitChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{7}
}

func (m *SubmitChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitChangeRequest.Unmarshal(m, b)
}
func (m *SubmitChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitChangeRequest.Marshal(b, m, deterministic)
}
func (m *SubmitChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitChangeRequest.Merge(m, src)
}
func (m *SubmitChangeRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitChangeRequest.Size(m)
}
func (m *SubmitChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitChangeRequest proto.InternalMessageInfo

func (m *SubmitChangeRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *SubmitChangeRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

// Information for changing contents of single file in a change edit.
//
// Fields encode the path arguments of
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#put-edit-file
type ChangeEditFileContentRequest struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Path to the file to edit inside the project.
	FilePath string `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// New content of the file. Overwrites existing contents entirely.
	Content              []byte   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeEditFileContentRequest) Reset()         { *m = ChangeEditFileContentRequest{} }
func (m *ChangeEditFileContentRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeEditFileContentRequest) ProtoMessage()    {}
func (*ChangeEditFileContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{8}
}

func (m *ChangeEditFileContentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeEditFileContentRequest.Unmarshal(m, b)
}
func (m *ChangeEditFileContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeEditFileContentRequest.Marshal(b, m, deterministic)
}
func (m *ChangeEditFileContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeEditFileContentRequest.Merge(m, src)
}
func (m *ChangeEditFileContentRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeEditFileContentRequest.Size(m)
}
func (m *ChangeEditFileContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeEditFileContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeEditFileContentRequest proto.InternalMessageInfo

func (m *ChangeEditFileContentRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ChangeEditFileContentRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ChangeEditFileContentRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *ChangeEditFileContentRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// Information for deleting contents of single file in a change edit.
//
// Fields encode the path arguments of
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#delete-edit-file
type DeleteEditFileContentRequest struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Path to the file to edit inside the project.
	FilePath             string   `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteEditFileContentRequest) Reset()         { *m = DeleteEditFileContentRequest{} }
func (m *DeleteEditFileContentRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEditFileContentRequest) ProtoMessage()    {}
func (*DeleteEditFileContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{9}
}

func (m *DeleteEditFileContentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteEditFileContentRequest.Unmarshal(m, b)
}
func (m *DeleteEditFileContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteEditFileContentRequest.Marshal(b, m, deterministic)
}
func (m *DeleteEditFileContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEditFileContentRequest.Merge(m, src)
}
func (m *DeleteEditFileContentRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteEditFileContentRequest.Size(m)
}
func (m *DeleteEditFileContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEditFileContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEditFileContentRequest proto.InternalMessageInfo

func (m *DeleteEditFileContentRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *DeleteEditFileContentRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *DeleteEditFileContentRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

// Information for publishing a change edit.
//
// This is a placeholder to support the arguments from:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-edit
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-change-edit-input
type ChangeEditPublishRequest struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeEditPublishRequest) Reset()         { *m = ChangeEditPublishRequest{} }
func (m *ChangeEditPublishRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeEditPublishRequest) ProtoMessage()    {}
func (*ChangeEditPublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{10}
}

func (m *ChangeEditPublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeEditPublishRequest.Unmarshal(m, b)
}
func (m *ChangeEditPublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeEditPublishRequest.Marshal(b, m, deterministic)
}
func (m *ChangeEditPublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeEditPublishRequest.Merge(m, src)
}
func (m *ChangeEditPublishRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeEditPublishRequest.Size(m)
}
func (m *ChangeEditPublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeEditPublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeEditPublishRequest proto.InternalMessageInfo

func (m *ChangeEditPublishRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ChangeEditPublishRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

// Information for abandoning a change.
//
// Fields are a subset of arguments from:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-change
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-input
type AbandonChangeRequest struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbandonChangeRequest) Reset()         { *m = AbandonChangeRequest{} }
func (m *AbandonChangeRequest) String() string { return proto.CompactTextString(m) }
func (*AbandonChangeRequest) ProtoMessage()    {}
func (*AbandonChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{11}
}

func (m *AbandonChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbandonChangeRequest.Unmarshal(m, b)
}
func (m *AbandonChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbandonChangeRequest.Marshal(b, m, deterministic)
}
func (m *AbandonChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbandonChangeRequest.Merge(m, src)
}
func (m *AbandonChangeRequest) XXX_Size() int {
	return xxx_messageInfo_AbandonChangeRequest.Size(m)
}
func (m *AbandonChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbandonChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AbandonChangeRequest proto.InternalMessageInfo

func (m *AbandonChangeRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *AbandonChangeRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *AbandonChangeRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Information to set various review bits on a change
//
// Fields are a subset of arguments from:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#set-review
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#review-input
type SetReviewRequest struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Unique ID for the revision to query.
	// See
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-id
	RevisionId string `protobuf:"bytes,3,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Message to be added to the change along with this review.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// labels to add, e.g.:
	//   {
	//     "Code-Review": -1,
	//     "Verified": 1,
	//   }
	Labels               map[string]int32 `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SetReviewRequest) Reset()         { *m = SetReviewRequest{} }
func (m *SetReviewRequest) String() string { return proto.CompactTextString(m) }
func (*SetReviewRequest) ProtoMessage()    {}
func (*SetReviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{12}
}

func (m *SetReviewRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetReviewRequest.Unmarshal(m, b)
}
func (m *SetReviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetReviewRequest.Marshal(b, m, deterministic)
}
func (m *SetReviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReviewRequest.Merge(m, src)
}
func (m *SetReviewRequest) XXX_Size() int {
	return xxx_messageInfo_SetReviewRequest.Size(m)
}
func (m *SetReviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetReviewRequest proto.InternalMessageInfo

func (m *SetReviewRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *SetReviewRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *SetReviewRequest) GetRevisionId() string {
	if m != nil {
		return m.RevisionId
	}
	return ""
}

func (m *SetReviewRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SetReviewRequest) GetLabels() map[string]int32 {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Information returned by a SetReview RPC.
//
// Fields are a subset of:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#review-result
type ReviewResult struct {
	// Map of labels to values after the review was posted. Null if any reviewer
	// additions were rejected.
	Labels               map[string]int32 `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ReviewResult) Reset()         { *m = ReviewResult{} }
func (m *ReviewResult) String() string { return proto.CompactTextString(m) }
func (*ReviewResult) ProtoMessage()    {}
func (*ReviewResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{13}
}

func (m *ReviewResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReviewResult.Unmarshal(m, b)
}
func (m *ReviewResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReviewResult.Marshal(b, m, deterministic)
}
func (m *ReviewResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReviewResult.Merge(m, src)
}
func (m *ReviewResult) XXX_Size() int {
	return xxx_messageInfo_ReviewResult.Size(m)
}
func (m *ReviewResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ReviewResult.DiscardUnknown(m)
}

var xxx_messageInfo_ReviewResult proto.InternalMessageInfo

func (m *ReviewResult) GetLabels() map[string]int32 {
	if m != nil {
		return m.Labels
	}
	return nil
}

type GetMergeableRequest struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Unique ID for the revision to query.
	// See
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-id
	RevisionId string `protobuf:"bytes,3,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// The source to merge from, e.g. a complete or abbreviated commit SHA-1, a
	// complete reference name, a short reference name under refs/heads,
	// refs/tags, or refs/remotes namespace, etc.
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// The strategy of the merge.
	Strategy             MergeableStrategy `protobuf:"varint,5,opt,name=strategy,proto3,enum=gerrit.MergeableStrategy" json:"strategy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetMergeableRequest) Reset()         { *m = GetMergeableRequest{} }
func (m *GetMergeableRequest) String() string { return proto.CompactTextString(m) }
func (*GetMergeableRequest) ProtoMessage()    {}
func (*GetMergeableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{14}
}

func (m *GetMergeableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMergeableRequest.Unmarshal(m, b)
}
func (m *GetMergeableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMergeableRequest.Marshal(b, m, deterministic)
}
func (m *GetMergeableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMergeableRequest.Merge(m, src)
}
func (m *GetMergeableRequest) XXX_Size() int {
	return xxx_messageInfo_GetMergeableRequest.Size(m)
}
func (m *GetMergeableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMergeableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMergeableRequest proto.InternalMessageInfo

func (m *GetMergeableRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *GetMergeableRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *GetMergeableRequest) GetRevisionId() string {
	if m != nil {
		return m.RevisionId
	}
	return ""
}

func (m *GetMergeableRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *GetMergeableRequest) GetStrategy() MergeableStrategy {
	if m != nil {
		return m.Strategy
	}
	return MergeableStrategy_MERGEABLE_STRATEGY_UNSPECIFIED
}

// Contains information about the mergeability of a change.
//
// See
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#mergeable-info
type MergeableInfo struct {
	// Submit type used for this change.
	SubmitType MergeableInfo_SubmitType `protobuf:"varint,1,opt,name=submit_type,json=submitType,proto3,enum=gerrit.MergeableInfo_SubmitType" json:"submit_type,omitempty"`
	// The strategy of the merge.
	Strategy MergeableStrategy `protobuf:"varint,2,opt,name=strategy,proto3,enum=gerrit.MergeableStrategy" json:"strategy,omitempty"`
	// true if this change is cleanly mergeable, false otherwise.
	Mergeable bool `protobuf:"varint,3,opt,name=mergeable,proto3" json:"mergeable,omitempty"`
	// true if this change is already merged, false otherwise.
	CommitMerged bool `protobuf:"varint,4,opt,name=commit_merged,json=commitMerged,proto3" json:"commit_merged,omitempty"`
	// true if the content of this change is already merged, false otherwise.
	ContentMerged bool `protobuf:"varint,5,opt,name=content_merged,json=contentMerged,proto3" json:"content_merged,omitempty"`
	// A list of paths with conflicts.
	Conflicts []string `protobuf:"bytes,6,rep,name=conflicts,proto3" json:"conflicts,omitempty"`
	// A list of other branch names where this change could merge cleanly.
	MergeableInto        []string `protobuf:"bytes,7,rep,name=mergeable_into,json=mergeableInto,proto3" json:"mergeable_into,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MergeableInfo) Reset()         { *m = MergeableInfo{} }
func (m *MergeableInfo) String() string { return proto.CompactTextString(m) }
func (*MergeableInfo) ProtoMessage()    {}
func (*MergeableInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{15}
}

func (m *MergeableInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MergeableInfo.Unmarshal(m, b)
}
func (m *MergeableInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MergeableInfo.Marshal(b, m, deterministic)
}
func (m *MergeableInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeableInfo.Merge(m, src)
}
func (m *MergeableInfo) XXX_Size() int {
	return xxx_messageInfo_MergeableInfo.Size(m)
}
func (m *MergeableInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeableInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MergeableInfo proto.InternalMessageInfo

func (m *MergeableInfo) GetSubmitType() MergeableInfo_SubmitType {
	if m != nil {
		return m.SubmitType
	}
	return MergeableInfo_SUBMIT_TYPE_UNSPECIFIED
}

func (m *MergeableInfo) GetStrategy() MergeableStrategy {
	if m != nil {
		return m.Strategy
	}
	return MergeableStrategy_MERGEABLE_STRATEGY_UNSPECIFIED
}

func (m *MergeableInfo) GetMergeable() bool {
	if m != nil {
		return m.Mergeable
	}
	return false
}

func (m *MergeableInfo) GetCommitMerged() bool {
	if m != nil {
		return m.CommitMerged
	}
	return false
}

func (m *MergeableInfo) GetContentMerged() bool {
	if m != nil {
		return m.ContentMerged
	}
	return false
}

func (m *MergeableInfo) GetConflicts() []string {
	if m != nil {
		return m.Conflicts
	}
	return nil
}

func (m *MergeableInfo) GetMergeableInto() []string {
	if m != nil {
		return m.MergeableInto
	}
	return nil
}

// Information for requesting the files in a change.
//
// See
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-files
type ListFilesRequest struct {
	// Change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Unique ID for the revision to query.
	// See
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-id
	RevisionId string `protobuf:"bytes,3,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Changes the response to return a list of all files (modified or unmodified)
	// that contain this substring in the path name.
	SubstringQuery string `protobuf:"bytes,4,opt,name=substring_query,json=substringQuery,proto3" json:"substring_query,omitempty"`
	// For merge commits only, this requests a diff of files against a parent
	// revision. Use value 1 to compare against a CL's target ref.
	Parent               int64    `protobuf:"varint,5,opt,name=parent,proto3" json:"parent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFilesRequest) Reset()         { *m = ListFilesRequest{} }
func (m *ListFilesRequest) String() string { return proto.CompactTextString(m) }
func (*ListFilesRequest) ProtoMessage()    {}
func (*ListFilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{16}
}

func (m *ListFilesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFilesRequest.Unmarshal(m, b)
}
func (m *ListFilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFilesRequest.Marshal(b, m, deterministic)
}
func (m *ListFilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFilesRequest.Merge(m, src)
}
func (m *ListFilesRequest) XXX_Size() int {
	return xxx_messageInfo_ListFilesRequest.Size(m)
}
func (m *ListFilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFilesRequest proto.InternalMessageInfo

func (m *ListFilesRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ListFilesRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ListFilesRequest) GetRevisionId() string {
	if m != nil {
		return m.RevisionId
	}
	return ""
}

func (m *ListFilesRequest) GetSubstringQuery() string {
	if m != nil {
		return m.SubstringQuery
	}
	return ""
}

func (m *ListFilesRequest) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

// Information about the files in a change.
//
// See
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-files
type ListFilesResponse struct {
	// A map of file paths to FileInfos.
	Files                map[string]*FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListFilesResponse) Reset()         { *m = ListFilesResponse{} }
func (m *ListFilesResponse) String() string { return proto.CompactTextString(m) }
func (*ListFilesResponse) ProtoMessage()    {}
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{17}
}

func (m *ListFilesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFilesResponse.Unmarshal(m, b)
}
func (m *ListFilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFilesResponse.Marshal(b, m, deterministic)
}
func (m *ListFilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFilesResponse.Merge(m, src)
}
func (m *ListFilesResponse) XXX_Size() int {
	return xxx_messageInfo_ListFilesResponse.Size(m)
}
func (m *ListFilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFilesResponse proto.InternalMessageInfo

func (m *ListFilesResponse) GetFiles() map[string]*FileInfo {
	if m != nil {
		return m.Files
	}
	return nil
}

func init() {
	proto.RegisterEnum("gerrit.QueryOption", QueryOption_name, QueryOption_value)
	proto.RegisterEnum("gerrit.MergeableStrategy", MergeableStrategy_name, MergeableStrategy_value)
	proto.RegisterEnum("gerrit.ChangeInfo_Status", ChangeInfo_Status_name, ChangeInfo_Status_value)
	proto.RegisterEnum("gerrit.RevisionInfo_Kind", RevisionInfo_Kind_name, RevisionInfo_Kind_value)
	proto.RegisterEnum("gerrit.FileInfo_Status", FileInfo_Status_name, FileInfo_Status_value)
	proto.RegisterEnum("gerrit.MergeableInfo_SubmitType", MergeableInfo_SubmitType_name, MergeableInfo_SubmitType_value)
	proto.RegisterType((*GetChangeRequest)(nil), "gerrit.GetChangeRequest")
	proto.RegisterType((*AccountInfo)(nil), "gerrit.AccountInfo")
	proto.RegisterType((*ChangeInfo)(nil), "gerrit.ChangeInfo")
	proto.RegisterMapType((map[string]*LabelInfo)(nil), "gerrit.ChangeInfo.LabelsEntry")
	proto.RegisterMapType((map[string]*RevisionInfo)(nil), "gerrit.ChangeInfo.RevisionsEntry")
	proto.RegisterType((*RevisionInfo)(nil), "gerrit.RevisionInfo")
	proto.RegisterMapType((map[string]*FileInfo)(nil), "gerrit.RevisionInfo.FilesEntry")
	proto.RegisterType((*LabelInfo)(nil), "gerrit.LabelInfo")
	proto.RegisterType((*FileInfo)(nil), "gerrit.FileInfo")
	proto.RegisterType((*CreateChangeRequest)(nil), "gerrit.CreateChangeRequest")
	proto.RegisterType((*SubmitChangeRequest)(nil), "gerrit.SubmitChangeRequest")
	proto.RegisterType((*ChangeEditFileContentRequest)(nil), "gerrit.ChangeEditFileContentRequest")
	proto.RegisterType((*DeleteEditFileContentRequest)(nil), "gerrit.DeleteEditFileContentRequest")
	proto.RegisterType((*ChangeEditPublishRequest)(nil), "gerrit.ChangeEditPublishRequest")
	proto.RegisterType((*AbandonChangeRequest)(nil), "gerrit.AbandonChangeRequest")
	proto.RegisterType((*SetReviewRequest)(nil), "gerrit.SetReviewRequest")
	proto.RegisterMapType((map[string]int32)(nil), "gerrit.SetReviewRequest.LabelsEntry")
	proto.RegisterType((*ReviewResult)(nil), "gerrit.ReviewResult")
	proto.RegisterMapType((map[string]int32)(nil), "gerrit.ReviewResult.LabelsEntry")
	proto.RegisterType((*GetMergeableRequest)(nil), "gerrit.GetMergeableRequest")
	proto.RegisterType((*MergeableInfo)(nil), "gerrit.MergeableInfo")
	proto.RegisterType((*ListFilesRequest)(nil), "gerrit.ListFilesRequest")
	proto.RegisterType((*ListFilesResponse)(nil), "gerrit.ListFilesResponse")
	proto.RegisterMapType((map[string]*FileInfo)(nil), "gerrit.ListFilesResponse.FilesEntry")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/common/proto/gerrit/gerrit.proto", fileDescriptor_3c6e096860f6adc3)
}

var fileDescriptor_3c6e096860f6adc3 = []byte{
	// 2050 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5f, 0x6f, 0xe3, 0xc6,
	0x11, 0x0f, 0xf5, 0xcf, 0xd2, 0xc8, 0x96, 0x57, 0x6b, 0x9f, 0x4f, 0xa7, 0xbb, 0xe4, 0x54, 0x35,
	0x6d, 0x2e, 0x07, 0xc4, 0x46, 0x5d, 0x5c, 0x91, 0xa4, 0x05, 0x62, 0x9a, 0xa2, 0x6d, 0xd6, 0xb2,
	0xa8, 0x2e, 0x29, 0x0b, 0x7e, 0x22, 0x28, 0x69, 0x2d, 0xb3, 0x47, 0x91, 0x0a, 0x49, 0x5d, 0xa0,
	0xa0, 0x28, 0x04, 0x14, 0x45, 0x3f, 0x42, 0x1f, 0xfa, 0xd4, 0x97, 0xf6, 0x1b, 0xb4, 0x5f, 0x21,
	0xef, 0xfd, 0x06, 0xfd, 0x14, 0x7d, 0x2c, 0x76, 0xf9, 0x47, 0x94, 0x2c, 0x5f, 0x83, 0x6b, 0xaf,
	0x4f, 0xe4, 0x0c, 0x7f, 0x3b, 0x3b, 0x3b, 0x33, 0x9c, 0xf9, 0x91, 0xf0, 0x6a, 0xec, 0x1e, 0x0e,
	0xef, 0x3c, 0x77, 0x62, 0xcd, 0x26, 0x87, 0xae, 0x37, 0x3e, 0xb2, 0x67, 0x43, 0xeb, 0x68, 0xe8,
	0x4e, 0x26, 0xae, 0x73, 0x34, 0xf5, 0xdc, 0xc0, 0x3d, 0x1a, 0x53, 0xcf, 0xb3, 0x82, 0xe8, 0x72,
	0xc8, 0x75, 0xb8, 0x10, 0x4a, 0xf5, 0xa7, 0x63, 0xd7, 0x1d, 0xdb, 0x34, 0x44, 0x0e, 0x66, 0xb7,
	0x47, 0x74, 0x32, 0x0d, 0xe6, 0x21, 0xa8, 0x79, 0x03, 0xe8, 0x9c, 0x06, 0xd2, 0x9d, 0xe9, 0x8c,
	0x29, 0xa1, 0x5f, 0xcf, 0xa8, 0x1f, 0xe0, 0x03, 0x28, 0x38, 0xb3, 0xc9, 0x80, 0x7a, 0x35, 0xa1,
	0x21, 0xbc, 0xc8, 0x92, 0x48, 0xc2, 0x9f, 0xc1, 0x96, 0x3b, 0x0d, 0x2c, 0xd7, 0xf1, 0x6b, 0x99,
	0x46, 0xf6, 0x45, 0xe5, 0x78, 0xef, 0x30, 0xda, 0xf0, 0x57, 0x33, 0xea, 0xcd, 0x55, 0xfe, 0x8c,
	0xc4, 0x98, 0xe6, 0x6f, 0xa1, 0x2c, 0x0e, 0x87, 0xee, 0xcc, 0x09, 0x14, 0xe7, 0xd6, 0xc5, 0x18,
	0x72, 0x8e, 0x39, 0xa1, 0xdc, 0x66, 0x89, 0xf0, 0x7b, 0xbc, 0x0f, 0x79, 0x3a, 0x31, 0x2d, 0xbb,
	0x96, 0xe1, 0xca, 0x50, 0xc0, 0x9f, 0x02, 0xf2, 0xe9, 0xd0, 0x75, 0x46, 0xa6, 0x37, 0x37, 0xb8,
	0xca, 0xaf, 0x65, 0x1b, 0xd9, 0x17, 0x25, 0xb2, 0x9b, 0xe8, 0x65, 0xae, 0xc6, 0x75, 0x28, 0xce,
	0x7c, 0xea, 0x71, 0xc3, 0x39, 0x6e, 0x23, 0x91, 0x9b, 0x7f, 0xcb, 0x01, 0x84, 0x07, 0xe3, 0xfb,
	0x3f, 0x74, 0xaa, 0x4f, 0x21, 0xef, 0x7e, 0xe3, 0x50, 0x8f, 0xfb, 0x50, 0x5e, 0x9e, 0x29, 0xe5,
	0x3b, 0x09, 0x11, 0xb8, 0x06, 0x5b, 0x53, 0xcf, 0xfd, 0x35, 0x1d, 0x06, 0xb5, 0x2c, 0xdf, 0x2c,
	0x16, 0x31, 0x82, 0xac, 0x47, 0x6f, 0x23, 0x17, 0xd8, 0x2d, 0xfe, 0x09, 0x14, 0xfc, 0xc0, 0x0c,
	0x66, 0x7e, 0x2d, 0xdf, 0x10, 0x5e, 0x54, 0x8e, 0x9f, 0xc4, 0x76, 0x97, 0x2e, 0x1d, 0x6a, 0x1c,
	0x40, 0x22, 0x20, 0x3b, 0xf7, 0x70, 0xe6, 0x79, 0xd4, 0x09, 0x0c, 0x8f, 0xbe, 0xb1, 0x7c, 0xcb,
	0x75, 0x6a, 0x05, 0x6e, 0x71, 0x37, 0xd2, 0x93, 0x48, 0x8d, 0xbf, 0x82, 0x52, 0x0c, 0xf1, 0x6b,
	0x5b, 0x8d, 0xec, 0x8b, 0xf2, 0xf1, 0x0f, 0x36, 0x6c, 0x10, 0xe3, 0x7d, 0xd9, 0x09, 0xbc, 0x39,
	0x59, 0xae, 0xc1, 0x3f, 0x83, 0x82, 0x6d, 0x0e, 0xa8, 0xed, 0xd7, 0x8a, 0x7c, 0xf5, 0x47, 0x1b,
	0x56, 0xb7, 0x39, 0x20, 0x5c, 0x1a, 0xa1, 0xeb, 0x04, 0x2a, 0xab, 0x46, 0xd9, 0xd1, 0x5f, 0xd3,
	0x79, 0x94, 0x56, 0x76, 0x8b, 0x5f, 0x42, 0xfe, 0x8d, 0x69, 0xcf, 0x68, 0x14, 0xd1, 0xfd, 0xd8,
	0x74, 0xbc, 0x30, 0x0c, 0x29, 0x87, 0x7c, 0x99, 0xf9, 0x5c, 0xa8, 0xb7, 0xa1, 0x9c, 0xda, 0x6a,
	0x83, 0xc1, 0x4f, 0x56, 0x0d, 0x56, 0x63, 0x83, 0x7c, 0xd5, 0x9a, 0xb5, 0xe6, 0x09, 0x14, 0xc2,
	0xb8, 0x62, 0x0c, 0x15, 0x4d, 0x17, 0xf5, 0x9e, 0x66, 0x28, 0x9d, 0x6b, 0xb1, 0xad, 0xb4, 0xd0,
	0x07, 0x78, 0x0b, 0xb2, 0x1d, 0xb9, 0x8f, 0x04, 0x0c, 0x50, 0xb8, 0x92, 0xc9, 0xb9, 0xdc, 0x42,
	0x19, 0xbc, 0x03, 0x25, 0xf1, 0x54, 0xec, 0xb4, 0xd4, 0x8e, 0xdc, 0x42, 0xd9, 0xe6, 0x1f, 0xb3,
	0xb0, 0x9d, 0xf6, 0x15, 0x7f, 0x06, 0xb9, 0xd7, 0x96, 0x33, 0xe2, 0x2e, 0xa5, 0x32, 0x99, 0xc6,
	0x1c, 0x5e, 0x5a, 0xce, 0x88, 0x70, 0x58, 0xaa, 0xd2, 0x98, 0xbf, 0xf9, 0xa4, 0xd2, 0x8e, 0xa0,
	0x38, 0x9b, 0xda, 0xae, 0x39, 0xa2, 0x1e, 0xaf, 0x9f, 0x07, 0x8a, 0x2d, 0x01, 0x6d, 0xa8, 0xaa,
	0x57, 0x90, 0xbf, 0xb5, 0x6c, 0xea, 0xd7, 0x0a, 0x3c, 0x6b, 0xcf, 0x37, 0xba, 0x72, 0xc6, 0x10,
	0x61, 0xda, 0x42, 0x74, 0xfd, 0x97, 0x00, 0x4b, 0xe5, 0x86, 0x00, 0xff, 0x78, 0x35, 0xc0, 0x28,
	0x36, 0xcb, 0x16, 0xad, 0xc7, 0xf7, 0x5b, 0xc8, 0xb1, 0xb3, 0x62, 0x04, 0xdb, 0x97, 0x4a, 0xa7,
	0x95, 0x8a, 0x2d, 0x40, 0x81, 0xc8, 0x7d, 0x95, 0x5c, 0x22, 0x81, 0xc5, 0x5e, 0x27, 0xca, 0xb5,
	0x22, 0xb6, 0x0d, 0x22, 0x9f, 0x8a, 0x9a, 0x8c, 0x32, 0xf8, 0x43, 0x78, 0xc2, 0x43, 0x6e, 0x9c,
	0x29, 0x44, 0xd3, 0x8d, 0xae, 0x48, 0xe4, 0x8e, 0x6e, 0xf4, 0xba, 0x2d, 0x51, 0x97, 0x51, 0x96,
	0x2d, 0xe9, 0xa8, 0x86, 0xa4, 0xb6, 0x64, 0x43, 0xba, 0x10, 0x3b, 0xe7, 0x32, 0xca, 0xb1, 0xcc,
	0x30, 0x5d, 0x28, 0xe6, 0x9b, 0xdf, 0x65, 0xa0, 0x94, 0x24, 0x9d, 0xbd, 0xfc, 0x61, 0xaf, 0x31,
	0x6d, 0x7e, 0x98, 0x22, 0x49, 0x64, 0x16, 0x6b, 0x73, 0x3a, 0xf5, 0xdc, 0x37, 0x74, 0xf4, 0xb6,
	0x17, 0x3b, 0x01, 0xb1, 0x05, 0x1e, 0x65, 0xef, 0x32, 0x1d, 0xbd, 0x35, 0x39, 0x31, 0x08, 0xbf,
	0x82, 0xb2, 0x47, 0x59, 0x13, 0xa6, 0xce, 0x88, 0x8e, 0x78, 0x92, 0x1e, 0x58, 0x93, 0xc6, 0xb1,
	0x7d, 0x46, 0x96, 0x6f, 0x5b, 0xaf, 0xe9, 0x88, 0x77, 0x86, 0x87, 0xf6, 0x89, 0x41, 0xec, 0x94,
	0x03, 0xdb, 0x1d, 0xbe, 0xb6, 0x9c, 0x31, 0xef, 0x06, 0x45, 0x92, 0xc8, 0xac, 0x7f, 0x86, 0x79,
	0xdb, 0xe2, 0x85, 0x16, 0x0a, 0xf8, 0x87, 0xb0, 0x33, 0xa2, 0xb7, 0xe6, 0xcc, 0x0e, 0x8c, 0xf0,
	0x69, 0x91, 0x3f, 0xdd, 0x8e, 0x94, 0xd7, 0x4c, 0xd7, 0xfc, 0x73, 0x06, 0x8a, 0x71, 0x7a, 0xf1,
	0x51, 0xd2, 0xac, 0xc2, 0x12, 0x7f, 0xbc, 0x5e, 0x00, 0xeb, 0xad, 0xea, 0x00, 0x0a, 0x03, 0xcb,
	0x31, 0xbd, 0x39, 0x0f, 0x6e, 0x91, 0x44, 0x12, 0x7e, 0x02, 0x45, 0xd7, 0x1e, 0x19, 0x53, 0x33,
	0xb8, 0x8b, 0x5b, 0xa4, 0x6b, 0x8f, 0xba, 0x66, 0x70, 0x87, 0x7f, 0x04, 0x15, 0xdb, 0x72, 0xa8,
	0x6f, 0x58, 0x8e, 0x4f, 0xbd, 0x20, 0x0a, 0x59, 0x9e, 0xec, 0x70, 0xad, 0x12, 0x29, 0x99, 0xf3,
	0x21, 0x6c, 0x44, 0x6d, 0x1a, 0x44, 0x41, 0xca, 0x93, 0x6d, 0xae, 0x6c, 0x85, 0x3a, 0xfc, 0x21,
	0x80, 0x6f, 0x7d, 0x4b, 0x19, 0x26, 0x30, 0x79, 0x54, 0xb2, 0xa4, 0xc4, 0x34, 0x2d, 0xa6, 0x60,
	0xa3, 0x86, 0x09, 0x3c, 0x2a, 0x59, 0xc2, 0xef, 0x9b, 0xc7, 0x49, 0x5b, 0xc8, 0x83, 0x70, 0x85,
	0x3e, 0x60, 0x17, 0x11, 0x09, 0xec, 0xc2, 0x5a, 0x40, 0x1e, 0x04, 0x82, 0xb2, 0xec, 0x22, 0xa1,
	0x1c, 0xbb, 0xf4, 0x51, 0xbe, 0xf9, 0x1b, 0xd8, 0x93, 0x3c, 0x6a, 0x06, 0x74, 0x75, 0x3e, 0xa6,
	0xc6, 0x80, 0xb0, 0x71, 0x0c, 0x64, 0x96, 0x2f, 0x6c, 0x0d, 0xb6, 0xfc, 0xd9, 0x20, 0x3d, 0x32,
	0x22, 0x11, 0x3f, 0x87, 0xf2, 0xc0, 0xf4, 0xa9, 0xc1, 0x4a, 0xc3, 0x0a, 0xa2, 0x97, 0x1c, 0x98,
	0x4a, 0xe2, 0x9a, 0xe6, 0x39, 0xec, 0x69, 0xb3, 0xc1, 0xc4, 0xfa, 0x9e, 0xd3, 0x39, 0xe5, 0x55,
	0x66, 0xc5, 0xab, 0xe6, 0x1f, 0x04, 0x78, 0x16, 0xda, 0x90, 0x47, 0x56, 0xc0, 0x52, 0x2a, 0xb9,
	0x4e, 0xc0, 0xc7, 0xc9, 0x3b, 0x9a, 0xc4, 0x4f, 0xa1, 0xc4, 0x3a, 0x4b, 0x3a, 0xd1, 0x45, 0xa6,
	0xe0, 0x99, 0xae, 0xc1, 0xd6, 0x30, 0xdc, 0x80, 0x9f, 0x6a, 0x9b, 0xc4, 0x62, 0x73, 0x02, 0xcf,
	0xc2, 0x14, 0xfe, 0x5f, 0x1c, 0x69, 0xb6, 0xa1, 0xb6, 0x3c, 0x77, 0x77, 0x36, 0xb0, 0x2d, 0xff,
	0xee, 0xdd, 0xc3, 0x38, 0x80, 0x7d, 0x71, 0x60, 0x3a, 0x23, 0xd7, 0xf9, 0x2f, 0x13, 0xc2, 0x9e,
	0x4c, 0xa8, 0xef, 0x9b, 0x63, 0x1a, 0x17, 0x45, 0x24, 0x36, 0xff, 0x25, 0x00, 0xd2, 0x28, 0x9f,
	0xf3, 0xf4, 0x9b, 0x77, 0xdf, 0xe0, 0x39, 0xeb, 0x4d, 0xe1, 0x44, 0x30, 0xac, 0x51, 0xb4, 0x09,
	0xc4, 0x2a, 0x65, 0x94, 0xf6, 0x20, 0xb7, 0xe2, 0x01, 0xfe, 0x45, 0x42, 0x0c, 0xf2, 0x7c, 0xc4,
	0x7c, 0x1c, 0xb7, 0x82, 0x75, 0xb7, 0x36, 0xd2, 0x83, 0x2f, 0xfe, 0xd3, 0x28, 0xdf, 0x4f, 0x4f,
	0x9a, 0x7c, 0x7a, 0xae, 0xfc, 0x4e, 0x08, 0xa7, 0x2e, 0xdb, 0xc0, 0x9f, 0xd9, 0x01, 0xfe, 0x3c,
	0xf1, 0x44, 0xe0, 0x9e, 0x34, 0xd2, 0xc3, 0x2e, 0x46, 0xfd, 0xaf, 0xbd, 0xf8, 0xbb, 0x00, 0x7b,
	0xe7, 0x34, 0xb8, 0xa2, 0xde, 0x98, 0x9a, 0x03, 0x9b, 0xbe, 0xc7, 0x1c, 0x1c, 0x40, 0xc1, 0x77,
	0x67, 0xde, 0x30, 0x4e, 0x41, 0x24, 0xe1, 0x57, 0x50, 0xf4, 0x03, 0xcf, 0x0c, 0xe8, 0x78, 0xbe,
	0xce, 0x1d, 0x13, 0xb7, 0xb4, 0x08, 0x40, 0x12, 0x68, 0xf3, 0x9f, 0x59, 0xd8, 0x49, 0x9e, 0xf3,
	0xae, 0x2e, 0x42, 0xd9, 0xe7, 0x0d, 0xc4, 0x08, 0xe6, 0x53, 0x1a, 0xb5, 0xf6, 0xc6, 0x3d, 0x5b,
	0x61, 0x7f, 0xe7, 0x40, 0x7d, 0x3e, 0xa5, 0x04, 0xfc, 0xe4, 0x7e, 0xc5, 0x97, 0xcc, 0xf7, 0xf6,
	0x05, 0x3f, 0x83, 0xd2, 0x24, 0x7e, 0xcc, 0x4f, 0x5e, 0x24, 0x4b, 0x05, 0x6b, 0xf1, 0x61, 0xd3,
	0x33, 0xb8, 0x2e, 0x1c, 0x04, 0x45, 0xb2, 0x1d, 0x2a, 0xb9, 0xdd, 0x11, 0x1b, 0x17, 0x51, 0xd7,
	0x88, 0x51, 0x79, 0x8e, 0xda, 0x89, 0xb4, 0x11, 0xec, 0x19, 0x94, 0x86, 0xae, 0x73, 0x6b, 0x5b,
	0xc3, 0x20, 0x24, 0x45, 0x25, 0xb2, 0x54, 0x30, 0x23, 0xc9, 0xb6, 0x86, 0xe5, 0x04, 0x2e, 0xe7,
	0xca, 0x25, 0xb2, 0x33, 0x59, 0x1e, 0x3e, 0x70, 0x9b, 0x7f, 0x15, 0x00, 0x96, 0x01, 0xc0, 0x4f,
	0xe1, 0xb1, 0xd6, 0x3b, 0xbd, 0x52, 0x74, 0x43, 0xbf, 0xe9, 0xca, 0x46, 0xaf, 0xa3, 0x75, 0x65,
	0x49, 0x39, 0x53, 0x64, 0x46, 0x72, 0x0e, 0x00, 0x87, 0x24, 0x46, 0x39, 0x33, 0x3a, 0xb2, 0x24,
	0x6b, 0x9a, 0x48, 0x6e, 0x90, 0x80, 0x1f, 0x41, 0xf5, 0x4c, 0xd4, 0x74, 0xe3, 0x4c, 0x25, 0x7d,
	0x91, 0xb4, 0x0c, 0xb5, 0xd3, 0xbe, 0x41, 0x19, 0xfc, 0x18, 0xf6, 0x42, 0xfe, 0xb3, 0x8a, 0xcf,
	0xe2, 0x2a, 0xec, 0x44, 0x0f, 0xc4, 0x76, 0x5f, 0xbc, 0xd1, 0x50, 0x8e, 0x31, 0xaa, 0xd0, 0x74,
	0xa4, 0xc9, 0xe3, 0x5d, 0x28, 0x4b, 0x17, 0x32, 0x21, 0x37, 0x46, 0x57, 0x91, 0x2e, 0x51, 0xa1,
	0xf9, 0x17, 0x01, 0x50, 0xdb, 0xf2, 0x79, 0xef, 0xf4, 0xdf, 0x63, 0x6d, 0x7e, 0x02, 0xbb, 0xfe,
	0x6c, 0xe0, 0x07, 0x9e, 0xe5, 0x8c, 0x8d, 0xaf, 0xd9, 0xd7, 0x5d, 0x54, 0xa4, 0x95, 0x44, 0xcd,
	0xbf, 0xf9, 0xd8, 0xde, 0x53, 0x93, 0x7d, 0x9a, 0xf0, 0xf4, 0x64, 0x49, 0x24, 0x35, 0xff, 0x24,
	0x40, 0x35, 0xe5, 0xa8, 0x3f, 0x75, 0x1d, 0x9f, 0xe2, 0x2f, 0x63, 0xfa, 0x2a, 0xac, 0xf6, 0x96,
	0x7b, 0xc8, 0xf7, 0xcb, 0x61, 0x5f, 0xfe, 0x23, 0x0b, 0xe5, 0xd4, 0x37, 0x2b, 0x4b, 0xaa, 0xda,
	0xd5, 0x15, 0xb5, 0xb3, 0x96, 0x6c, 0x80, 0x42, 0x5b, 0x3c, 0x95, 0xdb, 0x1a, 0x12, 0xf0, 0x1e,
	0xec, 0xb6, 0x64, 0x5d, 0x54, 0xda, 0x72, 0xcb, 0x88, 0x94, 0x19, 0xbc, 0x0f, 0x48, 0xea, 0x11,
	0xce, 0x63, 0x89, 0x7c, 0xad, 0x68, 0x8a, 0xda, 0x41, 0x39, 0x96, 0x5b, 0xb1, 0xdd, 0x4e, 0x34,
	0x1a, 0x2a, 0x32, 0x72, 0x1b, 0x03, 0x25, 0xf5, 0xea, 0x4a, 0xd1, 0x11, 0x62, 0xd9, 0x65, 0xb0,
	0x50, 0xd6, 0x50, 0x83, 0xad, 0x8b, 0x41, 0x67, 0x4a, 0x5b, 0xd6, 0xd0, 0x09, 0xae, 0x40, 0x89,
	0x61, 0x42, 0x71, 0x21, 0xe0, 0x03, 0xa8, 0x26, 0x5e, 0x88, 0x92, 0xa4, 0xf6, 0x3a, 0xba, 0x86,
	0x16, 0x19, 0xfc, 0x08, 0x10, 0xdb, 0x4e, 0xee, 0xcb, 0x24, 0x62, 0xd4, 0x1a, 0x5a, 0x30, 0xfe,
	0x5c, 0xbc, 0x62, 0x25, 0x77, 0xce, 0xc4, 0x22, 0xde, 0x87, 0xdd, 0x78, 0x03, 0x51, 0xd2, 0xb9,
	0x6b, 0x0b, 0x84, 0xf7, 0xa0, 0x12, 0x32, 0xec, 0xa5, 0xb2, 0xc1, 0x56, 0x46, 0x06, 0x5b, 0x68,
	0x71, 0x82, 0xf7, 0xa1, 0xa2, 0x5d, 0x2a, 0x5d, 0x83, 0x17, 0xa8, 0x78, 0xda, 0x96, 0xd1, 0x62,
	0x21, 0xe0, 0x2a, 0x94, 0xc3, 0x37, 0x45, 0x8f, 0x54, 0x19, 0xbc, 0x0b, 0xa5, 0xbe, 0x7c, 0x6a,
	0xb4, 0x95, 0xce, 0xa5, 0x86, 0x16, 0x8b, 0x1c, 0x2e, 0x43, 0x5e, 0xba, 0x90, 0xa5, 0x4b, 0xb4,
	0xe0, 0x0e, 0x54, 0xc2, 0xe3, 0x1a, 0x67, 0xaa, 0xaa, 0xcb, 0x84, 0x41, 0x10, 0x7e, 0x0c, 0xd5,
	0x6e, 0x4f, 0xbb, 0x30, 0x24, 0x99, 0xe8, 0xca, 0x99, 0x22, 0x85, 0xde, 0x2f, 0x1a, 0x18, 0xc3,
	0xb6, 0x4e, 0x44, 0xe9, 0x52, 0xe9, 0x9c, 0x1b, 0x4a, 0x8b, 0xe9, 0x4e, 0x70, 0x0d, 0xaa, 0x2d,
	0xb5, 0xdf, 0x69, 0xab, 0x62, 0x8b, 0x87, 0x4e, 0xec, 0xf0, 0x07, 0x0b, 0xe1, 0xe5, 0xef, 0x05,
	0xa8, 0xde, 0xeb, 0x4a, 0xb8, 0x09, 0x1f, 0x25, 0x4e, 0x1b, 0x9a, 0x4e, 0x44, 0x5d, 0x3e, 0xbf,
	0x59, 0xcb, 0xf3, 0x0e, 0x94, 0x88, 0x2c, 0xf5, 0x88, 0xa6, 0x5c, 0xcb, 0x48, 0xc0, 0x65, 0xd8,
	0x22, 0xb2, 0xa6, 0xb6, 0xaf, 0xd9, 0x57, 0x4b, 0x1d, 0x0e, 0x34, 0xe5, 0xaa, 0xdb, 0x96, 0x0d,
	0xbd, 0xaf, 0x1a, 0x7d, 0xf1, 0xc6, 0x50, 0x3a, 0x86, 0xa4, 0x12, 0xf6, 0xc9, 0x52, 0x84, 0x9c,
	0xda, 0x23, 0xec, 0xdd, 0x05, 0x28, 0xe8, 0x17, 0xb2, 0x42, 0x34, 0x94, 0x3f, 0xfe, 0x2e, 0x0f,
	0x85, 0x73, 0x5e, 0x7c, 0xf8, 0x0b, 0x28, 0x25, 0xbf, 0x57, 0x70, 0x2d, 0x2e, 0xc9, 0xf5, 0x3f,
	0x2e, 0x75, 0x7c, 0xff, 0xeb, 0x1b, 0x7f, 0x05, 0xdb, 0x69, 0xf2, 0x89, 0x9f, 0x26, 0x98, 0xfb,
	0x94, 0x74, 0xa3, 0x81, 0x1e, 0x3c, 0xda, 0xc8, 0xfa, 0xf0, 0xc7, 0xab, 0xe0, 0xcd, 0x5c, 0xac,
	0x7e, 0x70, 0x18, 0xfe, 0x37, 0x3a, 0x8c, 0xff, 0x1b, 0x1d, 0xca, 0x93, 0x69, 0x30, 0x67, 0x66,
	0x37, 0x72, 0xb8, 0xa5, 0xd9, 0xb7, 0x51, 0xbc, 0x07, 0xcd, 0x5e, 0x41, 0xf5, 0x1e, 0x57, 0xc3,
	0x8d, 0xfb, 0x9e, 0xae, 0xd2, 0xb8, 0x07, 0xcd, 0xfd, 0x1c, 0x4a, 0x09, 0x61, 0x59, 0x06, 0x7e,
	0x9d, 0xc3, 0xd4, 0xf7, 0x37, 0x71, 0x0a, 0x16, 0xfa, 0x34, 0xf3, 0x5e, 0x86, 0x7e, 0x03, 0x1f,
	0xdf, 0x18, 0x7a, 0x11, 0x76, 0x56, 0xa8, 0x22, 0x7e, 0x96, 0x7c, 0xe3, 0x6d, 0x60, 0x90, 0x1b,
	0x4d, 0x9c, 0xc2, 0x76, 0x9a, 0x87, 0x2c, 0x7d, 0xd8, 0xc0, 0x4e, 0xea, 0x8f, 0x36, 0x0e, 0x75,
	0x7c, 0x02, 0xa5, 0xa4, 0xb3, 0x2e, 0x83, 0xb0, 0x3e, 0x3f, 0xea, 0x4f, 0x1e, 0x6c, 0xc3, 0x83,
	0x02, 0x0f, 0xeb, 0x4f, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x64, 0x6b, 0xb6, 0xa6, 0x83, 0x14,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GerritClient is the client API for Gerrit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GerritClient interface {
	// Loads a change by id.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-change
	GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Create a new empty change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#create-change
	CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Edit a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#put-edit-file
	ChangeEditFileContent(ctx context.Context, in *ChangeEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#delete-edit-file
	DeleteEditFileContent(ctx context.Context, in *DeleteEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Publish all changes in a a change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-edit
	ChangeEditPublish(ctx context.Context, in *ChangeEditPublishRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Set various review bits on a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#set-review
	SetReview(ctx context.Context, in *SetReviewRequest, opts ...grpc.CallOption) (*ReviewResult, error)
	// Submit a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-change
	SubmitChange(ctx context.Context, in *SubmitChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Abandon a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-change
	AbandonChange(ctx context.Context, in *AbandonChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Gets Mergeable status for a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#get-mergeable-info
	GetMergeable(ctx context.Context, in *GetMergeableRequest, opts ...grpc.CallOption) (*MergeableInfo, error)
	// Lists the files that were modified, added or deleted in a revision.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-files
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
}
type gerritPRPCClient struct {
	client *prpc.Client
}

func NewGerritPRPCClient(client *prpc.Client) GerritClient {
	return &gerritPRPCClient{client}
}

func (c *gerritPRPCClient) GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "GetChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "CreateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) ChangeEditFileContent(ctx context.Context, in *ChangeEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "gerrit.Gerrit", "ChangeEditFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) DeleteEditFileContent(ctx context.Context, in *DeleteEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "gerrit.Gerrit", "DeleteEditFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) ChangeEditPublish(ctx context.Context, in *ChangeEditPublishRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "gerrit.Gerrit", "ChangeEditPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) SetReview(ctx context.Context, in *SetReviewRequest, opts ...grpc.CallOption) (*ReviewResult, error) {
	out := new(ReviewResult)
	err := c.client.Call(ctx, "gerrit.Gerrit", "SetReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) SubmitChange(ctx context.Context, in *SubmitChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "SubmitChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) AbandonChange(ctx context.Context, in *AbandonChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "AbandonChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) GetMergeable(ctx context.Context, in *GetMergeableRequest, opts ...grpc.CallOption) (*MergeableInfo, error) {
	out := new(MergeableInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "GetMergeable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.client.Call(ctx, "gerrit.Gerrit", "ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type gerritClient struct {
	cc grpc.ClientConnInterface
}

func NewGerritClient(cc grpc.ClientConnInterface) GerritClient {
	return &gerritClient{cc}
}

func (c *gerritClient) GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/GetChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/CreateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ChangeEditFileContent(ctx context.Context, in *ChangeEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/ChangeEditFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) DeleteEditFileContent(ctx context.Context, in *DeleteEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/DeleteEditFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ChangeEditPublish(ctx context.Context, in *ChangeEditPublishRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/ChangeEditPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) SetReview(ctx context.Context, in *SetReviewRequest, opts ...grpc.CallOption) (*ReviewResult, error) {
	out := new(ReviewResult)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/SetReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) SubmitChange(ctx context.Context, in *SubmitChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/SubmitChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) AbandonChange(ctx context.Context, in *AbandonChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/AbandonChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) GetMergeable(ctx context.Context, in *GetMergeableRequest, opts ...grpc.CallOption) (*MergeableInfo, error) {
	out := new(MergeableInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/GetMergeable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GerritServer is the server API for Gerrit service.
type GerritServer interface {
	// Loads a change by id.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-change
	GetChange(context.Context, *GetChangeRequest) (*ChangeInfo, error)
	// Create a new empty change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#create-change
	CreateChange(context.Context, *CreateChangeRequest) (*ChangeInfo, error)
	// Edit a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#put-edit-file
	ChangeEditFileContent(context.Context, *ChangeEditFileContentRequest) (*empty.Empty, error)
	// Delete a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#delete-edit-file
	DeleteEditFileContent(context.Context, *DeleteEditFileContentRequest) (*empty.Empty, error)
	// Publish all changes in a a change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-edit
	ChangeEditPublish(context.Context, *ChangeEditPublishRequest) (*empty.Empty, error)
	// Set various review bits on a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#set-review
	SetReview(context.Context, *SetReviewRequest) (*ReviewResult, error)
	// Submit a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-change
	SubmitChange(context.Context, *SubmitChangeRequest) (*ChangeInfo, error)
	// Abandon a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-change
	AbandonChange(context.Context, *AbandonChangeRequest) (*ChangeInfo, error)
	// Gets Mergeable status for a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#get-mergeable-info
	GetMergeable(context.Context, *GetMergeableRequest) (*MergeableInfo, error)
	// Lists the files that were modified, added or deleted in a revision.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-files
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
}

// UnimplementedGerritServer can be embedded to have forward compatible implementations.
type UnimplementedGerritServer struct {
}

func (*UnimplementedGerritServer) GetChange(ctx context.Context, req *GetChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChange not implemented")
}
func (*UnimplementedGerritServer) CreateChange(ctx context.Context, req *CreateChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChange not implemented")
}
func (*UnimplementedGerritServer) ChangeEditFileContent(ctx context.Context, req *ChangeEditFileContentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEditFileContent not implemented")
}
func (*UnimplementedGerritServer) DeleteEditFileContent(ctx context.Context, req *DeleteEditFileContentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEditFileContent not implemented")
}
func (*UnimplementedGerritServer) ChangeEditPublish(ctx context.Context, req *ChangeEditPublishRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEditPublish not implemented")
}
func (*UnimplementedGerritServer) SetReview(ctx context.Context, req *SetReviewRequest) (*ReviewResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReview not implemented")
}
func (*UnimplementedGerritServer) SubmitChange(ctx context.Context, req *SubmitChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitChange not implemented")
}
func (*UnimplementedGerritServer) AbandonChange(ctx context.Context, req *AbandonChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbandonChange not implemented")
}
func (*UnimplementedGerritServer) GetMergeable(ctx context.Context, req *GetMergeableRequest) (*MergeableInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMergeable not implemented")
}
func (*UnimplementedGerritServer) ListFiles(ctx context.Context, req *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}

func RegisterGerritServer(s prpc.Registrar, srv GerritServer) {
	s.RegisterService(&_Gerrit_serviceDesc, srv)
}

func _Gerrit_GetChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).GetChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/GetChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).GetChange(ctx, req.(*GetChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_CreateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).CreateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/CreateChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).CreateChange(ctx, req.(*CreateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ChangeEditFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEditFileContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ChangeEditFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/ChangeEditFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ChangeEditFileContent(ctx, req.(*ChangeEditFileContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_DeleteEditFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEditFileContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).DeleteEditFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/DeleteEditFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).DeleteEditFileContent(ctx, req.(*DeleteEditFileContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ChangeEditPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEditPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ChangeEditPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/ChangeEditPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ChangeEditPublish(ctx, req.(*ChangeEditPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_SetReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).SetReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/SetReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).SetReview(ctx, req.(*SetReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_SubmitChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).SubmitChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/SubmitChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).SubmitChange(ctx, req.(*SubmitChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_AbandonChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbandonChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).AbandonChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/AbandonChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).AbandonChange(ctx, req.(*AbandonChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_GetMergeable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMergeableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).GetMergeable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/GetMergeable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).GetMergeable(ctx, req.(*GetMergeableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gerrit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gerrit.Gerrit",
	HandlerType: (*GerritServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChange",
			Handler:    _Gerrit_GetChange_Handler,
		},
		{
			MethodName: "CreateChange",
			Handler:    _Gerrit_CreateChange_Handler,
		},
		{
			MethodName: "ChangeEditFileContent",
			Handler:    _Gerrit_ChangeEditFileContent_Handler,
		},
		{
			MethodName: "DeleteEditFileContent",
			Handler:    _Gerrit_DeleteEditFileContent_Handler,
		},
		{
			MethodName: "ChangeEditPublish",
			Handler:    _Gerrit_ChangeEditPublish_Handler,
		},
		{
			MethodName: "SetReview",
			Handler:    _Gerrit_SetReview_Handler,
		},
		{
			MethodName: "SubmitChange",
			Handler:    _Gerrit_SubmitChange_Handler,
		},
		{
			MethodName: "AbandonChange",
			Handler:    _Gerrit_AbandonChange_Handler,
		},
		{
			MethodName: "GetMergeable",
			Handler:    _Gerrit_GetMergeable_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _Gerrit_ListFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/common/proto/gerrit/gerrit.proto",
}
