// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/resultdb/proto/sink/v1/test_result.proto

package sinkpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v1 "go.chromium.org/luci/resultdb/proto/rpc/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A result file format.
type TestResultFile_Format int32

const (
	// The file is a sequence of TestResult JSON objects (not a JSON Array).
	// The default format.
	TestResultFile_LUCI TestResultFile_Format = 0
	// Chromium's JSON Test Results format
	// https://chromium.googlesource.com/chromium/src/+/master/docs/testing/json_test_results_format.md
	TestResultFile_CHROMIUM_JSON_TEST_RESULTS TestResultFile_Format = 1
	// GTest format.
	// Not well documented.
	// Implementation: https://cs.chromium.org/chromium/src/base/test/launcher/test_results_tracker.cc
	TestResultFile_GOOGLE_TEST TestResultFile_Format = 2
)

var TestResultFile_Format_name = map[int32]string{
	0: "LUCI",
	1: "CHROMIUM_JSON_TEST_RESULTS",
	2: "GOOGLE_TEST",
}

var TestResultFile_Format_value = map[string]int32{
	"LUCI":                       0,
	"CHROMIUM_JSON_TEST_RESULTS": 1,
	"GOOGLE_TEST":                2,
}

func (x TestResultFile_Format) String() string {
	return proto.EnumName(TestResultFile_Format_name, int32(x))
}

func (TestResultFile_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c45f29128cb6d695, []int{2, 0}
}

// A local equivalent of luci.resultdb.TestResult message
// in ../../rpc/v1/test_result.proto.
// See its comments for details.
type TestResult struct {
	// Equivalent of luci.resultpb.TestResult.TestPath.
	TestPath string `protobuf:"bytes,1,opt,name=test_path,json=testPath,proto3" json:"test_path,omitempty"`
	// Equivalent of luci.resultpb.TestResult.result_id.
	ResultId string `protobuf:"bytes,2,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	// Equivalent of luci.resultpb.TestResult.extra_variant_pairs.
	ExtraVariantPairs *v1.Variant `protobuf:"bytes,3,opt,name=extra_variant_pairs,json=extraVariantPairs,proto3" json:"extra_variant_pairs,omitempty"`
	// Equivalent of luci.resultpb.TestResult.expected.
	Expected bool `protobuf:"varint,4,opt,name=expected,proto3" json:"expected,omitempty"`
	// Equivalent of luci.resultpb.TestResult.status.
	Status v1.TestStatus `protobuf:"varint,5,opt,name=status,proto3,enum=luci.resultdb.TestStatus" json:"status,omitempty"`
	// Equivalent of luci.resultpb.TestResult.summary_markdown.
	SummaryMarkdown string `protobuf:"bytes,6,opt,name=summary_markdown,json=summaryMarkdown,proto3" json:"summary_markdown,omitempty"`
	// Equivalent of luci.resultpb.TestResult.start_time.
	StartTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Equivalent of luci.resultpb.TestResult.run_duration.
	RunDuration *duration.Duration `protobuf:"bytes,8,opt,name=run_duration,json=runDuration,proto3" json:"run_duration,omitempty"`
	// Equivalent of luci.resultpb.TestResult.tags.
	Tags []*v1.StringPair `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// Equivalent of luci.resultpb.TestResult.input_artifacts.
	// The map key is an artifact name.
	InputArtifacts map[string]*Artifact `protobuf:"bytes,10,rep,name=input_artifacts,json=inputArtifacts,proto3" json:"input_artifacts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Equivalent of luci.resultpb.TestResult.output_artifacts.
	// The map key is an artifact name.
	OutputArtifacts      map[string]*Artifact `protobuf:"bytes,11,rep,name=output_artifacts,json=outputArtifacts,proto3" json:"output_artifacts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TestResult) Reset()         { *m = TestResult{} }
func (m *TestResult) String() string { return proto.CompactTextString(m) }
func (*TestResult) ProtoMessage()    {}
func (*TestResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_c45f29128cb6d695, []int{0}
}

func (m *TestResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResult.Unmarshal(m, b)
}
func (m *TestResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResult.Marshal(b, m, deterministic)
}
func (m *TestResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResult.Merge(m, src)
}
func (m *TestResult) XXX_Size() int {
	return xxx_messageInfo_TestResult.Size(m)
}
func (m *TestResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResult.DiscardUnknown(m)
}

var xxx_messageInfo_TestResult proto.InternalMessageInfo

func (m *TestResult) GetTestPath() string {
	if m != nil {
		return m.TestPath
	}
	return ""
}

func (m *TestResult) GetResultId() string {
	if m != nil {
		return m.ResultId
	}
	return ""
}

func (m *TestResult) GetExtraVariantPairs() *v1.Variant {
	if m != nil {
		return m.ExtraVariantPairs
	}
	return nil
}

func (m *TestResult) GetExpected() bool {
	if m != nil {
		return m.Expected
	}
	return false
}

func (m *TestResult) GetStatus() v1.TestStatus {
	if m != nil {
		return m.Status
	}
	return v1.TestStatus_STATUS_UNSPECIFIED
}

func (m *TestResult) GetSummaryMarkdown() string {
	if m != nil {
		return m.SummaryMarkdown
	}
	return ""
}

func (m *TestResult) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TestResult) GetRunDuration() *duration.Duration {
	if m != nil {
		return m.RunDuration
	}
	return nil
}

func (m *TestResult) GetTags() []*v1.StringPair {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TestResult) GetInputArtifacts() map[string]*Artifact {
	if m != nil {
		return m.InputArtifacts
	}
	return nil
}

func (m *TestResult) GetOutputArtifacts() map[string]*Artifact {
	if m != nil {
		return m.OutputArtifacts
	}
	return nil
}

// A local equivalent of luci.resultdb.Artifact message
// in ../../rpc/v1/test_result.proto.
// See its comments for details.
// Does not have a name because the latter is avialable as a map key in
// TestResult.input_artifacts and TestResult.output_artifacts.
type Artifact struct {
	// Types that are valid to be assigned to Body:
	//	*Artifact_FilePath
	//	*Artifact_Contents
	Body isArtifact_Body `protobuf_oneof:"body"`
	// Equivalent of luci.resultpb.Artifact.content_type.
	ContentType          string   `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Artifact) Reset()         { *m = Artifact{} }
func (m *Artifact) String() string { return proto.CompactTextString(m) }
func (*Artifact) ProtoMessage()    {}
func (*Artifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_c45f29128cb6d695, []int{1}
}

func (m *Artifact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Artifact.Unmarshal(m, b)
}
func (m *Artifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Artifact.Marshal(b, m, deterministic)
}
func (m *Artifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Artifact.Merge(m, src)
}
func (m *Artifact) XXX_Size() int {
	return xxx_messageInfo_Artifact.Size(m)
}
func (m *Artifact) XXX_DiscardUnknown() {
	xxx_messageInfo_Artifact.DiscardUnknown(m)
}

var xxx_messageInfo_Artifact proto.InternalMessageInfo

type isArtifact_Body interface {
	isArtifact_Body()
}

type Artifact_FilePath struct {
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3,oneof"`
}

type Artifact_Contents struct {
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3,oneof"`
}

func (*Artifact_FilePath) isArtifact_Body() {}

func (*Artifact_Contents) isArtifact_Body() {}

func (m *Artifact) GetBody() isArtifact_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Artifact) GetFilePath() string {
	if x, ok := m.GetBody().(*Artifact_FilePath); ok {
		return x.FilePath
	}
	return ""
}

func (m *Artifact) GetContents() []byte {
	if x, ok := m.GetBody().(*Artifact_Contents); ok {
		return x.Contents
	}
	return nil
}

func (m *Artifact) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Artifact) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Artifact_FilePath)(nil),
		(*Artifact_Contents)(nil),
	}
}

// A file with test results.
type TestResultFile struct {
	// Absolute OS-native path to the results file on the same machine as the
	// ResultSink server.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Format of the file.
	Format               TestResultFile_Format `protobuf:"varint,2,opt,name=format,proto3,enum=luci.resultdb.sink.TestResultFile_Format" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TestResultFile) Reset()         { *m = TestResultFile{} }
func (m *TestResultFile) String() string { return proto.CompactTextString(m) }
func (*TestResultFile) ProtoMessage()    {}
func (*TestResultFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_c45f29128cb6d695, []int{2}
}

func (m *TestResultFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResultFile.Unmarshal(m, b)
}
func (m *TestResultFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResultFile.Marshal(b, m, deterministic)
}
func (m *TestResultFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResultFile.Merge(m, src)
}
func (m *TestResultFile) XXX_Size() int {
	return xxx_messageInfo_TestResultFile.Size(m)
}
func (m *TestResultFile) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResultFile.DiscardUnknown(m)
}

var xxx_messageInfo_TestResultFile proto.InternalMessageInfo

func (m *TestResultFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TestResultFile) GetFormat() TestResultFile_Format {
	if m != nil {
		return m.Format
	}
	return TestResultFile_LUCI
}

func init() {
	proto.RegisterEnum("luci.resultdb.sink.TestResultFile_Format", TestResultFile_Format_name, TestResultFile_Format_value)
	proto.RegisterType((*TestResult)(nil), "luci.resultdb.sink.TestResult")
	proto.RegisterMapType((map[string]*Artifact)(nil), "luci.resultdb.sink.TestResult.InputArtifactsEntry")
	proto.RegisterMapType((map[string]*Artifact)(nil), "luci.resultdb.sink.TestResult.OutputArtifactsEntry")
	proto.RegisterType((*Artifact)(nil), "luci.resultdb.sink.Artifact")
	proto.RegisterType((*TestResultFile)(nil), "luci.resultdb.sink.TestResultFile")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/resultdb/proto/sink/v1/test_result.proto", fileDescriptor_c45f29128cb6d695)
}

var fileDescriptor_c45f29128cb6d695 = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x4f, 0xdb, 0x30,
	0x14, 0x25, 0x50, 0xba, 0xf4, 0x16, 0xb5, 0x9d, 0x99, 0xa6, 0xd0, 0x31, 0xd6, 0xf5, 0xa9, 0x3c,
	0x2c, 0x15, 0x61, 0xd2, 0xbe, 0xd8, 0x03, 0xb0, 0x02, 0x9d, 0x60, 0x45, 0x6e, 0xd9, 0xc3, 0x26,
	0x2d, 0x73, 0x13, 0xb7, 0x58, 0x34, 0x71, 0xe4, 0x38, 0x8c, 0xfe, 0xa7, 0x3d, 0xec, 0x27, 0x4e,
	0x76, 0x12, 0xa0, 0x80, 0xb6, 0x21, 0xed, 0x29, 0xf6, 0xb9, 0xe7, 0x9c, 0x7b, 0xed, 0xeb, 0x1b,
	0x78, 0x3f, 0xe6, 0xb6, 0x77, 0x2a, 0x78, 0xc0, 0x92, 0xc0, 0xe6, 0x62, 0xdc, 0x9e, 0x24, 0x1e,
	0x6b, 0x0b, 0x1a, 0x27, 0x13, 0xe9, 0x0f, 0xdb, 0x91, 0xe0, 0x92, 0xb7, 0x63, 0x16, 0x9e, 0xb5,
	0xcf, 0x37, 0xda, 0x92, 0xc6, 0xd2, 0x4d, 0x63, 0xb6, 0x8e, 0x20, 0xa4, 0xe8, 0x76, 0x4e, 0xb7,
	0x15, 0xb1, 0xbe, 0x36, 0xe6, 0x7c, 0x3c, 0xa1, 0xa9, 0x76, 0x98, 0x8c, 0xda, 0x7e, 0x22, 0x88,
	0x64, 0x3c, 0x4c, 0x35, 0xf5, 0x67, 0x37, 0xe3, 0x92, 0x05, 0x34, 0x96, 0x24, 0x88, 0x32, 0xc2,
	0xab, 0x7f, 0xa9, 0x49, 0x44, 0x9e, 0x2a, 0xc9, 0xe3, 0x41, 0x70, 0xe9, 0xbc, 0x75, 0x0f, 0xe1,
	0xad, 0xb3, 0x34, 0x7f, 0x15, 0x01, 0x06, 0x34, 0x96, 0x58, 0x83, 0xe8, 0x09, 0x94, 0x34, 0x27,
	0x22, 0xf2, 0xd4, 0x32, 0x1a, 0x46, 0xab, 0x84, 0x4d, 0x05, 0x1c, 0x13, 0x79, 0xaa, 0x82, 0xa9,
	0xd6, 0x65, 0xbe, 0x35, 0x9f, 0x06, 0x53, 0xa0, 0xeb, 0xa3, 0x3d, 0x58, 0xa6, 0x17, 0x52, 0x10,
	0xf7, 0x9c, 0x08, 0x46, 0x42, 0x65, 0xc1, 0x44, 0x6c, 0x2d, 0x34, 0x8c, 0x56, 0xd9, 0x79, 0x6c,
	0xcf, 0x5e, 0xd9, 0xe7, 0x94, 0x83, 0x1f, 0x6a, 0x49, 0xb6, 0x3b, 0x56, 0x02, 0x54, 0x07, 0x93,
	0x5e, 0x44, 0xd4, 0x93, 0xd4, 0xb7, 0x0a, 0x0d, 0xa3, 0x65, 0xe2, 0xcb, 0x3d, 0xda, 0x80, 0x62,
	0x2c, 0x89, 0x4c, 0x62, 0x6b, 0xb1, 0x61, 0xb4, 0x2a, 0xce, 0xca, 0x0d, 0x5b, 0x75, 0x90, 0xbe,
	0x26, 0xe0, 0x8c, 0x88, 0xd6, 0xa1, 0x16, 0x27, 0x41, 0x40, 0xc4, 0xd4, 0x0d, 0x88, 0x38, 0xf3,
	0xf9, 0x8f, 0xd0, 0x2a, 0xea, 0xd2, 0xab, 0x19, 0x7e, 0x94, 0xc1, 0xe8, 0x0d, 0x40, 0x2c, 0x89,
	0x90, 0xae, 0x6a, 0x8d, 0xf5, 0x40, 0x17, 0x5e, 0xb7, 0xd3, 0xbe, 0xd9, 0x79, 0xdf, 0xec, 0x41,
	0xde, 0x37, 0x5c, 0xd2, 0x6c, 0xb5, 0x47, 0x5b, 0xb0, 0x24, 0x92, 0xd0, 0xcd, 0x7b, 0x6e, 0x99,
	0x5a, 0xbc, 0x72, 0x4b, 0xfc, 0x21, 0x23, 0xe0, 0xb2, 0x48, 0xc2, 0x7c, 0x83, 0x5e, 0x40, 0x41,
	0x92, 0x71, 0x6c, 0x95, 0x1a, 0x0b, 0x5a, 0x35, 0x7b, 0xa8, 0xbe, 0x14, 0x2c, 0x1c, 0xab, 0xcb,
	0xc1, 0x9a, 0x86, 0xbe, 0x42, 0x95, 0x85, 0x51, 0x22, 0x5d, 0x22, 0x24, 0x1b, 0x11, 0x4f, 0xc6,
	0x16, 0x68, 0xa5, 0x63, 0xdf, 0x7e, 0x98, 0xf6, 0x55, 0x73, 0xed, 0xae, 0x52, 0x6d, 0xe7, 0xa2,
	0x4e, 0x28, 0xc5, 0x14, 0x57, 0xd8, 0x0c, 0x88, 0xbe, 0x41, 0x8d, 0x27, 0x72, 0xd6, 0xbd, 0xac,
	0xdd, 0x37, 0xff, 0xe2, 0xde, 0xd3, 0xb2, 0x1b, 0xf6, 0x55, 0x3e, 0x8b, 0xd6, 0x5d, 0x58, 0xbe,
	0xa3, 0x0c, 0x54, 0x83, 0x85, 0x33, 0x3a, 0xcd, 0x5e, 0x9c, 0x5a, 0x22, 0x07, 0x16, 0xcf, 0xc9,
	0x24, 0xa1, 0xfa, 0xa1, 0x95, 0x9d, 0xd5, 0xbb, 0xb2, 0xe7, 0x26, 0x38, 0xa5, 0xbe, 0x9d, 0x7f,
	0x6d, 0xd4, 0xbf, 0xc3, 0xa3, 0xbb, 0x2a, 0xf9, 0x7f, 0x19, 0x9a, 0x02, 0xcc, 0x1c, 0x46, 0x4f,
	0xa1, 0x34, 0x62, 0x13, 0x7a, 0x6d, 0x5e, 0x0e, 0xe6, 0xb0, 0xa9, 0x20, 0x3d, 0x31, 0xab, 0x60,
	0x7a, 0x3c, 0x94, 0x34, 0x94, 0xb1, 0xce, 0xb2, 0xa4, 0xa2, 0x39, 0x82, 0x9e, 0xc3, 0x52, 0xb6,
	0x76, 0xe5, 0x34, 0xa2, 0x7a, 0x56, 0x4a, 0xb8, 0x9c, 0x61, 0x83, 0x69, 0x44, 0x77, 0x8a, 0x50,
	0x18, 0x72, 0x7f, 0xda, 0xfc, 0x69, 0x40, 0xe5, 0xea, 0xae, 0xf7, 0xd8, 0x84, 0x22, 0x04, 0x85,
	0x6b, 0x53, 0xaa, 0xd7, 0x68, 0x1b, 0x8a, 0x23, 0x2e, 0x02, 0x22, 0x75, 0xb6, 0x8a, 0xb3, 0xfe,
	0xe7, 0x9e, 0x29, 0x1f, 0x7b, 0x4f, 0x0b, 0x70, 0x26, 0x6c, 0xee, 0x42, 0x31, 0x45, 0x90, 0x09,
	0x85, 0xc3, 0x93, 0xdd, 0x6e, 0x6d, 0x0e, 0xad, 0x41, 0x7d, 0xf7, 0x00, 0xf7, 0x8e, 0xba, 0x27,
	0x47, 0xee, 0xc7, 0x7e, 0xef, 0x93, 0x3b, 0xe8, 0xf4, 0x07, 0x2e, 0xee, 0xf4, 0x4f, 0x0e, 0x07,
	0xfd, 0x9a, 0x81, 0xaa, 0x50, 0xde, 0xef, 0xf5, 0xf6, 0x0f, 0x3b, 0x3a, 0x50, 0x9b, 0xdf, 0x79,
	0xf9, 0xc5, 0xb9, 0xc7, 0x2f, 0xf6, 0x9d, 0xfa, 0x46, 0xc3, 0x61, 0x51, 0xa3, 0x9b, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xd7, 0xd1, 0x7d, 0xf5, 0x9f, 0x05, 0x00, 0x00,
}
