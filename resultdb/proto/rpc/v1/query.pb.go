// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/resultdb/proto/rpc/v1/query.proto

package rpcpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_type "go.chromium.org/luci/resultdb/proto/type"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Filters test results based on TestResult.expected field.
type TestResultPredicate_Expectancy int32

const (
	// All test results satisfiy this.
	// WARNING: using this significantly increases response size and latency.
	TestResultPredicate_ALL TestResultPredicate_Expectancy = 0
	// A test result must belong to a test variant that has one or more
	// unexpected results. It can be used to fetch both unexpected and flakily
	// expected results.
	//
	// Note that the predicate is defined at the test variant level.
	// For example, if a test variant expects a PASS and has results
	// [FAIL, FAIL, PASS], then all results satisfy the predicate because
	// the variant satisfies the predicate.
	TestResultPredicate_VARIANTS_WITH_UNEXPECTED_RESULTS TestResultPredicate_Expectancy = 1
)

var TestResultPredicate_Expectancy_name = map[int32]string{
	0: "ALL",
	1: "VARIANTS_WITH_UNEXPECTED_RESULTS",
}

var TestResultPredicate_Expectancy_value = map[string]int32{
	"ALL":                              0,
	"VARIANTS_WITH_UNEXPECTED_RESULTS": 1,
}

func (x TestResultPredicate_Expectancy) String() string {
	return proto.EnumName(TestResultPredicate_Expectancy_name, int32(x))
}

func (TestResultPredicate_Expectancy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d52ca5016e1701f, []int{0, 0}
}

// Represents a function TestResult -> bool.
// Empty message matches all test results.
//
// Most clients would get invocation name from another service, e.g.
// Buildbucket, use it in TestResultPredicate.invocation.name.
// Also most clients would want to set expected_results to
// VARIANTS_WITH_UNEXPECTED_RESULTS.
type TestResultPredicate struct {
	// A test result must belong to an invocation satisfying this predicate.
	Invocation *InvocationPredicate `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// A test result must have a path satisfying this predicate.
	TestPath *TestPathPredicate `protobuf:"bytes,2,opt,name=test_path,json=testPath,proto3" json:"test_path,omitempty"`
	// A test result must have a variant satisfying this predicate.
	Variant *VariantPredicate `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	// A test result must match this predicate based on TestResult.expected field.
	// Most clients would want to override this field because the default
	// typically causes a large response size.
	Expectancy           TestResultPredicate_Expectancy `protobuf:"varint,4,opt,name=expectancy,proto3,enum=luci.resultdb.rpc.v1.TestResultPredicate_Expectancy" json:"expectancy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *TestResultPredicate) Reset()         { *m = TestResultPredicate{} }
func (m *TestResultPredicate) String() string { return proto.CompactTextString(m) }
func (*TestResultPredicate) ProtoMessage()    {}
func (*TestResultPredicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d52ca5016e1701f, []int{0}
}

func (m *TestResultPredicate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResultPredicate.Unmarshal(m, b)
}
func (m *TestResultPredicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResultPredicate.Marshal(b, m, deterministic)
}
func (m *TestResultPredicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResultPredicate.Merge(m, src)
}
func (m *TestResultPredicate) XXX_Size() int {
	return xxx_messageInfo_TestResultPredicate.Size(m)
}
func (m *TestResultPredicate) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResultPredicate.DiscardUnknown(m)
}

var xxx_messageInfo_TestResultPredicate proto.InternalMessageInfo

func (m *TestResultPredicate) GetInvocation() *InvocationPredicate {
	if m != nil {
		return m.Invocation
	}
	return nil
}

func (m *TestResultPredicate) GetTestPath() *TestPathPredicate {
	if m != nil {
		return m.TestPath
	}
	return nil
}

func (m *TestResultPredicate) GetVariant() *VariantPredicate {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (m *TestResultPredicate) GetExpectancy() TestResultPredicate_Expectancy {
	if m != nil {
		return m.Expectancy
	}
	return TestResultPredicate_ALL
}

// Represents a function Invocation -> bool.
//
// Consists of two parts, connected with logical OR:
// - "root_predicate" oneof, which selects "root" invocations.
// - "ignore_included" predicate, defined on top of the roots.
type InvocationPredicate struct {
	// Invocations matching this predicate are called "roots".
	//
	// Types that are valid to be assigned to RootPredicate:
	//	*InvocationPredicate_Name
	//	*InvocationPredicate_Tag
	RootPredicate isInvocationPredicate_RootPredicate `protobuf_oneof:"root_predicate"`
	// If false, an invocation must be reachable from any of the roots via path of
	// Invocation.included_invocations edges.
	// If true, do not follow inclusion edges.
	IgnoreInclusions     bool     `protobuf:"varint,3,opt,name=ignore_inclusions,json=ignoreInclusions,proto3" json:"ignore_inclusions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvocationPredicate) Reset()         { *m = InvocationPredicate{} }
func (m *InvocationPredicate) String() string { return proto.CompactTextString(m) }
func (*InvocationPredicate) ProtoMessage()    {}
func (*InvocationPredicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d52ca5016e1701f, []int{1}
}

func (m *InvocationPredicate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvocationPredicate.Unmarshal(m, b)
}
func (m *InvocationPredicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvocationPredicate.Marshal(b, m, deterministic)
}
func (m *InvocationPredicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvocationPredicate.Merge(m, src)
}
func (m *InvocationPredicate) XXX_Size() int {
	return xxx_messageInfo_InvocationPredicate.Size(m)
}
func (m *InvocationPredicate) XXX_DiscardUnknown() {
	xxx_messageInfo_InvocationPredicate.DiscardUnknown(m)
}

var xxx_messageInfo_InvocationPredicate proto.InternalMessageInfo

type isInvocationPredicate_RootPredicate interface {
	isInvocationPredicate_RootPredicate()
}

type InvocationPredicate_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

type InvocationPredicate_Tag struct {
	Tag *_type.StringPair `protobuf:"bytes,2,opt,name=tag,proto3,oneof"`
}

func (*InvocationPredicate_Name) isInvocationPredicate_RootPredicate() {}

func (*InvocationPredicate_Tag) isInvocationPredicate_RootPredicate() {}

func (m *InvocationPredicate) GetRootPredicate() isInvocationPredicate_RootPredicate {
	if m != nil {
		return m.RootPredicate
	}
	return nil
}

func (m *InvocationPredicate) GetName() string {
	if x, ok := m.GetRootPredicate().(*InvocationPredicate_Name); ok {
		return x.Name
	}
	return ""
}

func (m *InvocationPredicate) GetTag() *_type.StringPair {
	if x, ok := m.GetRootPredicate().(*InvocationPredicate_Tag); ok {
		return x.Tag
	}
	return nil
}

func (m *InvocationPredicate) GetIgnoreInclusions() bool {
	if m != nil {
		return m.IgnoreInclusions
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InvocationPredicate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InvocationPredicate_Name)(nil),
		(*InvocationPredicate_Tag)(nil),
	}
}

// Represents a function (test path) -> bool.
type TestPathPredicate struct {
	// Types that are valid to be assigned to Predicate:
	//	*TestPathPredicate_Exact
	//	*TestPathPredicate_Prefix
	Predicate            isTestPathPredicate_Predicate `protobuf_oneof:"predicate"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *TestPathPredicate) Reset()         { *m = TestPathPredicate{} }
func (m *TestPathPredicate) String() string { return proto.CompactTextString(m) }
func (*TestPathPredicate) ProtoMessage()    {}
func (*TestPathPredicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d52ca5016e1701f, []int{2}
}

func (m *TestPathPredicate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestPathPredicate.Unmarshal(m, b)
}
func (m *TestPathPredicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestPathPredicate.Marshal(b, m, deterministic)
}
func (m *TestPathPredicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestPathPredicate.Merge(m, src)
}
func (m *TestPathPredicate) XXX_Size() int {
	return xxx_messageInfo_TestPathPredicate.Size(m)
}
func (m *TestPathPredicate) XXX_DiscardUnknown() {
	xxx_messageInfo_TestPathPredicate.DiscardUnknown(m)
}

var xxx_messageInfo_TestPathPredicate proto.InternalMessageInfo

type isTestPathPredicate_Predicate interface {
	isTestPathPredicate_Predicate()
}

type TestPathPredicate_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof"`
}

type TestPathPredicate_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof"`
}

func (*TestPathPredicate_Exact) isTestPathPredicate_Predicate() {}

func (*TestPathPredicate_Prefix) isTestPathPredicate_Predicate() {}

func (m *TestPathPredicate) GetPredicate() isTestPathPredicate_Predicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *TestPathPredicate) GetExact() string {
	if x, ok := m.GetPredicate().(*TestPathPredicate_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *TestPathPredicate) GetPrefix() string {
	if x, ok := m.GetPredicate().(*TestPathPredicate_Prefix); ok {
		return x.Prefix
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TestPathPredicate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TestPathPredicate_Exact)(nil),
		(*TestPathPredicate_Prefix)(nil),
	}
}

// Represents a function Variant -> bool.
type VariantPredicate struct {
	// Types that are valid to be assigned to Predicate:
	//	*VariantPredicate_Exact
	//	*VariantPredicate_Contains
	Predicate            isVariantPredicate_Predicate `protobuf_oneof:"predicate"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *VariantPredicate) Reset()         { *m = VariantPredicate{} }
func (m *VariantPredicate) String() string { return proto.CompactTextString(m) }
func (*VariantPredicate) ProtoMessage()    {}
func (*VariantPredicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d52ca5016e1701f, []int{3}
}

func (m *VariantPredicate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariantPredicate.Unmarshal(m, b)
}
func (m *VariantPredicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariantPredicate.Marshal(b, m, deterministic)
}
func (m *VariantPredicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariantPredicate.Merge(m, src)
}
func (m *VariantPredicate) XXX_Size() int {
	return xxx_messageInfo_VariantPredicate.Size(m)
}
func (m *VariantPredicate) XXX_DiscardUnknown() {
	xxx_messageInfo_VariantPredicate.DiscardUnknown(m)
}

var xxx_messageInfo_VariantPredicate proto.InternalMessageInfo

type isVariantPredicate_Predicate interface {
	isVariantPredicate_Predicate()
}

type VariantPredicate_Exact struct {
	Exact *_type.Variant `protobuf:"bytes,1,opt,name=exact,proto3,oneof"`
}

type VariantPredicate_Contains struct {
	Contains *_type.Variant `protobuf:"bytes,2,opt,name=contains,proto3,oneof"`
}

func (*VariantPredicate_Exact) isVariantPredicate_Predicate() {}

func (*VariantPredicate_Contains) isVariantPredicate_Predicate() {}

func (m *VariantPredicate) GetPredicate() isVariantPredicate_Predicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *VariantPredicate) GetExact() *_type.Variant {
	if x, ok := m.GetPredicate().(*VariantPredicate_Exact); ok {
		return x.Exact
	}
	return nil
}

func (m *VariantPredicate) GetContains() *_type.Variant {
	if x, ok := m.GetPredicate().(*VariantPredicate_Contains); ok {
		return x.Contains
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VariantPredicate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VariantPredicate_Exact)(nil),
		(*VariantPredicate_Contains)(nil),
	}
}

func init() {
	proto.RegisterEnum("luci.resultdb.rpc.v1.TestResultPredicate_Expectancy", TestResultPredicate_Expectancy_name, TestResultPredicate_Expectancy_value)
	proto.RegisterType((*TestResultPredicate)(nil), "luci.resultdb.rpc.v1.TestResultPredicate")
	proto.RegisterType((*InvocationPredicate)(nil), "luci.resultdb.rpc.v1.InvocationPredicate")
	proto.RegisterType((*TestPathPredicate)(nil), "luci.resultdb.rpc.v1.TestPathPredicate")
	proto.RegisterType((*VariantPredicate)(nil), "luci.resultdb.rpc.v1.VariantPredicate")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/resultdb/proto/rpc/v1/query.proto", fileDescriptor_0d52ca5016e1701f)
}

var fileDescriptor_0d52ca5016e1701f = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x6b, 0x1a, 0x41,
	0x14, 0x75, 0x63, 0x9a, 0xe8, 0x15, 0x82, 0x99, 0x84, 0x22, 0x29, 0xb4, 0x22, 0xa5, 0x4d, 0x29,
	0xcc, 0x36, 0xa6, 0x2d, 0x94, 0xbc, 0x54, 0x1b, 0x41, 0x41, 0x82, 0xac, 0x9b, 0xb4, 0xf4, 0x65,
	0x19, 0xc7, 0xc9, 0x3a, 0xa0, 0x33, 0xd3, 0xd9, 0x71, 0xd1, 0x5f, 0xd1, 0x7f, 0xd0, 0x3f, 0xda,
	0x97, 0xb2, 0x1f, 0xee, 0x5a, 0xbb, 0x25, 0x79, 0xbc, 0xe7, 0x9e, 0x73, 0xe6, 0xec, 0xb9, 0x2c,
	0x7c, 0xf4, 0x25, 0xa6, 0x33, 0x2d, 0x17, 0x7c, 0xb9, 0xc0, 0x52, 0xfb, 0xf6, 0x7c, 0x49, 0xb9,
	0xad, 0x59, 0xb0, 0x9c, 0x9b, 0xe9, 0xc4, 0x56, 0x5a, 0x1a, 0x69, 0x6b, 0x45, 0xed, 0xf0, 0xc2,
	0xfe, 0xb1, 0x64, 0x7a, 0x8d, 0x63, 0x08, 0x9d, 0x46, 0x3c, 0xbc, 0xe1, 0x61, 0xad, 0x28, 0x0e,
	0x2f, 0xce, 0x5e, 0xf8, 0x52, 0xfa, 0x73, 0x66, 0x13, 0xc5, 0xed, 0x7b, 0xce, 0xe6, 0x53, 0x6f,
	0xc2, 0x66, 0x24, 0xe4, 0x52, 0x27, 0xb2, 0xb3, 0x0f, 0x8f, 0x79, 0xce, 0xac, 0x15, 0xb3, 0xa9,
	0x5c, 0x2c, 0xa4, 0x48, 0x64, 0xad, 0xdf, 0x7b, 0x70, 0xe2, 0xb2, 0xc0, 0x38, 0x31, 0x71, 0xa4,
	0xd9, 0x94, 0x53, 0x62, 0x18, 0x1a, 0x00, 0x70, 0x11, 0x4a, 0x4a, 0x0c, 0x97, 0xa2, 0x61, 0x35,
	0xad, 0xf3, 0x5a, 0xfb, 0x0d, 0x2e, 0x8a, 0x86, 0x07, 0x19, 0x2f, 0x93, 0x3b, 0x5b, 0x62, 0x74,
	0x0d, 0x55, 0xc3, 0x02, 0xe3, 0x29, 0x62, 0x66, 0x8d, 0xbd, 0xd8, 0xe9, 0x75, 0xb1, 0x53, 0x14,
	0x64, 0x44, 0xcc, 0x2c, 0xf7, 0xa9, 0x98, 0x14, 0x42, 0x9f, 0xe1, 0x30, 0x24, 0x9a, 0x13, 0x61,
	0x1a, 0xe5, 0xd8, 0xe3, 0x55, 0xb1, 0xc7, 0x5d, 0x42, 0xca, 0x2d, 0x36, 0x32, 0xe4, 0x02, 0xb0,
	0x95, 0x62, 0xd4, 0x10, 0x41, 0xd7, 0x8d, 0xfd, 0xa6, 0x75, 0x7e, 0xd4, 0x7e, 0xff, 0xff, 0x20,
	0x3b, 0x8d, 0xe0, 0x5e, 0xa6, 0x75, 0xb6, 0x7c, 0x5a, 0x57, 0x00, 0xf9, 0x06, 0x1d, 0x42, 0xb9,
	0x33, 0x1c, 0xd6, 0x4b, 0xe8, 0x25, 0x34, 0xef, 0x3a, 0xce, 0xa0, 0x73, 0xe3, 0x8e, 0xbd, 0xaf,
	0x03, 0xb7, 0xef, 0xdd, 0xde, 0xf4, 0xbe, 0x8d, 0x7a, 0x5f, 0xdc, 0xde, 0xb5, 0xe7, 0xf4, 0xc6,
	0xb7, 0x43, 0x77, 0x5c, 0xb7, 0x5a, 0xbf, 0x2c, 0x38, 0x29, 0xa8, 0x0f, 0x9d, 0xc2, 0xbe, 0x20,
	0x0b, 0x16, 0xf7, 0x5e, 0xed, 0x97, 0x9c, 0x78, 0x42, 0x6d, 0x28, 0x1b, 0xe2, 0xa7, 0x15, 0x3e,
	0xdf, 0x49, 0x1e, 0x9d, 0x16, 0x8f, 0x8d, 0xe6, 0xc2, 0x1f, 0x11, 0xae, 0xfb, 0x25, 0x27, 0x22,
	0xa3, 0xb7, 0x70, 0xcc, 0x7d, 0x21, 0x35, 0xf3, 0xb8, 0xa0, 0xf3, 0x65, 0xc0, 0xa5, 0x08, 0xe2,
	0x02, 0x2b, 0x4e, 0x3d, 0x59, 0x0c, 0x32, 0xbc, 0x5b, 0x87, 0x23, 0x2d, 0xa5, 0xf1, 0xd4, 0x26,
	0x48, 0xcb, 0x81, 0xe3, 0x7f, 0x8e, 0x82, 0x9e, 0xc2, 0x13, 0xb6, 0x22, 0xd4, 0x64, 0xf1, 0x92,
	0x11, 0x35, 0xe0, 0x40, 0x69, 0x76, 0xcf, 0x57, 0x71, 0xc4, 0x68, 0x91, 0xce, 0xdd, 0x1a, 0x54,
	0x73, 0xcf, 0x9f, 0x16, 0xd4, 0x77, 0xaf, 0x84, 0x2e, 0xb7, 0x3d, 0x6b, 0xed, 0x67, 0x45, 0x5f,
	0x97, 0x8a, 0xf2, 0x07, 0x3f, 0x41, 0x85, 0x4a, 0x61, 0x08, 0x17, 0x41, 0xda, 0xca, 0x03, 0xba,
	0x8c, 0xfe, 0x57, 0xa2, 0x6e, 0xfb, 0xfb, 0xbb, 0xc7, 0xff, 0xac, 0x57, 0x5a, 0x51, 0x35, 0x99,
	0x1c, 0xc4, 0xd8, 0xe5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x9d, 0x16, 0xf2, 0xe7, 0x03,
	0x00, 0x00,
}
