// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/resultdb/proto/rpc/v1/recorder.proto

package resultspb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_type "go.chromium.org/luci/resultdb/proto/type"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A request message for CreateInvocation.
type CreateInvocationRequest struct {
	// Invocation identifier, becomes a part of the invocation.name.
	// LUCI systems MAY create invocations with nicely formatted IDs, such as
	// "build-1234567890". All other clients MUST use GUIDs.
	//
	// Regex: ^[a-z][a-z0-9_\-]*$.
	InvocationId string `protobuf:"bytes,1,opt,name=invocation_id,json=invocationId,proto3" json:"invocation_id,omitempty"`
	// Invocation data to insert.
	Invocation *Invocation `protobuf:"bytes,2,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	// This request is only idempotent if a `request_id` is provided.
	RequestId            string   `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateInvocationRequest) Reset()         { *m = CreateInvocationRequest{} }
func (m *CreateInvocationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateInvocationRequest) ProtoMessage()    {}
func (*CreateInvocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d7c422285c4f93, []int{0}
}

func (m *CreateInvocationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateInvocationRequest.Unmarshal(m, b)
}
func (m *CreateInvocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateInvocationRequest.Marshal(b, m, deterministic)
}
func (m *CreateInvocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateInvocationRequest.Merge(m, src)
}
func (m *CreateInvocationRequest) XXX_Size() int {
	return xxx_messageInfo_CreateInvocationRequest.Size(m)
}
func (m *CreateInvocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateInvocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateInvocationRequest proto.InternalMessageInfo

func (m *CreateInvocationRequest) GetInvocationId() string {
	if m != nil {
		return m.InvocationId
	}
	return ""
}

func (m *CreateInvocationRequest) GetInvocation() *Invocation {
	if m != nil {
		return m.Invocation
	}
	return nil
}

func (m *CreateInvocationRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// A request message for UpdateInvocation RPC.
type UpdateInvocationRequest struct {
	// Invocation to update.
	Invocation *Invocation `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateInvocationRequest) Reset()         { *m = UpdateInvocationRequest{} }
func (m *UpdateInvocationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateInvocationRequest) ProtoMessage()    {}
func (*UpdateInvocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d7c422285c4f93, []int{1}
}

func (m *UpdateInvocationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateInvocationRequest.Unmarshal(m, b)
}
func (m *UpdateInvocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateInvocationRequest.Marshal(b, m, deterministic)
}
func (m *UpdateInvocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateInvocationRequest.Merge(m, src)
}
func (m *UpdateInvocationRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateInvocationRequest.Size(m)
}
func (m *UpdateInvocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateInvocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateInvocationRequest proto.InternalMessageInfo

func (m *UpdateInvocationRequest) GetInvocation() *Invocation {
	if m != nil {
		return m.Invocation
	}
	return nil
}

func (m *UpdateInvocationRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// A request message for FinalizeInvocation RPC.
type FinalizeInvocationRequest struct {
	// Name of the invocation to finalize.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Flag to indicate if the invocation is interrupted.
	// If true, Invocation.state will be set to INTERRUPTED; otherwise COMPLETED.
	// Refer to Invocation.state for the meaning of each state.
	Interrupted          bool     `protobuf:"varint,2,opt,name=interrupted,proto3" json:"interrupted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinalizeInvocationRequest) Reset()         { *m = FinalizeInvocationRequest{} }
func (m *FinalizeInvocationRequest) String() string { return proto.CompactTextString(m) }
func (*FinalizeInvocationRequest) ProtoMessage()    {}
func (*FinalizeInvocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d7c422285c4f93, []int{2}
}

func (m *FinalizeInvocationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinalizeInvocationRequest.Unmarshal(m, b)
}
func (m *FinalizeInvocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinalizeInvocationRequest.Marshal(b, m, deterministic)
}
func (m *FinalizeInvocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizeInvocationRequest.Merge(m, src)
}
func (m *FinalizeInvocationRequest) XXX_Size() int {
	return xxx_messageInfo_FinalizeInvocationRequest.Size(m)
}
func (m *FinalizeInvocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizeInvocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizeInvocationRequest proto.InternalMessageInfo

func (m *FinalizeInvocationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FinalizeInvocationRequest) GetInterrupted() bool {
	if m != nil {
		return m.Interrupted
	}
	return false
}

// A request message for Include RPC.
type IncludeRequest struct {
	// Name of the invocation to include into, see Invocation.name.
	// For example, name of the buildbucket build invocation that should include
	// a swarming task invocation.
	IncludingInvocation string `protobuf:"bytes,1,opt,name=including_invocation,json=includingInvocation,proto3" json:"including_invocation,omitempty"`
	// Name of the invocation to include, see Invocation.name.
	// For example, name of the swarming task invocation to include into a
	// buildbucket build invocation.
	IncludedInvocation string `protobuf:"bytes,2,opt,name=included_invocation,json=includedInvocation,proto3" json:"included_invocation,omitempty"`
	// Names of another invocation included in |including_invocation| that this
	// inclusion overrides.
	// For example, invocation of a died swarming task that we intend to retry
	// and replace with another swarming task.
	// This invocation must be already included in |including_invocation|.
	// The corresponding Invocation.InclusionAttrs.overidden_by is set to
	// |included_invocation|.
	OverrideInvocation   string   `protobuf:"bytes,3,opt,name=override_invocation,json=overrideInvocation,proto3" json:"override_invocation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncludeRequest) Reset()         { *m = IncludeRequest{} }
func (m *IncludeRequest) String() string { return proto.CompactTextString(m) }
func (*IncludeRequest) ProtoMessage()    {}
func (*IncludeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d7c422285c4f93, []int{3}
}

func (m *IncludeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IncludeRequest.Unmarshal(m, b)
}
func (m *IncludeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IncludeRequest.Marshal(b, m, deterministic)
}
func (m *IncludeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncludeRequest.Merge(m, src)
}
func (m *IncludeRequest) XXX_Size() int {
	return xxx_messageInfo_IncludeRequest.Size(m)
}
func (m *IncludeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IncludeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IncludeRequest proto.InternalMessageInfo

func (m *IncludeRequest) GetIncludingInvocation() string {
	if m != nil {
		return m.IncludingInvocation
	}
	return ""
}

func (m *IncludeRequest) GetIncludedInvocation() string {
	if m != nil {
		return m.IncludedInvocation
	}
	return ""
}

func (m *IncludeRequest) GetOverrideInvocation() string {
	if m != nil {
		return m.OverrideInvocation
	}
	return ""
}

// A request message for CreateTestResult RPC.
type CreateTestResultRequest struct {
	// Name of the parent invocation, see Invocation.name.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The test result to create.
	// Test path and result id are used to dedup requests, i.e.
	// if a test result with the same test path and result id already exists in
	// the invocation, then the requests succeeds as opposed to returns with
	// ALREADY_EXISTS error.
	TestResult *TestResult `protobuf:"bytes,2,opt,name=test_result,json=testResult,proto3" json:"test_result,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	// This request is only idempotent if a `request_id` is provided, so it is
	// strongly recommended to populate this field.
	//
	// Impl note: this field is used to compute the spanner-level result id, which
	// will encode tuple (request_id, index_of_request)", where
	// - request_id is a random GUID if not provided by the user
	// - index_of_request is 0 in CreateTestResult RPC, or index of the request
	//   in BatchCreateTestResultsRequest in the batch RPC.
	// TODO(jchinlee): remove this impl note when it is converted into code.
	RequestId            string   `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTestResultRequest) Reset()         { *m = CreateTestResultRequest{} }
func (m *CreateTestResultRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTestResultRequest) ProtoMessage()    {}
func (*CreateTestResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d7c422285c4f93, []int{4}
}

func (m *CreateTestResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTestResultRequest.Unmarshal(m, b)
}
func (m *CreateTestResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTestResultRequest.Marshal(b, m, deterministic)
}
func (m *CreateTestResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTestResultRequest.Merge(m, src)
}
func (m *CreateTestResultRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTestResultRequest.Size(m)
}
func (m *CreateTestResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTestResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTestResultRequest proto.InternalMessageInfo

func (m *CreateTestResultRequest) GetInvocation() string {
	if m != nil {
		return m.Invocation
	}
	return ""
}

func (m *CreateTestResultRequest) GetTestResult() *TestResult {
	if m != nil {
		return m.TestResult
	}
	return nil
}

func (m *CreateTestResultRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// A request message for BatchCreateTestResults RPC.
type BatchCreateTestResultsRequest struct {
	// Name of the parent invocation, see Invocation.name.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// Requests to create test results.
	// requests[i].invocation MUST be either empty or equal to invocation in this
	// message.
	// requests[i].request_id MUST be either empty or equal to request_id in
	// this message.
	Requests []*CreateTestResultRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	// This request is only idempotent if a `request_id` is provided, so it is
	// strongly recommended to populate this field.
	//
	RequestId            string   `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchCreateTestResultsRequest) Reset()         { *m = BatchCreateTestResultsRequest{} }
func (m *BatchCreateTestResultsRequest) String() string { return proto.CompactTextString(m) }
func (*BatchCreateTestResultsRequest) ProtoMessage()    {}
func (*BatchCreateTestResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d7c422285c4f93, []int{5}
}

func (m *BatchCreateTestResultsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCreateTestResultsRequest.Unmarshal(m, b)
}
func (m *BatchCreateTestResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCreateTestResultsRequest.Marshal(b, m, deterministic)
}
func (m *BatchCreateTestResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateTestResultsRequest.Merge(m, src)
}
func (m *BatchCreateTestResultsRequest) XXX_Size() int {
	return xxx_messageInfo_BatchCreateTestResultsRequest.Size(m)
}
func (m *BatchCreateTestResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateTestResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateTestResultsRequest proto.InternalMessageInfo

func (m *BatchCreateTestResultsRequest) GetInvocation() string {
	if m != nil {
		return m.Invocation
	}
	return ""
}

func (m *BatchCreateTestResultsRequest) GetRequests() []*CreateTestResultRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *BatchCreateTestResultsRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// A response message for BatchCreateTestResults RPC.
type BatchCreateTestResultsResponse struct {
	// Test results created.
	TestResults          []*TestResult `protobuf:"bytes,1,rep,name=test_results,json=testResults,proto3" json:"test_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BatchCreateTestResultsResponse) Reset()         { *m = BatchCreateTestResultsResponse{} }
func (m *BatchCreateTestResultsResponse) String() string { return proto.CompactTextString(m) }
func (*BatchCreateTestResultsResponse) ProtoMessage()    {}
func (*BatchCreateTestResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d7c422285c4f93, []int{6}
}

func (m *BatchCreateTestResultsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCreateTestResultsResponse.Unmarshal(m, b)
}
func (m *BatchCreateTestResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCreateTestResultsResponse.Marshal(b, m, deterministic)
}
func (m *BatchCreateTestResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateTestResultsResponse.Merge(m, src)
}
func (m *BatchCreateTestResultsResponse) XXX_Size() int {
	return xxx_messageInfo_BatchCreateTestResultsResponse.Size(m)
}
func (m *BatchCreateTestResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateTestResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateTestResultsResponse proto.InternalMessageInfo

func (m *BatchCreateTestResultsResponse) GetTestResults() []*TestResult {
	if m != nil {
		return m.TestResults
	}
	return nil
}

// A request message for CreateTestExoneration RPC.
type CreateTestExonerationRequest struct {
	// Name of the parent invocation, see Invocation.name.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The TestExoneration to create.
	TestExoneration *TestExoneration `protobuf:"bytes,2,opt,name=test_exoneration,json=testExoneration,proto3" json:"test_exoneration,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	// This request is only idempotent if a `request_id` is provided.
	RequestId            string   `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTestExonerationRequest) Reset()         { *m = CreateTestExonerationRequest{} }
func (m *CreateTestExonerationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTestExonerationRequest) ProtoMessage()    {}
func (*CreateTestExonerationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d7c422285c4f93, []int{7}
}

func (m *CreateTestExonerationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTestExonerationRequest.Unmarshal(m, b)
}
func (m *CreateTestExonerationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTestExonerationRequest.Marshal(b, m, deterministic)
}
func (m *CreateTestExonerationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTestExonerationRequest.Merge(m, src)
}
func (m *CreateTestExonerationRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTestExonerationRequest.Size(m)
}
func (m *CreateTestExonerationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTestExonerationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTestExonerationRequest proto.InternalMessageInfo

func (m *CreateTestExonerationRequest) GetInvocation() string {
	if m != nil {
		return m.Invocation
	}
	return ""
}

func (m *CreateTestExonerationRequest) GetTestExoneration() *TestExoneration {
	if m != nil {
		return m.TestExoneration
	}
	return nil
}

func (m *CreateTestExonerationRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// A request message for BatchCreateTestExonerations RPC.
type BatchCreateTestExonerationsRequest struct {
	// Name of the parent invocation, see Invocation.name.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// Requests to create TestExonerations.
	// requests[i].invocation MUST be either empty or equal to invocation in this
	// message.
	Requests             []*CreateTestExonerationRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *BatchCreateTestExonerationsRequest) Reset()         { *m = BatchCreateTestExonerationsRequest{} }
func (m *BatchCreateTestExonerationsRequest) String() string { return proto.CompactTextString(m) }
func (*BatchCreateTestExonerationsRequest) ProtoMessage()    {}
func (*BatchCreateTestExonerationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d7c422285c4f93, []int{8}
}

func (m *BatchCreateTestExonerationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCreateTestExonerationsRequest.Unmarshal(m, b)
}
func (m *BatchCreateTestExonerationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCreateTestExonerationsRequest.Marshal(b, m, deterministic)
}
func (m *BatchCreateTestExonerationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateTestExonerationsRequest.Merge(m, src)
}
func (m *BatchCreateTestExonerationsRequest) XXX_Size() int {
	return xxx_messageInfo_BatchCreateTestExonerationsRequest.Size(m)
}
func (m *BatchCreateTestExonerationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateTestExonerationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateTestExonerationsRequest proto.InternalMessageInfo

func (m *BatchCreateTestExonerationsRequest) GetInvocation() string {
	if m != nil {
		return m.Invocation
	}
	return ""
}

func (m *BatchCreateTestExonerationsRequest) GetRequests() []*CreateTestExonerationRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

// A response message for BatchCreateTestExonerations RPC.
type BatchCreateTestExonerationsResponse struct {
	// Test exonerations created.
	TestExonerations     []*TestExoneration `protobuf:"bytes,1,rep,name=test_exonerations,json=testExonerations,proto3" json:"test_exonerations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BatchCreateTestExonerationsResponse) Reset()         { *m = BatchCreateTestExonerationsResponse{} }
func (m *BatchCreateTestExonerationsResponse) String() string { return proto.CompactTextString(m) }
func (*BatchCreateTestExonerationsResponse) ProtoMessage()    {}
func (*BatchCreateTestExonerationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d7c422285c4f93, []int{9}
}

func (m *BatchCreateTestExonerationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCreateTestExonerationsResponse.Unmarshal(m, b)
}
func (m *BatchCreateTestExonerationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCreateTestExonerationsResponse.Marshal(b, m, deterministic)
}
func (m *BatchCreateTestExonerationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateTestExonerationsResponse.Merge(m, src)
}
func (m *BatchCreateTestExonerationsResponse) XXX_Size() int {
	return xxx_messageInfo_BatchCreateTestExonerationsResponse.Size(m)
}
func (m *BatchCreateTestExonerationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateTestExonerationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateTestExonerationsResponse proto.InternalMessageInfo

func (m *BatchCreateTestExonerationsResponse) GetTestExonerations() []*TestExoneration {
	if m != nil {
		return m.TestExonerations
	}
	return nil
}

// A request message for DeriveInvocation RPC.
type DeriveInvocationRequest struct {
	// Derive the invocation from the Swarming task.
	SwarmingTask *DeriveInvocationRequest_SwarmingTask `protobuf:"bytes,1,opt,name=swarming_task,json=swarmingTask,proto3" json:"swarming_task,omitempty"`
	// Test path prefix.
	//
	// Examples: "gn:{label}/".
	//
	// See https://gn.googlesource.com/gn/+/master/docs/reference.md#labels for
	// label examples.
	//
	// Generated test path examples:
	// * GTest: gn:{label}/{suite}/{case}
	// * javatests: gn:{label}/{full_java_method_name}
	// * web tests: gn:{label}/{file_name}
	TestPathPrefix string `protobuf:"bytes,2,opt,name=test_path_prefix,json=testPathPrefix,proto3" json:"test_path_prefix,omitempty"`
	// Test variant base. These get combined with the remainder of the test
	// variant definition, including test parameters and other key/value pairs
	// that may be derived from the swarming task.
	//
	// For Chromium, expected keys in the def map are "bucket", "builder", and
	// "test_suite".
	BaseTestVariant      *_type.Variant `protobuf:"bytes,3,opt,name=base_test_variant,json=baseTestVariant,proto3" json:"base_test_variant,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeriveInvocationRequest) Reset()         { *m = DeriveInvocationRequest{} }
func (m *DeriveInvocationRequest) String() string { return proto.CompactTextString(m) }
func (*DeriveInvocationRequest) ProtoMessage()    {}
func (*DeriveInvocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d7c422285c4f93, []int{10}
}

func (m *DeriveInvocationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeriveInvocationRequest.Unmarshal(m, b)
}
func (m *DeriveInvocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeriveInvocationRequest.Marshal(b, m, deterministic)
}
func (m *DeriveInvocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveInvocationRequest.Merge(m, src)
}
func (m *DeriveInvocationRequest) XXX_Size() int {
	return xxx_messageInfo_DeriveInvocationRequest.Size(m)
}
func (m *DeriveInvocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveInvocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveInvocationRequest proto.InternalMessageInfo

func (m *DeriveInvocationRequest) GetSwarmingTask() *DeriveInvocationRequest_SwarmingTask {
	if m != nil {
		return m.SwarmingTask
	}
	return nil
}

func (m *DeriveInvocationRequest) GetTestPathPrefix() string {
	if m != nil {
		return m.TestPathPrefix
	}
	return ""
}

func (m *DeriveInvocationRequest) GetBaseTestVariant() *_type.Variant {
	if m != nil {
		return m.BaseTestVariant
	}
	return nil
}

// Identifies a swarming task.
type DeriveInvocationRequest_SwarmingTask struct {
	// Swarming host of task.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// ID of swarming task to process and insert.
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeriveInvocationRequest_SwarmingTask) Reset()         { *m = DeriveInvocationRequest_SwarmingTask{} }
func (m *DeriveInvocationRequest_SwarmingTask) String() string { return proto.CompactTextString(m) }
func (*DeriveInvocationRequest_SwarmingTask) ProtoMessage()    {}
func (*DeriveInvocationRequest_SwarmingTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d7c422285c4f93, []int{10, 0}
}

func (m *DeriveInvocationRequest_SwarmingTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeriveInvocationRequest_SwarmingTask.Unmarshal(m, b)
}
func (m *DeriveInvocationRequest_SwarmingTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeriveInvocationRequest_SwarmingTask.Marshal(b, m, deterministic)
}
func (m *DeriveInvocationRequest_SwarmingTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveInvocationRequest_SwarmingTask.Merge(m, src)
}
func (m *DeriveInvocationRequest_SwarmingTask) XXX_Size() int {
	return xxx_messageInfo_DeriveInvocationRequest_SwarmingTask.Size(m)
}
func (m *DeriveInvocationRequest_SwarmingTask) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveInvocationRequest_SwarmingTask.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveInvocationRequest_SwarmingTask proto.InternalMessageInfo

func (m *DeriveInvocationRequest_SwarmingTask) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DeriveInvocationRequest_SwarmingTask) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateInvocationRequest)(nil), "luci.resultdb.CreateInvocationRequest")
	proto.RegisterType((*UpdateInvocationRequest)(nil), "luci.resultdb.UpdateInvocationRequest")
	proto.RegisterType((*FinalizeInvocationRequest)(nil), "luci.resultdb.FinalizeInvocationRequest")
	proto.RegisterType((*IncludeRequest)(nil), "luci.resultdb.IncludeRequest")
	proto.RegisterType((*CreateTestResultRequest)(nil), "luci.resultdb.CreateTestResultRequest")
	proto.RegisterType((*BatchCreateTestResultsRequest)(nil), "luci.resultdb.BatchCreateTestResultsRequest")
	proto.RegisterType((*BatchCreateTestResultsResponse)(nil), "luci.resultdb.BatchCreateTestResultsResponse")
	proto.RegisterType((*CreateTestExonerationRequest)(nil), "luci.resultdb.CreateTestExonerationRequest")
	proto.RegisterType((*BatchCreateTestExonerationsRequest)(nil), "luci.resultdb.BatchCreateTestExonerationsRequest")
	proto.RegisterType((*BatchCreateTestExonerationsResponse)(nil), "luci.resultdb.BatchCreateTestExonerationsResponse")
	proto.RegisterType((*DeriveInvocationRequest)(nil), "luci.resultdb.DeriveInvocationRequest")
	proto.RegisterType((*DeriveInvocationRequest_SwarmingTask)(nil), "luci.resultdb.DeriveInvocationRequest.SwarmingTask")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/resultdb/proto/rpc/v1/recorder.proto", fileDescriptor_16d7c422285c4f93)
}

var fileDescriptor_16d7c422285c4f93 = []byte{
	// 910 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0x5e, 0x67, 0x51, 0xd9, 0x3d, 0xd9, 0x6d, 0xb7, 0xb3, 0xd0, 0xdd, 0x7a, 0xd9, 0x36, 0x72,
	0x25, 0x14, 0x09, 0xb0, 0xd5, 0xb4, 0x54, 0xaa, 0xb6, 0x02, 0x11, 0xfa, 0xa3, 0x15, 0x02, 0x55,
	0xa6, 0xb4, 0x12, 0x08, 0xa2, 0x89, 0x3d, 0x49, 0x46, 0x1b, 0x7b, 0xcc, 0xcc, 0x38, 0xed, 0xf2,
	0x00, 0x3c, 0x00, 0x17, 0xdc, 0xc1, 0x2d, 0x97, 0x08, 0x9e, 0x88, 0xd7, 0xe0, 0xae, 0xb2, 0x3d,
	0xb1, 0x9d, 0xb1, 0x9d, 0x9f, 0xbb, 0xe4, 0xcc, 0xf9, 0xce, 0xf9, 0x7c, 0xbe, 0xf1, 0x77, 0x0c,
	0x0f, 0xc7, 0xcc, 0xf6, 0x26, 0x9c, 0x05, 0x34, 0x0e, 0x6c, 0xc6, 0xc7, 0xce, 0x34, 0xf6, 0xa8,
	0xc3, 0x89, 0x88, 0xa7, 0xd2, 0x1f, 0x3a, 0x11, 0x67, 0x92, 0x39, 0x3c, 0xf2, 0x9c, 0xd9, 0x5d,
	0x87, 0x13, 0x8f, 0x71, 0x9f, 0x70, 0x3b, 0x8d, 0xa2, 0xfd, 0x24, 0xd5, 0x9e, 0xa7, 0x9a, 0xb7,
	0xc7, 0x8c, 0x8d, 0xa7, 0xc4, 0xc1, 0x11, 0x75, 0x46, 0x94, 0x4c, 0xfd, 0xc1, 0x90, 0x4c, 0xf0,
	0x8c, 0x32, 0x95, 0x6f, 0x9e, 0xa8, 0x84, 0xf4, 0xdf, 0x30, 0x1e, 0x39, 0x24, 0x88, 0xe4, 0xa5,
	0x3a, 0xec, 0xe8, 0x87, 0x59, 0x89, 0x00, 0x8b, 0x0b, 0x95, 0xf1, 0xe9, 0x3a, 0x4c, 0xe5, 0x65,
	0x44, 0x1c, 0x8f, 0x05, 0x01, 0x0b, 0x15, 0xec, 0x6c, 0x83, 0x07, 0xa4, 0xe1, 0x8c, 0x79, 0x58,
	0xd2, 0x1c, 0xfc, 0x68, 0x03, 0xb0, 0x24, 0x42, 0x0e, 0xb2, 0xa3, 0x0c, 0x6d, 0xfd, 0x61, 0xc0,
	0xd1, 0x97, 0x9c, 0x60, 0x49, 0xce, 0xf3, 0xc2, 0x2e, 0xf9, 0x39, 0x26, 0x42, 0xa2, 0x2e, 0xec,
	0x17, 0xdd, 0x06, 0xd4, 0x3f, 0x36, 0x3a, 0x46, 0x77, 0xb7, 0xbf, 0xfd, 0xdf, 0x17, 0x2d, 0x77,
	0xaf, 0x38, 0x39, 0xf7, 0xd1, 0x43, 0x80, 0xe2, 0xff, 0x71, 0xab, 0x63, 0x74, 0xdb, 0xbd, 0x9b,
	0xf6, 0xc2, 0xec, 0xed, 0x52, 0xfd, 0x52, 0x32, 0x3a, 0x05, 0xe0, 0x59, 0xbf, 0xa4, 0xc3, 0x76,
	0xd2, 0xc1, 0xdd, 0x55, 0x91, 0x73, 0xdf, 0xfa, 0xdd, 0x80, 0xa3, 0xef, 0x22, 0xbf, 0x96, 0xdf,
	0x67, 0x0b, 0x5d, 0x8d, 0x15, 0x5d, 0x33, 0xde, 0xe5, 0xd6, 0x67, 0xd0, 0x8e, 0xd3, 0xd2, 0xa9,
	0x84, 0x8a, 0xb6, 0x69, 0x67, 0x2a, 0xdb, 0x73, 0x95, 0xed, 0xa7, 0x89, 0xca, 0x5f, 0x63, 0x71,
	0xe1, 0x42, 0x96, 0x9e, 0xfc, 0xb6, 0x5e, 0xc2, 0xcd, 0xa7, 0x34, 0xc4, 0x53, 0xfa, 0x4b, 0x0d,
	0xb3, 0x23, 0x78, 0x27, 0xc4, 0x01, 0x29, 0x0f, 0x2c, 0x0d, 0xa0, 0x0e, 0xb4, 0x69, 0x28, 0x09,
	0xe7, 0x71, 0x24, 0x89, 0x9f, 0xb6, 0xdc, 0x71, 0xcb, 0x21, 0xeb, 0x6f, 0x03, 0xae, 0x9e, 0x87,
	0xde, 0x34, 0xf6, 0xc9, 0xbc, 0xda, 0x03, 0x78, 0x8f, 0xa6, 0x11, 0x1a, 0x8e, 0x07, 0xda, 0x13,
	0xab, 0xea, 0x87, 0x79, 0x42, 0x41, 0x06, 0xdd, 0x07, 0x15, 0x26, 0xfe, 0x40, 0x93, 0x47, 0xc1,
	0xd0, 0xfc, 0xbc, 0x84, 0x72, 0xe0, 0x90, 0xcd, 0x08, 0xe7, 0xd4, 0x27, 0x65, 0x54, 0xa6, 0x0c,
	0x9a, 0x1f, 0x15, 0x00, 0xeb, 0xcf, 0xfc, 0x0a, 0xbd, 0x20, 0x42, 0xba, 0xe9, 0xe4, 0xe7, 0xd4,
	0xef, 0x54, 0x24, 0xda, 0xad, 0xea, 0xf0, 0x39, 0xb4, 0x4b, 0x17, 0xb3, 0xe1, 0xfa, 0x14, 0xb5,
	0x55, 0x01, 0x99, 0x07, 0x56, 0xdd, 0xa1, 0xbf, 0x0c, 0x38, 0xed, 0x63, 0xe9, 0x4d, 0x74, 0x96,
	0x62, 0x23, 0x9a, 0x7d, 0xd8, 0x51, 0x35, 0xc5, 0x71, 0xab, 0xb3, 0xdd, 0x6d, 0xf7, 0x3e, 0xd4,
	0x38, 0x36, 0x4c, 0xc1, 0xcd, 0x71, 0xab, 0x98, 0xfe, 0x04, 0xb7, 0x9a, 0x88, 0x8a, 0x88, 0x85,
	0x82, 0xa0, 0x47, 0xb0, 0x57, 0x9a, 0x95, 0x38, 0x36, 0x52, 0x22, 0xcd, 0xc3, 0x72, 0xdb, 0xc5,
	0x9c, 0x84, 0xf5, 0xaf, 0x01, 0x1f, 0x14, 0xb5, 0x9f, 0xbc, 0x61, 0x21, 0xe1, 0x0b, 0x17, 0x77,
	0xad, 0x41, 0x7c, 0x03, 0x07, 0x29, 0x07, 0x52, 0xe0, 0x95, 0x68, 0xb7, 0x6a, 0x78, 0x94, 0xba,
	0x64, 0xa5, 0xae, 0xc9, 0xc5, 0xe8, 0xaa, 0xa1, 0xfc, 0x66, 0x80, 0xa5, 0x4d, 0xa5, 0x84, 0xde,
	0x4c, 0xc3, 0x67, 0x15, 0x0d, 0x3f, 0x6a, 0xd4, 0xb0, 0x3a, 0x9e, 0x42, 0x48, 0x8b, 0xc3, 0x9d,
	0xa5, 0x9c, 0x94, 0x5c, 0x5f, 0xc1, 0x75, 0x7d, 0x54, 0x73, 0xcd, 0x56, 0xcc, 0xca, 0x3d, 0xd0,
	0xc6, 0x24, 0xac, 0x7f, 0x5a, 0x70, 0xf4, 0x98, 0x70, 0x3a, 0xab, 0x71, 0x9c, 0x1f, 0x61, 0x5f,
	0xbc, 0xc6, 0x3c, 0x48, 0x2c, 0x42, 0x26, 0x6e, 0x96, 0xd9, 0xe1, 0x3d, 0xad, 0x49, 0x03, 0xdc,
	0xfe, 0x56, 0x61, 0x5f, 0x60, 0x71, 0xa1, 0x0c, 0x5e, 0x94, 0x42, 0xa8, 0xab, 0x24, 0x8f, 0xb0,
	0x9c, 0x0c, 0x22, 0x4e, 0x46, 0xf4, 0x4d, 0xe6, 0x23, 0xee, 0xd5, 0x24, 0xfe, 0x1c, 0xcb, 0xc9,
	0xf3, 0x34, 0x8a, 0x9e, 0xc1, 0xf5, 0x21, 0x16, 0x64, 0x90, 0xa6, 0xcf, 0x30, 0xa7, 0x38, 0x94,
	0xa9, 0xa6, 0xed, 0xde, 0x89, 0x46, 0x26, 0x59, 0x84, 0xf6, 0xcb, 0x2c, 0xc5, 0xbd, 0x96, 0xa0,
	0x92, 0x19, 0xa8, 0x80, 0xf9, 0x18, 0xf6, 0xca, 0xac, 0xd0, 0x6d, 0xd8, 0x99, 0x30, 0x21, 0x75,
	0x5f, 0xcd, 0x83, 0xe8, 0x10, 0x5a, 0xd4, 0x2f, 0xbb, 0x5b, 0x8b, 0xfa, 0xbd, 0xff, 0xaf, 0xc0,
	0x8e, 0xab, 0xbe, 0x09, 0xd0, 0x2b, 0x38, 0xd0, 0x77, 0x1d, 0xaa, 0x7f, 0x87, 0x2b, 0x13, 0x32,
	0x9b, 0x17, 0x8b, 0xb5, 0x95, 0x14, 0xd6, 0x97, 0x54, 0xa5, 0x70, 0xc3, 0x16, 0x5b, 0x5e, 0xf8,
	0x07, 0x40, 0xd5, 0x2d, 0x83, 0xba, 0x1a, 0xa4, 0x71, 0x11, 0x2d, 0x2f, 0xde, 0x87, 0x77, 0xd5,
	0xa6, 0x41, 0xa7, 0x95, 0xbc, 0xf2, 0x06, 0x32, 0x6f, 0x54, 0x96, 0xe2, 0x93, 0xe4, 0xbb, 0x28,
	0x7b, 0x72, 0xdd, 0xac, 0xd0, 0x9a, 0xb6, 0x68, 0x36, 0xbb, 0x96, 0xb5, 0x85, 0x5e, 0xc3, 0x8d,
	0x7a, 0x2b, 0x44, 0x1f, 0x6b, 0xb0, 0xa5, 0xd6, 0x6e, 0x7e, 0xb2, 0x66, 0x76, 0xf6, 0xc2, 0x5a,
	0x5b, 0x68, 0x04, 0xef, 0xd7, 0xbe, 0xd4, 0x68, 0x13, 0xa7, 0x30, 0x57, 0xbc, 0xdd, 0xd6, 0x16,
	0xfa, 0xd5, 0x80, 0x93, 0x25, 0x16, 0x82, 0xee, 0x2e, 0x27, 0x5e, 0x63, 0x81, 0x66, 0x6f, 0x13,
	0x48, 0xfe, 0xc0, 0xaf, 0xe0, 0x40, 0xb7, 0x85, 0x8a, 0x84, 0x0d, 0xbe, 0xb1, 0xf4, 0x7e, 0xf5,
	0x1f, 0x7c, 0x7f, 0x7f, 0xfd, 0x6f, 0xd3, 0x33, 0xb5, 0xd1, 0xa2, 0xe1, 0xf0, 0x4a, 0x1a, 0xbf,
	0xf7, 0x36, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x1b, 0xd5, 0xd9, 0xf8, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecorderClient is the client API for Recorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecorderClient interface {
	// Creates a new invocation.
	// The request specifies the invocation id and its contents.
	//
	// The response header medata contains "update-token" required for future
	// updates, including finalization.
	//
	// If invocation with the given ID already exists, returns ALREADY_EXISTS
	// error code.
	CreateInvocation(ctx context.Context, in *CreateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error)
	// Updates an existing non-finalized invocation.
	UpdateInvocation(ctx context.Context, in *UpdateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error)
	// Transitions the given invocation to the state FINALIZED.
	FinalizeInvocation(ctx context.Context, in *FinalizeInvocationRequest, opts ...grpc.CallOption) (*Invocation, error)
	// Includes an invocation in the given non-finalized invocation.
	Include(ctx context.Context, in *IncludeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Appends a test result to a non-finalized invocation.
	CreateTestResult(ctx context.Context, in *CreateTestResultRequest, opts ...grpc.CallOption) (*TestResult, error)
	// Atomically appends a batch of test results to a non-finalized invocation.
	BatchCreateTestResults(ctx context.Context, in *BatchCreateTestResultsRequest, opts ...grpc.CallOption) (*BatchCreateTestResultsResponse, error)
	// Appends a test exoneration to a non-finalized invocation.
	CreateTestExoneration(ctx context.Context, in *CreateTestExonerationRequest, opts ...grpc.CallOption) (*TestExoneration, error)
	// Atomically appends a batch of test exonerations to a non-finalized
	// invocation.
	BatchCreateTestExonerations(ctx context.Context, in *BatchCreateTestExonerationsRequest, opts ...grpc.CallOption) (*BatchCreateTestExonerationsResponse, error)
	// Derives an invocation and test results from a swarming task.
	// If necessary, writes them to Spanner. Returns the derived invocation;
	// results must be separately queried.
	//
	// TODO: Remove. This is meant as a temporary rpc for the intermediary stage
	// in which we derive invocations given swarming task IDs, rather than have
	// tasks make RPCs directly.
	DeriveInvocation(ctx context.Context, in *DeriveInvocationRequest, opts ...grpc.CallOption) (*Invocation, error)
}
type recorderPRPCClient struct {
	client *prpc.Client
}

func NewRecorderPRPCClient(client *prpc.Client) RecorderClient {
	return &recorderPRPCClient{client}
}

func (c *recorderPRPCClient) CreateInvocation(ctx context.Context, in *CreateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.client.Call(ctx, "luci.resultdb.Recorder", "CreateInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) UpdateInvocation(ctx context.Context, in *UpdateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.client.Call(ctx, "luci.resultdb.Recorder", "UpdateInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) FinalizeInvocation(ctx context.Context, in *FinalizeInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.client.Call(ctx, "luci.resultdb.Recorder", "FinalizeInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) Include(ctx context.Context, in *IncludeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "luci.resultdb.Recorder", "Include", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) CreateTestResult(ctx context.Context, in *CreateTestResultRequest, opts ...grpc.CallOption) (*TestResult, error) {
	out := new(TestResult)
	err := c.client.Call(ctx, "luci.resultdb.Recorder", "CreateTestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) BatchCreateTestResults(ctx context.Context, in *BatchCreateTestResultsRequest, opts ...grpc.CallOption) (*BatchCreateTestResultsResponse, error) {
	out := new(BatchCreateTestResultsResponse)
	err := c.client.Call(ctx, "luci.resultdb.Recorder", "BatchCreateTestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) CreateTestExoneration(ctx context.Context, in *CreateTestExonerationRequest, opts ...grpc.CallOption) (*TestExoneration, error) {
	out := new(TestExoneration)
	err := c.client.Call(ctx, "luci.resultdb.Recorder", "CreateTestExoneration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) BatchCreateTestExonerations(ctx context.Context, in *BatchCreateTestExonerationsRequest, opts ...grpc.CallOption) (*BatchCreateTestExonerationsResponse, error) {
	out := new(BatchCreateTestExonerationsResponse)
	err := c.client.Call(ctx, "luci.resultdb.Recorder", "BatchCreateTestExonerations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) DeriveInvocation(ctx context.Context, in *DeriveInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.client.Call(ctx, "luci.resultdb.Recorder", "DeriveInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type recorderClient struct {
	cc *grpc.ClientConn
}

func NewRecorderClient(cc *grpc.ClientConn) RecorderClient {
	return &recorderClient{cc}
}

func (c *recorderClient) CreateInvocation(ctx context.Context, in *CreateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.cc.Invoke(ctx, "/luci.resultdb.Recorder/CreateInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) UpdateInvocation(ctx context.Context, in *UpdateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.cc.Invoke(ctx, "/luci.resultdb.Recorder/UpdateInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) FinalizeInvocation(ctx context.Context, in *FinalizeInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.cc.Invoke(ctx, "/luci.resultdb.Recorder/FinalizeInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) Include(ctx context.Context, in *IncludeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/luci.resultdb.Recorder/Include", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) CreateTestResult(ctx context.Context, in *CreateTestResultRequest, opts ...grpc.CallOption) (*TestResult, error) {
	out := new(TestResult)
	err := c.cc.Invoke(ctx, "/luci.resultdb.Recorder/CreateTestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) BatchCreateTestResults(ctx context.Context, in *BatchCreateTestResultsRequest, opts ...grpc.CallOption) (*BatchCreateTestResultsResponse, error) {
	out := new(BatchCreateTestResultsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.Recorder/BatchCreateTestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) CreateTestExoneration(ctx context.Context, in *CreateTestExonerationRequest, opts ...grpc.CallOption) (*TestExoneration, error) {
	out := new(TestExoneration)
	err := c.cc.Invoke(ctx, "/luci.resultdb.Recorder/CreateTestExoneration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) BatchCreateTestExonerations(ctx context.Context, in *BatchCreateTestExonerationsRequest, opts ...grpc.CallOption) (*BatchCreateTestExonerationsResponse, error) {
	out := new(BatchCreateTestExonerationsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.Recorder/BatchCreateTestExonerations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) DeriveInvocation(ctx context.Context, in *DeriveInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.cc.Invoke(ctx, "/luci.resultdb.Recorder/DeriveInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecorderServer is the server API for Recorder service.
type RecorderServer interface {
	// Creates a new invocation.
	// The request specifies the invocation id and its contents.
	//
	// The response header medata contains "update-token" required for future
	// updates, including finalization.
	//
	// If invocation with the given ID already exists, returns ALREADY_EXISTS
	// error code.
	CreateInvocation(context.Context, *CreateInvocationRequest) (*Invocation, error)
	// Updates an existing non-finalized invocation.
	UpdateInvocation(context.Context, *UpdateInvocationRequest) (*Invocation, error)
	// Transitions the given invocation to the state FINALIZED.
	FinalizeInvocation(context.Context, *FinalizeInvocationRequest) (*Invocation, error)
	// Includes an invocation in the given non-finalized invocation.
	Include(context.Context, *IncludeRequest) (*empty.Empty, error)
	// Appends a test result to a non-finalized invocation.
	CreateTestResult(context.Context, *CreateTestResultRequest) (*TestResult, error)
	// Atomically appends a batch of test results to a non-finalized invocation.
	BatchCreateTestResults(context.Context, *BatchCreateTestResultsRequest) (*BatchCreateTestResultsResponse, error)
	// Appends a test exoneration to a non-finalized invocation.
	CreateTestExoneration(context.Context, *CreateTestExonerationRequest) (*TestExoneration, error)
	// Atomically appends a batch of test exonerations to a non-finalized
	// invocation.
	BatchCreateTestExonerations(context.Context, *BatchCreateTestExonerationsRequest) (*BatchCreateTestExonerationsResponse, error)
	// Derives an invocation and test results from a swarming task.
	// If necessary, writes them to Spanner. Returns the derived invocation;
	// results must be separately queried.
	//
	// TODO: Remove. This is meant as a temporary rpc for the intermediary stage
	// in which we derive invocations given swarming task IDs, rather than have
	// tasks make RPCs directly.
	DeriveInvocation(context.Context, *DeriveInvocationRequest) (*Invocation, error)
}

// UnimplementedRecorderServer can be embedded to have forward compatible implementations.
type UnimplementedRecorderServer struct {
}

func (*UnimplementedRecorderServer) CreateInvocation(ctx context.Context, req *CreateInvocationRequest) (*Invocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvocation not implemented")
}
func (*UnimplementedRecorderServer) UpdateInvocation(ctx context.Context, req *UpdateInvocationRequest) (*Invocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvocation not implemented")
}
func (*UnimplementedRecorderServer) FinalizeInvocation(ctx context.Context, req *FinalizeInvocationRequest) (*Invocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeInvocation not implemented")
}
func (*UnimplementedRecorderServer) Include(ctx context.Context, req *IncludeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Include not implemented")
}
func (*UnimplementedRecorderServer) CreateTestResult(ctx context.Context, req *CreateTestResultRequest) (*TestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestResult not implemented")
}
func (*UnimplementedRecorderServer) BatchCreateTestResults(ctx context.Context, req *BatchCreateTestResultsRequest) (*BatchCreateTestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateTestResults not implemented")
}
func (*UnimplementedRecorderServer) CreateTestExoneration(ctx context.Context, req *CreateTestExonerationRequest) (*TestExoneration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestExoneration not implemented")
}
func (*UnimplementedRecorderServer) BatchCreateTestExonerations(ctx context.Context, req *BatchCreateTestExonerationsRequest) (*BatchCreateTestExonerationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateTestExonerations not implemented")
}
func (*UnimplementedRecorderServer) DeriveInvocation(ctx context.Context, req *DeriveInvocationRequest) (*Invocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveInvocation not implemented")
}

func RegisterRecorderServer(s prpc.Registrar, srv RecorderServer) {
	s.RegisterService(&_Recorder_serviceDesc, srv)
}

func _Recorder_CreateInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).CreateInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.Recorder/CreateInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).CreateInvocation(ctx, req.(*CreateInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_UpdateInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).UpdateInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.Recorder/UpdateInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).UpdateInvocation(ctx, req.(*UpdateInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_FinalizeInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).FinalizeInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.Recorder/FinalizeInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).FinalizeInvocation(ctx, req.(*FinalizeInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_Include_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncludeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).Include(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.Recorder/Include",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).Include(ctx, req.(*IncludeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_CreateTestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).CreateTestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.Recorder/CreateTestResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).CreateTestResult(ctx, req.(*CreateTestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_BatchCreateTestResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateTestResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).BatchCreateTestResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.Recorder/BatchCreateTestResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).BatchCreateTestResults(ctx, req.(*BatchCreateTestResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_CreateTestExoneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestExonerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).CreateTestExoneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.Recorder/CreateTestExoneration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).CreateTestExoneration(ctx, req.(*CreateTestExonerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_BatchCreateTestExonerations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateTestExonerationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).BatchCreateTestExonerations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.Recorder/BatchCreateTestExonerations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).BatchCreateTestExonerations(ctx, req.(*BatchCreateTestExonerationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_DeriveInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).DeriveInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.Recorder/DeriveInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).DeriveInvocation(ctx, req.(*DeriveInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recorder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.resultdb.Recorder",
	HandlerType: (*RecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvocation",
			Handler:    _Recorder_CreateInvocation_Handler,
		},
		{
			MethodName: "UpdateInvocation",
			Handler:    _Recorder_UpdateInvocation_Handler,
		},
		{
			MethodName: "FinalizeInvocation",
			Handler:    _Recorder_FinalizeInvocation_Handler,
		},
		{
			MethodName: "Include",
			Handler:    _Recorder_Include_Handler,
		},
		{
			MethodName: "CreateTestResult",
			Handler:    _Recorder_CreateTestResult_Handler,
		},
		{
			MethodName: "BatchCreateTestResults",
			Handler:    _Recorder_BatchCreateTestResults_Handler,
		},
		{
			MethodName: "CreateTestExoneration",
			Handler:    _Recorder_CreateTestExoneration_Handler,
		},
		{
			MethodName: "BatchCreateTestExonerations",
			Handler:    _Recorder_BatchCreateTestExonerations_Handler,
		},
		{
			MethodName: "DeriveInvocation",
			Handler:    _Recorder_DeriveInvocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/resultdb/proto/rpc/v1/recorder.proto",
}
