// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.resultdb.rpc.v1;

import "google/api/field_behavior.proto";
import "go.chromium.org/luci/resultdb/proto/type/common.proto";

option go_package = "go.chromium.org/luci/resultdb/proto/rpc/v1;rpcpb";

// Represents a function TestResult -> bool.
// Empty message matches all test results.
//
// Most clients would get invocation name from another service, e.g.
// Buildbucket, use it in TestResultPredicate.invocation.name.
// Also most clients would want to set expected_results to
// VARIANTS_WITH_UNEXPECTED_RESULTS.
message TestResultPredicate {
  // A test result must belong to an invocation satisfying this predicate.
  InvocationPredicate invocation = 1;

  // A test result must have a path satisfying this predicate.
  TestPathPredicate test_path = 2;

  // A test result must have a variant satisfying this predicate.
  VariantPredicate variant = 3;

  // Filters test results based on TestResult.expected field.
  enum Expectancy {
    // All test results satisfiy this.
    // WARNING: using this significantly increases response size and latency.
    ALL = 0;

    // A test result must belong to a test variant that has one or more
    // unexpected results. It can be used to fetch both unexpected and flakily
    // expected results.
    //
    // Note that the predicate is defined at the test variant level.
    // For example, if a test variant expects a PASS and has results
    // [FAIL, FAIL, PASS], then all results satisfy the predicate because
    // the variant satisfies the predicate.
    VARIANTS_WITH_UNEXPECTED_RESULTS = 1;

    // Note: if you need unexpected results, VARIANTS_WITH_UNEXPECTED_RESULTS
    // generally does the job, but if you need *ONLY* unexpected results, feel
    // free to file a feature request.
  }

  // A test result must match this predicate based on TestResult.expected field.
  // Most clients would want to override this field because the default
  // typically causes a large response size.
  Expectancy expectancy = 4;
}

// Represents a function TestExoneration -> bool.
// Empty message matches all test exonerations.
message TestExonerationPredicate {
  // A test exoneration must belong to an invocation satisfying this predicate.
  InvocationPredicate invocation = 1;

  // A test exoneration must have a test path satisfying this predicate.
  TestPathPredicate test_path = 2;

  // A test exoneration must have a variant satisfying this predicate.
  VariantPredicate variant = 3;
}

// Represents a function Invocation -> bool.
//
// Consists of two parts, connected with logical OR:
// - "root_predicate" oneof, which selects "root" invocations.
// - "ignore_included" predicate, defined on top of the roots.
message InvocationPredicate {

  // Invocations matching this predicate are called "roots".
  oneof root_predicate {
    // An invocation must have this name.
    string name = 1;

    // An invocation must have this tag.
    luci.resultdb.type.StringPair tag = 2;
  }

  // If false, an invocation must be reachable from any of the roots via path of
  // Invocation.included_invocations edges.
  // If true, do not follow inclusion edges.
  bool ignore_inclusions = 3;
}

// Represents a function (test path) -> bool.
message TestPathPredicate {
  oneof predicate {
    // A test path must be this value exactly.
    string exact = 1;

    // A test path must start with this prefix.
    // Note: most of the time, the prefix must end with a delimiter,
    // for example, if there tests "foo.bar" and "foo.baz", the prefix should
    // be "foo." (not "foo"), so that "fooz.qux" is not accidentally matched.
    string prefix = 2;
  }
}

// Represents a function Variant -> bool.
message VariantPredicate {
  oneof predicate {
    // A variant must be equal this definition exactly.
    luci.resultdb.type.Variant exact = 1;

    // A variant's key-value pairs must contain those in this one.
    luci.resultdb.type.Variant contains = 2;
  }
}
