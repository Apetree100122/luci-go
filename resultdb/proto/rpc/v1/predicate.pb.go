// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/resultdb/proto/rpc/v1/predicate.proto

package rpcpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_type "go.chromium.org/luci/resultdb/proto/type"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Filters test results based on TestResult.expected field.
type TestResultPredicate_Expectancy int32

const (
	// All test results satisfiy this.
	// WARNING: using this significantly increases response size and latency.
	TestResultPredicate_ALL TestResultPredicate_Expectancy = 0
	// A test result must belong to a test variant that has one or more
	// unexpected results. It can be used to fetch both unexpected and flakily
	// expected results.
	//
	// Note that the predicate is defined at the test variant level.
	// For example, if a test variant expects a PASS and has results
	// [FAIL, FAIL, PASS], then all results satisfy the predicate because
	// the variant satisfies the predicate.
	TestResultPredicate_VARIANTS_WITH_UNEXPECTED_RESULTS TestResultPredicate_Expectancy = 1
)

var TestResultPredicate_Expectancy_name = map[int32]string{
	0: "ALL",
	1: "VARIANTS_WITH_UNEXPECTED_RESULTS",
}

var TestResultPredicate_Expectancy_value = map[string]int32{
	"ALL":                              0,
	"VARIANTS_WITH_UNEXPECTED_RESULTS": 1,
}

func (x TestResultPredicate_Expectancy) String() string {
	return proto.EnumName(TestResultPredicate_Expectancy_name, int32(x))
}

func (TestResultPredicate_Expectancy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c5e4555b96213a1b, []int{0, 0}
}

// Represents a function TestResult -> bool.
// Empty message matches all test results.
//
// Most clients would want to set expected_results to
// VARIANTS_WITH_UNEXPECTED_RESULTS.
type TestResultPredicate struct {
	// A test result must have a test id matching this regular expression
	// entirely, i.e. the expression is implicitly wrapped with ^ and $.
	TestIdRegexp string `protobuf:"bytes,1,opt,name=test_id_regexp,json=testIdRegexp,proto3" json:"test_id_regexp,omitempty"`
	// A test result must have a variant satisfying this predicate.
	Variant *VariantPredicate `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	// A test result must match this predicate based on TestResult.expected field.
	// Most clients would want to override this field because the default
	// typically causes a large response size.
	Expectancy           TestResultPredicate_Expectancy `protobuf:"varint,3,opt,name=expectancy,proto3,enum=luci.resultdb.rpc.v1.TestResultPredicate_Expectancy" json:"expectancy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *TestResultPredicate) Reset()         { *m = TestResultPredicate{} }
func (m *TestResultPredicate) String() string { return proto.CompactTextString(m) }
func (*TestResultPredicate) ProtoMessage()    {}
func (*TestResultPredicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e4555b96213a1b, []int{0}
}

func (m *TestResultPredicate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResultPredicate.Unmarshal(m, b)
}
func (m *TestResultPredicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResultPredicate.Marshal(b, m, deterministic)
}
func (m *TestResultPredicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResultPredicate.Merge(m, src)
}
func (m *TestResultPredicate) XXX_Size() int {
	return xxx_messageInfo_TestResultPredicate.Size(m)
}
func (m *TestResultPredicate) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResultPredicate.DiscardUnknown(m)
}

var xxx_messageInfo_TestResultPredicate proto.InternalMessageInfo

func (m *TestResultPredicate) GetTestIdRegexp() string {
	if m != nil {
		return m.TestIdRegexp
	}
	return ""
}

func (m *TestResultPredicate) GetVariant() *VariantPredicate {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (m *TestResultPredicate) GetExpectancy() TestResultPredicate_Expectancy {
	if m != nil {
		return m.Expectancy
	}
	return TestResultPredicate_ALL
}

// Represents a function TestExoneration -> bool.
// Empty message matches all test exonerations.
type TestExonerationPredicate struct {
	// A test exoneration must have a test id matching this regular expression
	// entirely, i.e. the expression is implicitly wrapped with ^ and $.
	TestIdRegexp string `protobuf:"bytes,1,opt,name=test_id_regexp,json=testIdRegexp,proto3" json:"test_id_regexp,omitempty"`
	// A test exoneration must have a variant satisfying this predicate.
	Variant              *VariantPredicate `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TestExonerationPredicate) Reset()         { *m = TestExonerationPredicate{} }
func (m *TestExonerationPredicate) String() string { return proto.CompactTextString(m) }
func (*TestExonerationPredicate) ProtoMessage()    {}
func (*TestExonerationPredicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e4555b96213a1b, []int{1}
}

func (m *TestExonerationPredicate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestExonerationPredicate.Unmarshal(m, b)
}
func (m *TestExonerationPredicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestExonerationPredicate.Marshal(b, m, deterministic)
}
func (m *TestExonerationPredicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestExonerationPredicate.Merge(m, src)
}
func (m *TestExonerationPredicate) XXX_Size() int {
	return xxx_messageInfo_TestExonerationPredicate.Size(m)
}
func (m *TestExonerationPredicate) XXX_DiscardUnknown() {
	xxx_messageInfo_TestExonerationPredicate.DiscardUnknown(m)
}

var xxx_messageInfo_TestExonerationPredicate proto.InternalMessageInfo

func (m *TestExonerationPredicate) GetTestIdRegexp() string {
	if m != nil {
		return m.TestIdRegexp
	}
	return ""
}

func (m *TestExonerationPredicate) GetVariant() *VariantPredicate {
	if m != nil {
		return m.Variant
	}
	return nil
}

// Represents a function Variant -> bool.
type VariantPredicate struct {
	// Types that are valid to be assigned to Predicate:
	//	*VariantPredicate_Equals
	//	*VariantPredicate_Contains
	Predicate            isVariantPredicate_Predicate `protobuf_oneof:"predicate"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *VariantPredicate) Reset()         { *m = VariantPredicate{} }
func (m *VariantPredicate) String() string { return proto.CompactTextString(m) }
func (*VariantPredicate) ProtoMessage()    {}
func (*VariantPredicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5e4555b96213a1b, []int{2}
}

func (m *VariantPredicate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariantPredicate.Unmarshal(m, b)
}
func (m *VariantPredicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariantPredicate.Marshal(b, m, deterministic)
}
func (m *VariantPredicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariantPredicate.Merge(m, src)
}
func (m *VariantPredicate) XXX_Size() int {
	return xxx_messageInfo_VariantPredicate.Size(m)
}
func (m *VariantPredicate) XXX_DiscardUnknown() {
	xxx_messageInfo_VariantPredicate.DiscardUnknown(m)
}

var xxx_messageInfo_VariantPredicate proto.InternalMessageInfo

type isVariantPredicate_Predicate interface {
	isVariantPredicate_Predicate()
}

type VariantPredicate_Equals struct {
	Equals *_type.Variant `protobuf:"bytes,1,opt,name=equals,proto3,oneof"`
}

type VariantPredicate_Contains struct {
	Contains *_type.Variant `protobuf:"bytes,2,opt,name=contains,proto3,oneof"`
}

func (*VariantPredicate_Equals) isVariantPredicate_Predicate() {}

func (*VariantPredicate_Contains) isVariantPredicate_Predicate() {}

func (m *VariantPredicate) GetPredicate() isVariantPredicate_Predicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *VariantPredicate) GetEquals() *_type.Variant {
	if x, ok := m.GetPredicate().(*VariantPredicate_Equals); ok {
		return x.Equals
	}
	return nil
}

func (m *VariantPredicate) GetContains() *_type.Variant {
	if x, ok := m.GetPredicate().(*VariantPredicate_Contains); ok {
		return x.Contains
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VariantPredicate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VariantPredicate_Equals)(nil),
		(*VariantPredicate_Contains)(nil),
	}
}

func init() {
	proto.RegisterEnum("luci.resultdb.rpc.v1.TestResultPredicate_Expectancy", TestResultPredicate_Expectancy_name, TestResultPredicate_Expectancy_value)
	proto.RegisterType((*TestResultPredicate)(nil), "luci.resultdb.rpc.v1.TestResultPredicate")
	proto.RegisterType((*TestExonerationPredicate)(nil), "luci.resultdb.rpc.v1.TestExonerationPredicate")
	proto.RegisterType((*VariantPredicate)(nil), "luci.resultdb.rpc.v1.VariantPredicate")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/resultdb/proto/rpc/v1/predicate.proto", fileDescriptor_c5e4555b96213a1b)
}

var fileDescriptor_c5e4555b96213a1b = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xc1, 0x8b, 0xd3, 0x40,
	0x18, 0xc5, 0x37, 0xbb, 0xb0, 0xeb, 0x4e, 0x65, 0x29, 0xa3, 0x87, 0xb0, 0x1e, 0x0c, 0x61, 0x91,
	0x9e, 0x66, 0xdc, 0xe8, 0x1e, 0x74, 0x2f, 0xb6, 0x1a, 0x68, 0xa1, 0x94, 0x32, 0x4d, 0xab, 0x78,
	0x09, 0x93, 0xc9, 0x98, 0x0e, 0x24, 0x99, 0x71, 0x32, 0x09, 0xed, 0xd5, 0xbf, 0x40, 0xff, 0x63,
	0x49, 0xda, 0x44, 0x29, 0x05, 0x7b, 0xf2, 0xfa, 0xbe, 0xdf, 0x7b, 0xdf, 0x63, 0xe6, 0x03, 0xef,
	0x13, 0x89, 0xd8, 0x5a, 0xcb, 0x4c, 0x94, 0x19, 0x92, 0x3a, 0xc1, 0x69, 0xc9, 0x04, 0xd6, 0xbc,
	0x28, 0x53, 0x13, 0x47, 0x58, 0x69, 0x69, 0x24, 0xd6, 0x8a, 0xe1, 0xea, 0x1e, 0x2b, 0xcd, 0x63,
	0xc1, 0xa8, 0xe1, 0xa8, 0x91, 0xe1, 0xf3, 0x9a, 0x45, 0x2d, 0x8b, 0xb4, 0x62, 0xa8, 0xba, 0xbf,
	0x7d, 0x99, 0x48, 0x99, 0xa4, 0x1c, 0x53, 0x25, 0xf0, 0x37, 0xc1, 0xd3, 0x38, 0x8c, 0xf8, 0x9a,
	0x56, 0x42, 0xea, 0x9d, 0xed, 0xf6, 0xe1, 0x94, 0x95, 0x66, 0xab, 0x38, 0x66, 0x32, 0xcb, 0x64,
	0xbe, 0xb3, 0xb9, 0x3f, 0xcf, 0xc1, 0xb3, 0x80, 0x17, 0x86, 0x34, 0xe0, 0xbc, 0xed, 0x02, 0xef,
	0xc0, 0x8d, 0xe1, 0x85, 0x09, 0x45, 0x1c, 0x6a, 0x9e, 0xf0, 0x8d, 0xb2, 0x2d, 0xc7, 0x1a, 0x5c,
	0x93, 0xa7, 0xb5, 0x3a, 0x89, 0x49, 0xa3, 0xc1, 0x0f, 0xe0, 0xaa, 0xa2, 0x5a, 0xd0, 0xdc, 0xd8,
	0xe7, 0x8e, 0x35, 0xe8, 0x79, 0xaf, 0xd0, 0xb1, 0xf6, 0x68, 0xb5, 0x83, 0xba, 0x78, 0xd2, 0xda,
	0x60, 0x00, 0x00, 0xdf, 0x28, 0xce, 0x0c, 0xcd, 0xd9, 0xd6, 0xbe, 0x70, 0xac, 0xc1, 0x8d, 0xf7,
	0xf6, 0x78, 0xc8, 0x91, 0x9a, 0xc8, 0xef, 0xbc, 0xe4, 0xaf, 0x1c, 0xf7, 0x11, 0x80, 0x3f, 0x13,
	0x78, 0x05, 0x2e, 0x86, 0xd3, 0x69, 0xff, 0x0c, 0xde, 0x01, 0x67, 0x35, 0x24, 0x93, 0xe1, 0x2c,
	0x58, 0x84, 0x9f, 0x27, 0xc1, 0x38, 0x5c, 0xce, 0xfc, 0x2f, 0x73, 0xff, 0x63, 0xe0, 0x7f, 0x0a,
	0x89, 0xbf, 0x58, 0x4e, 0x83, 0x45, 0xdf, 0x72, 0x7f, 0x58, 0xc0, 0xae, 0x77, 0xf9, 0x1b, 0x99,
	0x73, 0x4d, 0x8d, 0x90, 0xf9, 0x7f, 0x7f, 0x17, 0xf7, 0x97, 0x05, 0xfa, 0x87, 0x53, 0xf8, 0x00,
	0x2e, 0xf9, 0xf7, 0x92, 0xa6, 0x45, 0xb3, 0xb4, 0xe7, 0xbd, 0x38, 0x48, 0xad, 0xbf, 0xb7, 0xcd,
	0x1c, 0x9f, 0x91, 0x3d, 0x0c, 0xdf, 0x81, 0x27, 0x4c, 0xe6, 0x86, 0x8a, 0xbc, 0xd8, 0xd7, 0xf9,
	0x87, 0xb1, 0xc3, 0x47, 0x3d, 0x70, 0xdd, 0xdd, 0xe7, 0xc8, 0xfb, 0xfa, 0xfa, 0xf4, 0xbb, 0x7e,
	0xd4, 0x8a, 0xa9, 0x28, 0xba, 0x6c, 0xb4, 0x37, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x40,
	0x7f, 0x08, 0x12, 0x03, 0x00, 0x00,
}
