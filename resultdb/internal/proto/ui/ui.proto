// Copyright 2020 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.resultdb.internal.ui;

import "go.chromium.org/luci/resultdb/proto/v1/common.proto";
import "go.chromium.org/luci/resultdb/proto/v1/test_metadata.proto";
import "go.chromium.org/luci/resultdb/proto/v1/test_result.proto";

option go_package = "go.chromium.org/luci/resultdb/internal/proto/ui;uipb";

// Service specific to UIs that present test results.
// Do not use this service without talking to its owners.
service UI {
  // Retrieves test variants from an invocation, recursively.
  // Supports invocation inclusions.
  // For displaying test variants in the UI.
  rpc QueryTestVariants(QueryTestVariantsRequest) returns (QueryTestVariantsResponse) {};
}

// A request message for QueryTestVariants RPC.
message QueryTestVariantsRequest {
  // Retrieve test variants included in these invocations, directly or indirectly
  // (via Invocation.included_invocations).
  //
  // Specifying multiple invocations is equivalent to querying one invocation
  // that includes these.
  repeated string invocations = 2;

  // The maximum number of test variants to return.
  //
  // The service may return fewer than this value.
  // If unspecified, at most 100 test variants will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 4;

  // A page token, received from a previous `QueryTestVariants` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `QueryTestVariants` MUST
  // match the call that provided the page token.
  string page_token = 5;
}

// A response message for QueryTestVariants RPC.
message QueryTestVariantsResponse {
  // Matched test variants.
  // Ordered by TestVariantStatus, test_id, then variant_hash
  repeated TestVariant test_variants = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there were no subsequent pages at the time of
  // request.
  string next_page_token = 2;
}

// Represents a matching test variant with its outcomes.
message TestVariant {
  // A unique identifier of the test in a LUCI project.
  // Regex: ^[[::print::]]{1,256}$
  //
  // Refer to luci.resultdb.v1.TestResult.test_id for details.
  string test_id = 1;

  // Description of one specific way of running the test,
  // e.g. a specific bucket, builder and a test suite.
  luci.resultdb.v1.Variant variant = 2;

  // Hash of the variant.
  // hex(sha256(sorted(''.join('%s:%s\n' for k, v in variant.items())))).
  string variant_hash = 3;

  // Status of the test variant.
  TestVariantStatus status = 4;

  // Outcomes of the test variant.
  repeated TestResultBundle results = 5;

  // Test exonerations if any test variant is exonerated.
  repeated luci.resultdb.v1.TestExoneration exonerations = 6;

  // Information about the test at the time of its execution.
  luci.resultdb.v1.TestMetadata test_metadata = 7;
}

// Outcomes of an execution of the test variant.
message TestResultBundle {
  // Result of the test variant execution.
  luci.resultdb.v1.TestResult result = 1;

  // TODO(crbug.com/1154385) Add artifacts to the bundle when suppet GERRIT view.
}

// Status of a test variant.
enum TestVariantStatus {
  // a test variant must not have this status.
  // This is only used when filtering variants.
  TEST_VARIANT_STATUS_UNSPECIFIED = 0;
  // The test variant has no exonerations, and all results are unexpected.
  UNEXPECTED = 10;
  // The test variant has no exonerations, and all results are unexpectedly skipped.
  UNEXPECTEDLY_SKIPPED = 20;
  // The test variant has no exonerations, and has both expected and unexpected
  // results.
  FLAKY = 30;
  // The test variant has one or more test exonerations.
  EXONERATED = 40;
  // The test variant has no exonerations, and all results are expected.
  EXPECTED = 50;
}
