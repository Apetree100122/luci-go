// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.bisection.v1;

import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "go.chromium.org/luci/bisection/proto/v1/bugs.proto";
import "go.chromium.org/luci/bisection/proto/v1/common.proto";
import "go.chromium.org/luci/bisection/proto/v1/culprits.proto";
import "go.chromium.org/luci/bisection/proto/v1/heuristic.proto";
import "go.chromium.org/luci/bisection/proto/v1/nthsection.proto";
import "go.chromium.org/luci/buildbucket/proto/builder_common.proto";

option go_package = "go.chromium.org/luci/bisection/proto/v1;bisectionpb";

// Analyses service includes all methods related to failure analyses
// called from LUCI Bisection clients, such as SoM.
service Analyses {
  // GetAnalysis is used to get an analysis by analysis ID.
  rpc GetAnalysis(GetAnalysisRequest) returns (Analysis);

  // QueryAnalysis is used to query for the status and result of analyses.
  // The user can pass in the failure information to retrieve the analyses.
  rpc QueryAnalysis(QueryAnalysisRequest) returns (QueryAnalysisResponse);

  // ListAnalyses is used to get existing analyses.
  // Most recently created analyses are returned first.
  rpc ListAnalyses(ListAnalysesRequest) returns (ListAnalysesResponse);

  // TriggerAnalysis is used to trigger an analysis for a failed build.
  // This RPC is called from a LUCI Bisection client like SoM or Milo.
  // If an existing analysis is found for the same failure, no new analysis
  // will be triggered.
  rpc TriggerAnalysis(TriggerAnalysisRequest) returns (TriggerAnalysisResponse);

  // Update the information of an analysis,
  // e.g. update the bugs associated with an analysis.
  // Mainly used by SoM, since LUCI Bisection does not have any information
  // about bugs created by sheriffs.
  rpc UpdateAnalysis(UpdateAnalysisRequest) returns (Analysis);
}

message GetAnalysisRequest {
  // ID of the analysis.
  int64 analysis_id = 1 [ (google.api.field_behavior) = REQUIRED ];
}

message QueryAnalysisRequest {
  // The build failure information to query for the analyses.
  BuildFailure build_failure = 1;
}

message QueryAnalysisResponse {
  // The analyses corresponding to the QueryAnalysisRequest.
  repeated Analysis analyses = 1;
}

message ListAnalysesRequest {
  // Optional. The maximum number of analyses to be returned in the response.
  // The service may return fewer than this value.
  // If unspecified, at most 50 analyses will be returned.
  // The maximum value is 200; values above 200 will be coerced to 200.
  int32 page_size = 1;
  // Optional. A page token, received from a previous `ListAnalyses` call.
  // Provide this to retrieve the subsequent page.
  // When paginating, all other parameters provided to `ListAnalyses` must
  // match the call that provided the page token,
  // with the exception of page_size and page_token.
  string page_token = 2;
}

message ListAnalysesResponse {
  // The analyses corresponding to the ListAnalysesRequest.
  repeated Analysis analyses = 1;
  // The token to send as `page_token` to retrieve the next page of analyses.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message TriggerAnalysisRequest {
  // Failure for which to trigger the analysis.
  BuildFailure build_failure = 1;
  // Optionally, the client can pass the bug associated with the failure.
  // LUCI Bisection will update the bug with analysis progress/result.
  // This is mainly for SoM, which has information about bugs associated
  // with a failure.
  repeated BugInfo bug_info = 2;
}

message TriggerAnalysisResponse {
  // The analysis result corresponding to the request.
  // It is either a new analysis or an existing one.
  Analysis result = 1;
  // is_new_analysis will be set to true if a new analysis is triggered.
  // It will be set to false if an existing analysis is used instead.
  bool is_new_analysis = 2;
}

// Update the information of an analysis,
// e.g. update the bugs associated with an analysis.
// LUCI Bisection will comment on the bug with analysis progress/results.
// Note: Existing bugs associated with the analysis will be replaced.
message UpdateAnalysisRequest {
  // ID of the analysis.
  string analysis_id = 1 [ (google.api.field_behavior) = REQUIRED ];
  repeated luci.bisection.v1.BugInfo bug_info = 2;
}

// AnalysisRunStatus focusses on whether the analysis is currently running, not
// the actual result of the analysis.
enum AnalysisRunStatus {
  ANALYSIS_RUN_STATUS_UNSPECIFIED = 0;
  // The analysis started and is still running.
  STARTED = 2;
  // The analysis has ended (either it stopped naturally or ran into an error).
  ENDED = 3;
  // The analysis has been canceled.
  CANCELED = 4;
}

// Analysis contains result of an analysis.
// Next available tag: 15.
message Analysis {
  // ID to identify this analysis.
  int64 analysis_id = 1;
  // The failure associated with the analysis.
  BuildFailure build_failure = 2;
  // Result status of the analysis.
  luci.bisection.v1.AnalysisStatus status = 3;
  // Run status of the analysis.
  // See https://go.chromium.org/luci/bisection/proto/v1/#AnalysisRunStatus
  AnalysisRunStatus run_status = 4;
  // Buildbucket ID for the last passed build.
  int64 last_passed_bbid = 5;
  // Buildbucket ID for the first failed build.
  int64 first_failed_bbid = 6;
  // Timestamp for the created time of the analysis.
  google.protobuf.Timestamp created_time = 7;
  // Timestamp for the last updated time of the analysis.
  google.protobuf.Timestamp last_updated_time = 8;
  // Timestamp for the end time of the analysis.
  google.protobuf.Timestamp end_time = 9;
  // Result of heuristic analysis.
  luci.bisection.v1.HeuristicAnalysisResult heuristic_result = 10;
  // Result of nth-section analysis.
  luci.bisection.v1.NthSectionAnalysisResult nth_section_result = 11;
  // Builder for the first failed build.
  buildbucket.v2.BuilderID builder = 12;
  // Type of the failure associated with the analysis.
  BuildFailureType build_failure_type = 13;
  // The culprits for the analysis.
  // For some rare cases, we may get more than one culprit for a regression
  // range. So we set it as repeated field.
  repeated luci.bisection.v1.Culprit culprits = 14;
}

enum BuildFailureType {
  BUILD_FAILURE_TYPE_UNSPECIFIED = 0;
  COMPILE = 1;
  TEST = 2;
  INFRA = 3;
  OTHER = 4;
}

message BuildFailure {
  // Buildbucket ID for the failed build.
  int64 bbid = 1;
  // failed_step_name should be 'compile' for compile failures.
  string failed_step_name = 2;
}
