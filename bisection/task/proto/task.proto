// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proto;

import "go.chromium.org/luci/bisection/proto/v1/common.proto";

option go_package = "go.chromium.org/luci/bisection/task/proto";

// Payload of the FailedBuildIngestionTask task.
message FailedBuildIngestionTask {
  // The bbid of the failed build.
  int64 bbid = 1;
}

// Payload of the RevertCulpritTask
message RevertCulpritTask {
  // The ID of the CompileFailureAnalysis associated with the culprit
  int64 analysis_id = 1;

  // The ID of the Suspect which is the culprit
  int64 culprit_id = 2;
}

// Payload of the CancelAnalysis
message CancelAnalysisTask {
  // The analysis ID that we need to cancel.
  int64 analysis_id = 1;
}

// Payload for Culprit Verification
message CulpritVerificationTask {
  // The analysis ID
  int64 analysis_id = 1;
  // The ID of the suspect for culprit verification
  int64 suspect_id = 2;
  // The encoded datastore key of suspect parent
  string parent_key = 3;
}

// Represents a function Variant -> bool.
message VariantPredicate {
  oneof predicate {
    // A variant's key-value pairs must contain those in this one.
    // Eg. If variant here is {"os":"Mac-13"}, it will match all variants
    // that have "Mac-13" in the "os" field.
    luci.bisection.v1.Variant contains = 1;
  }
}

// Payload for test failure detection.
message TestFailureDetectionTask {
  // The project to select test failures from.
  string project = 1;

  // Test variants must satisfy this predicate.
  VariantPredicate variant_predicate = 2;
}

// Payload for test failure bisection.
message TestFailureBisectionTask {
  // The project of the test variants.
  string project = 1;

  message TestVariant {
    // Test ID of the test.
    string test_id = 1;
    // Variant hash of the test variant.
    string variant_hash = 2;
    // The variant of the test.
    luci.bisection.v1.Variant variant = 3;
  }
  // The test variants to bisect. The first one is “primary” and will be used
  // as the target test variant for the bisection process.
  // It is possible that some test variant in the list may get “diverged” results
  // during the bisection. In which case they will get ignored.
  // Test variants in the list must use the same builder.
  repeated TestVariant test_variants = 2;

  // Ref hash for the test variants.
  // Hash of the source branch, as 16 lowercase hexadecimal characters.
  string ref_hash = 3;

   // The branch in source control for the test variants.
  luci.bisection.v1.SourceRef ref = 4;

  // The regression range to bisect.
  TestFailureRegressionRange regression_range = 5;

  // Priority of the bisection.
  // Always set to 160 for test failures for now. More value can be introduced if needed.
  int64 priority = 6;
}

// The regression range of a test failure.
message TestFailureRegressionRange {
  // Start commit position of the regression range inclusive.
  int64 start_position = 1;
  // End commit position of the regression range inclusive.
  int64 end_position = 2;
  // Expected failure rate at start_position, between 0 and 1 inclusive.
  float start_position_failure_rate = 3;
  // Expected failure rate at end_position, between 0 and 1 inclusive.
  float end_position_failure_rate = 4;
}