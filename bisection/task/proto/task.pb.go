// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: go.chromium.org/luci/bisection/task/proto/task.proto

package proto

import (
	v1 "go.chromium.org/luci/bisection/proto/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Payload of the FailedBuildIngestionTask task.
type FailedBuildIngestionTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bbid of the failed build.
	Bbid int64 `protobuf:"varint,1,opt,name=bbid,proto3" json:"bbid,omitempty"`
}

func (x *FailedBuildIngestionTask) Reset() {
	*x = FailedBuildIngestionTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailedBuildIngestionTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedBuildIngestionTask) ProtoMessage() {}

func (x *FailedBuildIngestionTask) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedBuildIngestionTask.ProtoReflect.Descriptor instead.
func (*FailedBuildIngestionTask) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescGZIP(), []int{0}
}

func (x *FailedBuildIngestionTask) GetBbid() int64 {
	if x != nil {
		return x.Bbid
	}
	return 0
}

// Payload of the RevertCulpritTask
type RevertCulpritTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the CompileFailureAnalysis associated with the culprit
	AnalysisId int64 `protobuf:"varint,1,opt,name=analysis_id,json=analysisId,proto3" json:"analysis_id,omitempty"`
	// The ID of the Suspect which is the culprit
	CulpritId int64 `protobuf:"varint,2,opt,name=culprit_id,json=culpritId,proto3" json:"culprit_id,omitempty"`
}

func (x *RevertCulpritTask) Reset() {
	*x = RevertCulpritTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertCulpritTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertCulpritTask) ProtoMessage() {}

func (x *RevertCulpritTask) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertCulpritTask.ProtoReflect.Descriptor instead.
func (*RevertCulpritTask) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescGZIP(), []int{1}
}

func (x *RevertCulpritTask) GetAnalysisId() int64 {
	if x != nil {
		return x.AnalysisId
	}
	return 0
}

func (x *RevertCulpritTask) GetCulpritId() int64 {
	if x != nil {
		return x.CulpritId
	}
	return 0
}

// Payload of the CancelAnalysis
type CancelAnalysisTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The analysis ID that we need to cancel.
	AnalysisId int64 `protobuf:"varint,1,opt,name=analysis_id,json=analysisId,proto3" json:"analysis_id,omitempty"`
}

func (x *CancelAnalysisTask) Reset() {
	*x = CancelAnalysisTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAnalysisTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAnalysisTask) ProtoMessage() {}

func (x *CancelAnalysisTask) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAnalysisTask.ProtoReflect.Descriptor instead.
func (*CancelAnalysisTask) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescGZIP(), []int{2}
}

func (x *CancelAnalysisTask) GetAnalysisId() int64 {
	if x != nil {
		return x.AnalysisId
	}
	return 0
}

// Payload for Culprit Verification
type CulpritVerificationTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The analysis ID
	AnalysisId int64 `protobuf:"varint,1,opt,name=analysis_id,json=analysisId,proto3" json:"analysis_id,omitempty"`
	// The ID of the suspect for culprit verification
	SuspectId int64 `protobuf:"varint,2,opt,name=suspect_id,json=suspectId,proto3" json:"suspect_id,omitempty"`
	// The encoded datastore key of suspect parent
	ParentKey string `protobuf:"bytes,3,opt,name=parent_key,json=parentKey,proto3" json:"parent_key,omitempty"`
}

func (x *CulpritVerificationTask) Reset() {
	*x = CulpritVerificationTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CulpritVerificationTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CulpritVerificationTask) ProtoMessage() {}

func (x *CulpritVerificationTask) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CulpritVerificationTask.ProtoReflect.Descriptor instead.
func (*CulpritVerificationTask) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescGZIP(), []int{3}
}

func (x *CulpritVerificationTask) GetAnalysisId() int64 {
	if x != nil {
		return x.AnalysisId
	}
	return 0
}

func (x *CulpritVerificationTask) GetSuspectId() int64 {
	if x != nil {
		return x.SuspectId
	}
	return 0
}

func (x *CulpritVerificationTask) GetParentKey() string {
	if x != nil {
		return x.ParentKey
	}
	return ""
}

// Represents a function Variant -> bool.
type VariantPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Predicate:
	//
	//	*VariantPredicate_Contains
	Predicate isVariantPredicate_Predicate `protobuf_oneof:"predicate"`
}

func (x *VariantPredicate) Reset() {
	*x = VariantPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariantPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariantPredicate) ProtoMessage() {}

func (x *VariantPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariantPredicate.ProtoReflect.Descriptor instead.
func (*VariantPredicate) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescGZIP(), []int{4}
}

func (m *VariantPredicate) GetPredicate() isVariantPredicate_Predicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (x *VariantPredicate) GetContains() *v1.Variant {
	if x, ok := x.GetPredicate().(*VariantPredicate_Contains); ok {
		return x.Contains
	}
	return nil
}

type isVariantPredicate_Predicate interface {
	isVariantPredicate_Predicate()
}

type VariantPredicate_Contains struct {
	// A variant's key-value pairs must contain those in this one.
	// Eg. If variant here is {"os":"Mac-13"}, it will match all variants
	// that have "Mac-13" in the "os" field.
	Contains *v1.Variant `protobuf:"bytes,1,opt,name=contains,proto3,oneof"`
}

func (*VariantPredicate_Contains) isVariantPredicate_Predicate() {}

// Payload for test failure detection.
type TestFailureDetectionTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The project to select test failures from.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Test variants must satisfy this predicate.
	VariantPredicate *VariantPredicate `protobuf:"bytes,2,opt,name=variant_predicate,json=variantPredicate,proto3" json:"variant_predicate,omitempty"`
}

func (x *TestFailureDetectionTask) Reset() {
	*x = TestFailureDetectionTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFailureDetectionTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFailureDetectionTask) ProtoMessage() {}

func (x *TestFailureDetectionTask) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFailureDetectionTask.ProtoReflect.Descriptor instead.
func (*TestFailureDetectionTask) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescGZIP(), []int{5}
}

func (x *TestFailureDetectionTask) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestFailureDetectionTask) GetVariantPredicate() *VariantPredicate {
	if x != nil {
		return x.VariantPredicate
	}
	return nil
}

// Payload for test failure bisection.
type TestFailureBisectionTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The project of the test variants.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The test variants to bisect. The first one is “primary” and will be used
	// as the target test variant for the bisection process.
	// It is possible that some test variant in the list may get “diverged” results
	// during the bisection. In which case they will get ignored.
	// Test variants in the list must use the same builder.
	TestVariants []*TestFailureBisectionTask_TestVariant `protobuf:"bytes,2,rep,name=test_variants,json=testVariants,proto3" json:"test_variants,omitempty"`
	// Ref hash for the test variants.
	// Hash of the source branch, as 16 lowercase hexadecimal characters.
	RefHash string `protobuf:"bytes,3,opt,name=ref_hash,json=refHash,proto3" json:"ref_hash,omitempty"`
	// The branch in source control for the test variants.
	Ref *v1.SourceRef `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	// The regression range to bisect.
	RegressionRange *TestFailureRegressionRange `protobuf:"bytes,5,opt,name=regression_range,json=regressionRange,proto3" json:"regression_range,omitempty"`
	// Priority of the bisection.
	// Always set to 160 for test failures for now. More value can be introduced if needed.
	Priority int64 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *TestFailureBisectionTask) Reset() {
	*x = TestFailureBisectionTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFailureBisectionTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFailureBisectionTask) ProtoMessage() {}

func (x *TestFailureBisectionTask) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFailureBisectionTask.ProtoReflect.Descriptor instead.
func (*TestFailureBisectionTask) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescGZIP(), []int{6}
}

func (x *TestFailureBisectionTask) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestFailureBisectionTask) GetTestVariants() []*TestFailureBisectionTask_TestVariant {
	if x != nil {
		return x.TestVariants
	}
	return nil
}

func (x *TestFailureBisectionTask) GetRefHash() string {
	if x != nil {
		return x.RefHash
	}
	return ""
}

func (x *TestFailureBisectionTask) GetRef() *v1.SourceRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *TestFailureBisectionTask) GetRegressionRange() *TestFailureRegressionRange {
	if x != nil {
		return x.RegressionRange
	}
	return nil
}

func (x *TestFailureBisectionTask) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// The regression range of a test failure.
type TestFailureRegressionRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start commit position of the regression range inclusive.
	StartPosition int64 `protobuf:"varint,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	// End commit position of the regression range inclusive.
	EndPosition int64 `protobuf:"varint,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	// Expected failure rate at start_position, between 0 and 1 inclusive.
	StartPositionFailureRate float32 `protobuf:"fixed32,3,opt,name=start_position_failure_rate,json=startPositionFailureRate,proto3" json:"start_position_failure_rate,omitempty"`
	// Expected failure rate at end_position, between 0 and 1 inclusive.
	EndPositionFailureRate float32 `protobuf:"fixed32,4,opt,name=end_position_failure_rate,json=endPositionFailureRate,proto3" json:"end_position_failure_rate,omitempty"`
}

func (x *TestFailureRegressionRange) Reset() {
	*x = TestFailureRegressionRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFailureRegressionRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFailureRegressionRange) ProtoMessage() {}

func (x *TestFailureRegressionRange) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFailureRegressionRange.ProtoReflect.Descriptor instead.
func (*TestFailureRegressionRange) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescGZIP(), []int{7}
}

func (x *TestFailureRegressionRange) GetStartPosition() int64 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *TestFailureRegressionRange) GetEndPosition() int64 {
	if x != nil {
		return x.EndPosition
	}
	return 0
}

func (x *TestFailureRegressionRange) GetStartPositionFailureRate() float32 {
	if x != nil {
		return x.StartPositionFailureRate
	}
	return 0
}

func (x *TestFailureRegressionRange) GetEndPositionFailureRate() float32 {
	if x != nil {
		return x.EndPositionFailureRate
	}
	return 0
}

type TestFailureBisectionTask_TestVariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Test ID of the test.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Variant hash of the test variant.
	VariantHash string `protobuf:"bytes,2,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// The variant of the test.
	Variant *v1.Variant `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
}

func (x *TestFailureBisectionTask_TestVariant) Reset() {
	*x = TestFailureBisectionTask_TestVariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFailureBisectionTask_TestVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFailureBisectionTask_TestVariant) ProtoMessage() {}

func (x *TestFailureBisectionTask_TestVariant) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFailureBisectionTask_TestVariant.ProtoReflect.Descriptor instead.
func (*TestFailureBisectionTask_TestVariant) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescGZIP(), []int{6, 0}
}

func (x *TestFailureBisectionTask_TestVariant) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestFailureBisectionTask_TestVariant) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestFailureBisectionTask_TestVariant) GetVariant() *v1.Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

var File_go_chromium_org_luci_bisection_task_proto_task_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDesc = []byte{
	0x0a, 0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x18, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62,
	0x62, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x75, 0x6c,
	0x70, 0x72, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x6c,
	0x70, 0x72, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x75, 0x6c, 0x70, 0x72, 0x69, 0x74, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x49, 0x64, 0x22,
	0x78, 0x0a, 0x17, 0x43, 0x75, 0x6c, 0x70, 0x72, 0x69, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x59, 0x0a, 0x10, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x22, 0x7a, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x10,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x22, 0xbc, 0x03, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x42, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x42, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x74, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x03, 0x72, 0x65, 0x66, 0x12, 0x4c, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x7f,
	0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22,
	0xe0, 0x01, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescData = file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDesc
)

func file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescData)
	})
	return file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDescData
}

var file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_go_chromium_org_luci_bisection_task_proto_task_proto_goTypes = []interface{}{
	(*FailedBuildIngestionTask)(nil),             // 0: proto.FailedBuildIngestionTask
	(*RevertCulpritTask)(nil),                    // 1: proto.RevertCulpritTask
	(*CancelAnalysisTask)(nil),                   // 2: proto.CancelAnalysisTask
	(*CulpritVerificationTask)(nil),              // 3: proto.CulpritVerificationTask
	(*VariantPredicate)(nil),                     // 4: proto.VariantPredicate
	(*TestFailureDetectionTask)(nil),             // 5: proto.TestFailureDetectionTask
	(*TestFailureBisectionTask)(nil),             // 6: proto.TestFailureBisectionTask
	(*TestFailureRegressionRange)(nil),           // 7: proto.TestFailureRegressionRange
	(*TestFailureBisectionTask_TestVariant)(nil), // 8: proto.TestFailureBisectionTask.TestVariant
	(*v1.Variant)(nil),                           // 9: luci.bisection.v1.Variant
	(*v1.SourceRef)(nil),                         // 10: luci.bisection.v1.SourceRef
}
var file_go_chromium_org_luci_bisection_task_proto_task_proto_depIdxs = []int32{
	9,  // 0: proto.VariantPredicate.contains:type_name -> luci.bisection.v1.Variant
	4,  // 1: proto.TestFailureDetectionTask.variant_predicate:type_name -> proto.VariantPredicate
	8,  // 2: proto.TestFailureBisectionTask.test_variants:type_name -> proto.TestFailureBisectionTask.TestVariant
	10, // 3: proto.TestFailureBisectionTask.ref:type_name -> luci.bisection.v1.SourceRef
	7,  // 4: proto.TestFailureBisectionTask.regression_range:type_name -> proto.TestFailureRegressionRange
	9,  // 5: proto.TestFailureBisectionTask.TestVariant.variant:type_name -> luci.bisection.v1.Variant
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_bisection_task_proto_task_proto_init() }
func file_go_chromium_org_luci_bisection_task_proto_task_proto_init() {
	if File_go_chromium_org_luci_bisection_task_proto_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailedBuildIngestionTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertCulpritTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAnalysisTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CulpritVerificationTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariantPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFailureDetectionTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFailureBisectionTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFailureRegressionRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFailureBisectionTask_TestVariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*VariantPredicate_Contains)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_bisection_task_proto_task_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_bisection_task_proto_task_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_bisection_task_proto_task_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_bisection_task_proto_task_proto = out.File
	file_go_chromium_org_luci_bisection_task_proto_task_proto_rawDesc = nil
	file_go_chromium_org_luci_bisection_task_proto_task_proto_goTypes = nil
	file_go_chromium_org_luci_bisection_task_proto_task_proto_depIdxs = nil
}
