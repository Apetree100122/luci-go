// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gerrit

import (
	"context"
	"testing"

	. "github.com/smartystreets/goconvey/convey"

	gerritpb "go.chromium.org/luci/common/proto/gerrit"
	. "go.chromium.org/luci/common/testing/assertions"
	"go.chromium.org/luci/gae/impl/memory"
)

func TestGetHost(t *testing.T) {
	t.Parallel()
	ctx := context.Background()

	Convey("Empty string returns error", t, func() {
		host, err := GetHost(ctx, "")
		So(err, ShouldErrLike, "could not find Gerrit host")
		So(host, ShouldEqual, "")
	})

	Convey("Non-URL format returns error", t, func() {
		host, err := GetHost(ctx, "[Test] This is a review title, not a URL")
		So(err, ShouldErrLike, "could not find Gerrit host")
		So(host, ShouldEqual, "")
	})

	Convey("Gets host from review URL", t, func() {
		host, err := GetHost(ctx, " https://chromium-test-review.googlesource.com/c/proj/+/1200003\n")
		So(err, ShouldBeNil)
		So(host, ShouldEqual, "chromium-test-review.googlesource.com")
	})
}

func TestHasLUCIBisectionComment(t *testing.T) {
	t.Parallel()
	ctx := memory.Use(context.Background())

	Convey("No comments", t, func() {
		hasLBComment, err := HasLUCIBisectionComment(ctx, &gerritpb.ChangeInfo{})
		So(err, ShouldBeNil)
		So(hasLBComment, ShouldEqual, false)
	})

	Convey("No LUCI Bisection comment", t, func() {
		change := &gerritpb.ChangeInfo{
			Messages: []*gerritpb.ChangeMessageInfo{
				{
					Id:      "19283",
					Message: "Automated message from Gerrit with no author",
					Tag:     "autogenerated:gerrit:test",
				},
				{
					Id: "19284",
					Author: &gerritpb.AccountInfo{
						Name:      "John Doe",
						Email:     "jdoe@example.com",
						Username:  "jdoe",
						AccountId: 100001,
					},
				},
			},
		}
		hasLBComment, err := HasLUCIBisectionComment(ctx, change)
		So(err, ShouldBeNil)
		So(hasLBComment, ShouldEqual, false)
	})

	Convey("LUCI Bisection has commented", t, func() {
		// Get the service account email value in this test context
		testEmail, err := getGerritEmailAddress(ctx)
		So(err, ShouldBeNil)

		change := &gerritpb.ChangeInfo{
			Messages: []*gerritpb.ChangeMessageInfo{
				{
					Id:      "19285",
					Message: "Automated message from Gerrit with no author",
					Tag:     "autogenerated:gerrit:test",
				},
				{
					Id: "19286",
					Author: &gerritpb.AccountInfo{
						Name:      "LUCI Bisection",
						Email:     testEmail,
						Username:  "gae_service_account",
						AccountId: 900009,
					},
				},
				{
					Id: "19287",
					Author: &gerritpb.AccountInfo{
						Name:      "John Doe",
						Email:     "jdoe@example.com",
						Username:  "jdoe",
						AccountId: 100001,
					},
				},
			},
		}
		hasLBComment, err := HasLUCIBisectionComment(ctx, change)
		So(err, ShouldBeNil)
		So(hasLBComment, ShouldEqual, true)
	})
}

func TestIsOwnedByLUCIBisection(t *testing.T) {
	t.Parallel()
	ctx := memory.Use(context.Background())

	Convey("No owner", t, func() {
		change := &gerritpb.ChangeInfo{
			Project: "chromium/test/src",
			Number:  615243,
		}
		lbOwned, err := IsOwnedByLUCIBisection(ctx, change)
		So(err, ShouldBeNil)
		So(lbOwned, ShouldEqual, false)
	})

	Convey("Change is not owned by LUCI Bisection", t, func() {
		change := &gerritpb.ChangeInfo{
			Project: "chromium/test/src",
			Number:  615243,
			Owner: &gerritpb.AccountInfo{
				Name:      "John Doe",
				Email:     "jdoe@example.com",
				Username:  "jdoe",
				AccountId: 100001,
			},
		}
		lbOwned, err := IsOwnedByLUCIBisection(ctx, change)
		So(err, ShouldBeNil)
		So(lbOwned, ShouldEqual, false)
	})

	Convey("Change is owned by LUCI Bisection", t, func() {
		// Get the service account email value in this test context
		testEmail, err := getGerritEmailAddress(ctx)
		So(err, ShouldBeNil)

		change := &gerritpb.ChangeInfo{
			Project: "chromium/test/src",
			Number:  615243,
			Owner: &gerritpb.AccountInfo{
				Name:      "LUCI Bisection",
				Email:     testEmail,
				Username:  "gae_service_account",
				AccountId: 900009,
			},
		}
		lbOwned, err := IsOwnedByLUCIBisection(ctx, change)
		So(err, ShouldBeNil)
		So(lbOwned, ShouldEqual, true)
	})
}
