// Copyright 2017 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.0
// source: go.chromium.org/luci/machine-db/api/crimson/v1/crimson.proto

package crimson

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2d, 0x64,
	0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x69, 0x6d,
	0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x72, 0x61, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38,
	0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x62, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72,
	0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x76, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x39, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72,
	0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72,
	0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xf8, 0x0e,
	0x0a, 0x07, 0x43, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x63,
	0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x65, 0x65, 0x49, 0x50, 0x73, 0x12, 0x1b,
	0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x65,
	0x65, 0x49, 0x50, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x72,
	0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x50, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x56, 0x4d,
	0x73, 0x12, 0x18, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4b, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x72,
	0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x56, 0x4d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x53,
	0x65, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x53, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63,
	0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x53, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73,
	0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x72,
	0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x72, 0x69, 0x6d,
	0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x4c, 0x41, 0x4e, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x4c, 0x41, 0x4e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x4c, 0x41, 0x4e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e,
	0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63,
	0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x46,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12,
	0x1d, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x49, 0x43, 0x12, 0x19, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x49, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4e, 0x49, 0x43, 0x12, 0x3e, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x49, 0x43, 0x12, 0x19, 0x2e, 0x63, 0x72, 0x69,
	0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x49, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a,
	0x08, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x49, 0x43, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x72, 0x69, 0x6d,
	0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x49, 0x43, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x49, 0x43, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x49, 0x43, 0x12, 0x19, 0x2e, 0x63, 0x72,
	0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x49, 0x43, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e,
	0x2e, 0x4e, 0x49, 0x43, 0x12, 0x37, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x52,
	0x41, 0x43, 0x12, 0x1a, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x52, 0x41, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x52, 0x41, 0x43, 0x12, 0x42, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x52, 0x41, 0x43, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x72, 0x69,
	0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x52, 0x41, 0x43, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x52, 0x41, 0x43, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x52, 0x41, 0x43, 0x12,
	0x1a, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x52, 0x41, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x72,
	0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x52, 0x41, 0x43, 0x12, 0x4f, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x22, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x12, 0x21, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x2e,
	0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64,
	0x56, 0x4d, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x56, 0x4d, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x56, 0x4d, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x12, 0x18,
	0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73,
	0x6f, 0x6e, 0x2e, 0x56, 0x4d, 0x12, 0x3c, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x73,
	0x12, 0x17, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x72, 0x69, 0x6d,
	0x73, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x12,
	0x18, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x63, 0x72, 0x69, 0x6d,
	0x73, 0x6f, 0x6e, 0x2e, 0x56, 0x4d, 0x12, 0x40, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x72, 0x69, 0x6d, 0x73,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto_goTypes = []interface{}{
	(*ListDatacentersRequest)(nil),    // 0: crimson.ListDatacentersRequest
	(*ListFreeIPsRequest)(nil),        // 1: crimson.ListFreeIPsRequest
	(*ListKVMsRequest)(nil),           // 2: crimson.ListKVMsRequest
	(*ListOSesRequest)(nil),           // 3: crimson.ListOSesRequest
	(*ListPlatformsRequest)(nil),      // 4: crimson.ListPlatformsRequest
	(*ListRacksRequest)(nil),          // 5: crimson.ListRacksRequest
	(*ListSwitchesRequest)(nil),       // 6: crimson.ListSwitchesRequest
	(*ListVLANsRequest)(nil),          // 7: crimson.ListVLANsRequest
	(*CreateMachineRequest)(nil),      // 8: crimson.CreateMachineRequest
	(*DeleteMachineRequest)(nil),      // 9: crimson.DeleteMachineRequest
	(*ListMachinesRequest)(nil),       // 10: crimson.ListMachinesRequest
	(*RenameMachineRequest)(nil),      // 11: crimson.RenameMachineRequest
	(*UpdateMachineRequest)(nil),      // 12: crimson.UpdateMachineRequest
	(*CreateNICRequest)(nil),          // 13: crimson.CreateNICRequest
	(*DeleteNICRequest)(nil),          // 14: crimson.DeleteNICRequest
	(*ListNICsRequest)(nil),           // 15: crimson.ListNICsRequest
	(*UpdateNICRequest)(nil),          // 16: crimson.UpdateNICRequest
	(*CreateDRACRequest)(nil),         // 17: crimson.CreateDRACRequest
	(*ListDRACsRequest)(nil),          // 18: crimson.ListDRACsRequest
	(*UpdateDRACRequest)(nil),         // 19: crimson.UpdateDRACRequest
	(*CreatePhysicalHostRequest)(nil), // 20: crimson.CreatePhysicalHostRequest
	(*ListPhysicalHostsRequest)(nil),  // 21: crimson.ListPhysicalHostsRequest
	(*UpdatePhysicalHostRequest)(nil), // 22: crimson.UpdatePhysicalHostRequest
	(*FindVMSlotsRequest)(nil),        // 23: crimson.FindVMSlotsRequest
	(*CreateVMRequest)(nil),           // 24: crimson.CreateVMRequest
	(*ListVMsRequest)(nil),            // 25: crimson.ListVMsRequest
	(*UpdateVMRequest)(nil),           // 26: crimson.UpdateVMRequest
	(*DeleteHostRequest)(nil),         // 27: crimson.DeleteHostRequest
	(*ListDatacentersResponse)(nil),   // 28: crimson.ListDatacentersResponse
	(*ListIPsResponse)(nil),           // 29: crimson.ListIPsResponse
	(*ListKVMsResponse)(nil),          // 30: crimson.ListKVMsResponse
	(*ListOSesResponse)(nil),          // 31: crimson.ListOSesResponse
	(*ListPlatformsResponse)(nil),     // 32: crimson.ListPlatformsResponse
	(*ListRacksResponse)(nil),         // 33: crimson.ListRacksResponse
	(*ListSwitchesResponse)(nil),      // 34: crimson.ListSwitchesResponse
	(*ListVLANsResponse)(nil),         // 35: crimson.ListVLANsResponse
	(*Machine)(nil),                   // 36: crimson.Machine
	(*emptypb.Empty)(nil),             // 37: google.protobuf.Empty
	(*ListMachinesResponse)(nil),      // 38: crimson.ListMachinesResponse
	(*NIC)(nil),                       // 39: crimson.NIC
	(*ListNICsResponse)(nil),          // 40: crimson.ListNICsResponse
	(*DRAC)(nil),                      // 41: crimson.DRAC
	(*ListDRACsResponse)(nil),         // 42: crimson.ListDRACsResponse
	(*PhysicalHost)(nil),              // 43: crimson.PhysicalHost
	(*ListPhysicalHostsResponse)(nil), // 44: crimson.ListPhysicalHostsResponse
	(*FindVMSlotsResponse)(nil),       // 45: crimson.FindVMSlotsResponse
	(*VM)(nil),                        // 46: crimson.VM
	(*ListVMsResponse)(nil),           // 47: crimson.ListVMsResponse
}
var file_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto_depIdxs = []int32{
	0,  // 0: crimson.Crimson.ListDatacenters:input_type -> crimson.ListDatacentersRequest
	1,  // 1: crimson.Crimson.ListFreeIPs:input_type -> crimson.ListFreeIPsRequest
	2,  // 2: crimson.Crimson.ListKVMs:input_type -> crimson.ListKVMsRequest
	3,  // 3: crimson.Crimson.ListOSes:input_type -> crimson.ListOSesRequest
	4,  // 4: crimson.Crimson.ListPlatforms:input_type -> crimson.ListPlatformsRequest
	5,  // 5: crimson.Crimson.ListRacks:input_type -> crimson.ListRacksRequest
	6,  // 6: crimson.Crimson.ListSwitches:input_type -> crimson.ListSwitchesRequest
	7,  // 7: crimson.Crimson.ListVLANs:input_type -> crimson.ListVLANsRequest
	8,  // 8: crimson.Crimson.CreateMachine:input_type -> crimson.CreateMachineRequest
	9,  // 9: crimson.Crimson.DeleteMachine:input_type -> crimson.DeleteMachineRequest
	10, // 10: crimson.Crimson.ListMachines:input_type -> crimson.ListMachinesRequest
	11, // 11: crimson.Crimson.RenameMachine:input_type -> crimson.RenameMachineRequest
	12, // 12: crimson.Crimson.UpdateMachine:input_type -> crimson.UpdateMachineRequest
	13, // 13: crimson.Crimson.CreateNIC:input_type -> crimson.CreateNICRequest
	14, // 14: crimson.Crimson.DeleteNIC:input_type -> crimson.DeleteNICRequest
	15, // 15: crimson.Crimson.ListNICs:input_type -> crimson.ListNICsRequest
	16, // 16: crimson.Crimson.UpdateNIC:input_type -> crimson.UpdateNICRequest
	17, // 17: crimson.Crimson.CreateDRAC:input_type -> crimson.CreateDRACRequest
	18, // 18: crimson.Crimson.ListDRACs:input_type -> crimson.ListDRACsRequest
	19, // 19: crimson.Crimson.UpdateDRAC:input_type -> crimson.UpdateDRACRequest
	20, // 20: crimson.Crimson.CreatePhysicalHost:input_type -> crimson.CreatePhysicalHostRequest
	21, // 21: crimson.Crimson.ListPhysicalHosts:input_type -> crimson.ListPhysicalHostsRequest
	22, // 22: crimson.Crimson.UpdatePhysicalHost:input_type -> crimson.UpdatePhysicalHostRequest
	23, // 23: crimson.Crimson.FindVMSlots:input_type -> crimson.FindVMSlotsRequest
	24, // 24: crimson.Crimson.CreateVM:input_type -> crimson.CreateVMRequest
	25, // 25: crimson.Crimson.ListVMs:input_type -> crimson.ListVMsRequest
	26, // 26: crimson.Crimson.UpdateVM:input_type -> crimson.UpdateVMRequest
	27, // 27: crimson.Crimson.DeleteHost:input_type -> crimson.DeleteHostRequest
	28, // 28: crimson.Crimson.ListDatacenters:output_type -> crimson.ListDatacentersResponse
	29, // 29: crimson.Crimson.ListFreeIPs:output_type -> crimson.ListIPsResponse
	30, // 30: crimson.Crimson.ListKVMs:output_type -> crimson.ListKVMsResponse
	31, // 31: crimson.Crimson.ListOSes:output_type -> crimson.ListOSesResponse
	32, // 32: crimson.Crimson.ListPlatforms:output_type -> crimson.ListPlatformsResponse
	33, // 33: crimson.Crimson.ListRacks:output_type -> crimson.ListRacksResponse
	34, // 34: crimson.Crimson.ListSwitches:output_type -> crimson.ListSwitchesResponse
	35, // 35: crimson.Crimson.ListVLANs:output_type -> crimson.ListVLANsResponse
	36, // 36: crimson.Crimson.CreateMachine:output_type -> crimson.Machine
	37, // 37: crimson.Crimson.DeleteMachine:output_type -> google.protobuf.Empty
	38, // 38: crimson.Crimson.ListMachines:output_type -> crimson.ListMachinesResponse
	36, // 39: crimson.Crimson.RenameMachine:output_type -> crimson.Machine
	36, // 40: crimson.Crimson.UpdateMachine:output_type -> crimson.Machine
	39, // 41: crimson.Crimson.CreateNIC:output_type -> crimson.NIC
	37, // 42: crimson.Crimson.DeleteNIC:output_type -> google.protobuf.Empty
	40, // 43: crimson.Crimson.ListNICs:output_type -> crimson.ListNICsResponse
	39, // 44: crimson.Crimson.UpdateNIC:output_type -> crimson.NIC
	41, // 45: crimson.Crimson.CreateDRAC:output_type -> crimson.DRAC
	42, // 46: crimson.Crimson.ListDRACs:output_type -> crimson.ListDRACsResponse
	41, // 47: crimson.Crimson.UpdateDRAC:output_type -> crimson.DRAC
	43, // 48: crimson.Crimson.CreatePhysicalHost:output_type -> crimson.PhysicalHost
	44, // 49: crimson.Crimson.ListPhysicalHosts:output_type -> crimson.ListPhysicalHostsResponse
	43, // 50: crimson.Crimson.UpdatePhysicalHost:output_type -> crimson.PhysicalHost
	45, // 51: crimson.Crimson.FindVMSlots:output_type -> crimson.FindVMSlotsResponse
	46, // 52: crimson.Crimson.CreateVM:output_type -> crimson.VM
	47, // 53: crimson.Crimson.ListVMs:output_type -> crimson.ListVMsResponse
	46, // 54: crimson.Crimson.UpdateVM:output_type -> crimson.VM
	37, // 55: crimson.Crimson.DeleteHost:output_type -> google.protobuf.Empty
	28, // [28:56] is the sub-list for method output_type
	0,  // [0:28] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto_init() }
func file_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto_init() {
	if File_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto != nil {
		return
	}
	file_go_chromium_org_luci_machine_db_api_crimson_v1_datacenters_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_dracs_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_hosts_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_ips_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_kvms_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_machines_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_nics_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_oses_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_physical_hosts_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_platforms_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_racks_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_switches_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_vlans_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_vm_slots_proto_init()
	file_go_chromium_org_luci_machine_db_api_crimson_v1_vms_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto_depIdxs,
	}.Build()
	File_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto = out.File
	file_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto_rawDesc = nil
	file_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto_goTypes = nil
	file_go_chromium_org_luci_machine_db_api_crimson_v1_crimson_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrimsonClient is the client API for Crimson service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrimsonClient interface {
	// Lists datacenters in the database.
	ListDatacenters(ctx context.Context, in *ListDatacentersRequest, opts ...grpc.CallOption) (*ListDatacentersResponse, error)
	// Lists free IP addresses in the database.
	ListFreeIPs(ctx context.Context, in *ListFreeIPsRequest, opts ...grpc.CallOption) (*ListIPsResponse, error)
	// Lists KVMs in the database.
	ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error)
	// Lists operating systems in the database.
	ListOSes(ctx context.Context, in *ListOSesRequest, opts ...grpc.CallOption) (*ListOSesResponse, error)
	// Lists platforms in the database.
	ListPlatforms(ctx context.Context, in *ListPlatformsRequest, opts ...grpc.CallOption) (*ListPlatformsResponse, error)
	// Lists racks in the database.
	ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error)
	// Lists switches in the database.
	ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error)
	// Lists VLANs in the database.
	ListVLANs(ctx context.Context, in *ListVLANsRequest, opts ...grpc.CallOption) (*ListVLANsResponse, error)
	// Creates a new machine in the database.
	CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	// Deletes a machine from the database.
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists machines in the database.
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	// Renames a machine in the database.
	RenameMachine(ctx context.Context, in *RenameMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	// Updates a machine in the database.
	UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	// Creates a new NIC in the database.
	CreateNIC(ctx context.Context, in *CreateNICRequest, opts ...grpc.CallOption) (*NIC, error)
	// Deletes a NIC from the database.
	DeleteNIC(ctx context.Context, in *DeleteNICRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists NICs in the database.
	ListNICs(ctx context.Context, in *ListNICsRequest, opts ...grpc.CallOption) (*ListNICsResponse, error)
	// Updates a NIC in the database.
	UpdateNIC(ctx context.Context, in *UpdateNICRequest, opts ...grpc.CallOption) (*NIC, error)
	// Creates a new DRAC in the database.
	CreateDRAC(ctx context.Context, in *CreateDRACRequest, opts ...grpc.CallOption) (*DRAC, error)
	// Lists DRACs in the database.
	ListDRACs(ctx context.Context, in *ListDRACsRequest, opts ...grpc.CallOption) (*ListDRACsResponse, error)
	// Updates a DRAC in the database.
	UpdateDRAC(ctx context.Context, in *UpdateDRACRequest, opts ...grpc.CallOption) (*DRAC, error)
	// Creates a new physical host in the database.
	CreatePhysicalHost(ctx context.Context, in *CreatePhysicalHostRequest, opts ...grpc.CallOption) (*PhysicalHost, error)
	// Lists physical hosts in the database.
	ListPhysicalHosts(ctx context.Context, in *ListPhysicalHostsRequest, opts ...grpc.CallOption) (*ListPhysicalHostsResponse, error)
	// Updates a physical host in the database.
	UpdatePhysicalHost(ctx context.Context, in *UpdatePhysicalHostRequest, opts ...grpc.CallOption) (*PhysicalHost, error)
	// Finds available VM slots in the database.
	FindVMSlots(ctx context.Context, in *FindVMSlotsRequest, opts ...grpc.CallOption) (*FindVMSlotsResponse, error)
	// Creates a new VM in the database.
	CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*VM, error)
	// Lists VMs in the database.
	ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error)
	// Updates a VM in the database.
	UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*VM, error)
	// Deletes a physical or virtual host from the database.
	DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}
type crimsonPRPCClient struct {
	client *prpc.Client
}

func NewCrimsonPRPCClient(client *prpc.Client) CrimsonClient {
	return &crimsonPRPCClient{client}
}

func (c *crimsonPRPCClient) ListDatacenters(ctx context.Context, in *ListDatacentersRequest, opts ...grpc.CallOption) (*ListDatacentersResponse, error) {
	out := new(ListDatacentersResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListFreeIPs(ctx context.Context, in *ListFreeIPsRequest, opts ...grpc.CallOption) (*ListIPsResponse, error) {
	out := new(ListIPsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListFreeIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error) {
	out := new(ListKVMsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListKVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListOSes(ctx context.Context, in *ListOSesRequest, opts ...grpc.CallOption) (*ListOSesResponse, error) {
	out := new(ListOSesResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListOSes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListPlatforms(ctx context.Context, in *ListPlatformsRequest, opts ...grpc.CallOption) (*ListPlatformsResponse, error) {
	out := new(ListPlatformsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListPlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	out := new(ListRacksResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error) {
	out := new(ListSwitchesResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListVLANs(ctx context.Context, in *ListVLANsRequest, opts ...grpc.CallOption) (*ListVLANsResponse, error) {
	out := new(ListVLANsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListVLANs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.client.Call(ctx, "crimson.Crimson", "CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "crimson.Crimson", "DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) RenameMachine(ctx context.Context, in *RenameMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.client.Call(ctx, "crimson.Crimson", "RenameMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.client.Call(ctx, "crimson.Crimson", "UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) CreateNIC(ctx context.Context, in *CreateNICRequest, opts ...grpc.CallOption) (*NIC, error) {
	out := new(NIC)
	err := c.client.Call(ctx, "crimson.Crimson", "CreateNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) DeleteNIC(ctx context.Context, in *DeleteNICRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "crimson.Crimson", "DeleteNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListNICs(ctx context.Context, in *ListNICsRequest, opts ...grpc.CallOption) (*ListNICsResponse, error) {
	out := new(ListNICsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListNICs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) UpdateNIC(ctx context.Context, in *UpdateNICRequest, opts ...grpc.CallOption) (*NIC, error) {
	out := new(NIC)
	err := c.client.Call(ctx, "crimson.Crimson", "UpdateNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) CreateDRAC(ctx context.Context, in *CreateDRACRequest, opts ...grpc.CallOption) (*DRAC, error) {
	out := new(DRAC)
	err := c.client.Call(ctx, "crimson.Crimson", "CreateDRAC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListDRACs(ctx context.Context, in *ListDRACsRequest, opts ...grpc.CallOption) (*ListDRACsResponse, error) {
	out := new(ListDRACsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListDRACs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) UpdateDRAC(ctx context.Context, in *UpdateDRACRequest, opts ...grpc.CallOption) (*DRAC, error) {
	out := new(DRAC)
	err := c.client.Call(ctx, "crimson.Crimson", "UpdateDRAC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) CreatePhysicalHost(ctx context.Context, in *CreatePhysicalHostRequest, opts ...grpc.CallOption) (*PhysicalHost, error) {
	out := new(PhysicalHost)
	err := c.client.Call(ctx, "crimson.Crimson", "CreatePhysicalHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListPhysicalHosts(ctx context.Context, in *ListPhysicalHostsRequest, opts ...grpc.CallOption) (*ListPhysicalHostsResponse, error) {
	out := new(ListPhysicalHostsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListPhysicalHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) UpdatePhysicalHost(ctx context.Context, in *UpdatePhysicalHostRequest, opts ...grpc.CallOption) (*PhysicalHost, error) {
	out := new(PhysicalHost)
	err := c.client.Call(ctx, "crimson.Crimson", "UpdatePhysicalHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) FindVMSlots(ctx context.Context, in *FindVMSlotsRequest, opts ...grpc.CallOption) (*FindVMSlotsResponse, error) {
	out := new(FindVMSlotsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "FindVMSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*VM, error) {
	out := new(VM)
	err := c.client.Call(ctx, "crimson.Crimson", "CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error) {
	out := new(ListVMsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*VM, error) {
	out := new(VM)
	err := c.client.Call(ctx, "crimson.Crimson", "UpdateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "crimson.Crimson", "DeleteHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type crimsonClient struct {
	cc grpc.ClientConnInterface
}

func NewCrimsonClient(cc grpc.ClientConnInterface) CrimsonClient {
	return &crimsonClient{cc}
}

func (c *crimsonClient) ListDatacenters(ctx context.Context, in *ListDatacentersRequest, opts ...grpc.CallOption) (*ListDatacentersResponse, error) {
	out := new(ListDatacentersResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListFreeIPs(ctx context.Context, in *ListFreeIPsRequest, opts ...grpc.CallOption) (*ListIPsResponse, error) {
	out := new(ListIPsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListFreeIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error) {
	out := new(ListKVMsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListKVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListOSes(ctx context.Context, in *ListOSesRequest, opts ...grpc.CallOption) (*ListOSesResponse, error) {
	out := new(ListOSesResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListOSes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListPlatforms(ctx context.Context, in *ListPlatformsRequest, opts ...grpc.CallOption) (*ListPlatformsResponse, error) {
	out := new(ListPlatformsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListPlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	out := new(ListRacksResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error) {
	out := new(ListSwitchesResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListVLANs(ctx context.Context, in *ListVLANsRequest, opts ...grpc.CallOption) (*ListVLANsResponse, error) {
	out := new(ListVLANsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListVLANs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) RenameMachine(ctx context.Context, in *RenameMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/RenameMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) CreateNIC(ctx context.Context, in *CreateNICRequest, opts ...grpc.CallOption) (*NIC, error) {
	out := new(NIC)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/CreateNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) DeleteNIC(ctx context.Context, in *DeleteNICRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/DeleteNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListNICs(ctx context.Context, in *ListNICsRequest, opts ...grpc.CallOption) (*ListNICsResponse, error) {
	out := new(ListNICsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListNICs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) UpdateNIC(ctx context.Context, in *UpdateNICRequest, opts ...grpc.CallOption) (*NIC, error) {
	out := new(NIC)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/UpdateNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) CreateDRAC(ctx context.Context, in *CreateDRACRequest, opts ...grpc.CallOption) (*DRAC, error) {
	out := new(DRAC)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/CreateDRAC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListDRACs(ctx context.Context, in *ListDRACsRequest, opts ...grpc.CallOption) (*ListDRACsResponse, error) {
	out := new(ListDRACsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListDRACs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) UpdateDRAC(ctx context.Context, in *UpdateDRACRequest, opts ...grpc.CallOption) (*DRAC, error) {
	out := new(DRAC)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/UpdateDRAC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) CreatePhysicalHost(ctx context.Context, in *CreatePhysicalHostRequest, opts ...grpc.CallOption) (*PhysicalHost, error) {
	out := new(PhysicalHost)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/CreatePhysicalHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListPhysicalHosts(ctx context.Context, in *ListPhysicalHostsRequest, opts ...grpc.CallOption) (*ListPhysicalHostsResponse, error) {
	out := new(ListPhysicalHostsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListPhysicalHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) UpdatePhysicalHost(ctx context.Context, in *UpdatePhysicalHostRequest, opts ...grpc.CallOption) (*PhysicalHost, error) {
	out := new(PhysicalHost)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/UpdatePhysicalHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) FindVMSlots(ctx context.Context, in *FindVMSlotsRequest, opts ...grpc.CallOption) (*FindVMSlotsResponse, error) {
	out := new(FindVMSlotsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/FindVMSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*VM, error) {
	out := new(VM)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error) {
	out := new(ListVMsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*VM, error) {
	out := new(VM)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/UpdateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/DeleteHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrimsonServer is the server API for Crimson service.
type CrimsonServer interface {
	// Lists datacenters in the database.
	ListDatacenters(context.Context, *ListDatacentersRequest) (*ListDatacentersResponse, error)
	// Lists free IP addresses in the database.
	ListFreeIPs(context.Context, *ListFreeIPsRequest) (*ListIPsResponse, error)
	// Lists KVMs in the database.
	ListKVMs(context.Context, *ListKVMsRequest) (*ListKVMsResponse, error)
	// Lists operating systems in the database.
	ListOSes(context.Context, *ListOSesRequest) (*ListOSesResponse, error)
	// Lists platforms in the database.
	ListPlatforms(context.Context, *ListPlatformsRequest) (*ListPlatformsResponse, error)
	// Lists racks in the database.
	ListRacks(context.Context, *ListRacksRequest) (*ListRacksResponse, error)
	// Lists switches in the database.
	ListSwitches(context.Context, *ListSwitchesRequest) (*ListSwitchesResponse, error)
	// Lists VLANs in the database.
	ListVLANs(context.Context, *ListVLANsRequest) (*ListVLANsResponse, error)
	// Creates a new machine in the database.
	CreateMachine(context.Context, *CreateMachineRequest) (*Machine, error)
	// Deletes a machine from the database.
	DeleteMachine(context.Context, *DeleteMachineRequest) (*emptypb.Empty, error)
	// Lists machines in the database.
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	// Renames a machine in the database.
	RenameMachine(context.Context, *RenameMachineRequest) (*Machine, error)
	// Updates a machine in the database.
	UpdateMachine(context.Context, *UpdateMachineRequest) (*Machine, error)
	// Creates a new NIC in the database.
	CreateNIC(context.Context, *CreateNICRequest) (*NIC, error)
	// Deletes a NIC from the database.
	DeleteNIC(context.Context, *DeleteNICRequest) (*emptypb.Empty, error)
	// Lists NICs in the database.
	ListNICs(context.Context, *ListNICsRequest) (*ListNICsResponse, error)
	// Updates a NIC in the database.
	UpdateNIC(context.Context, *UpdateNICRequest) (*NIC, error)
	// Creates a new DRAC in the database.
	CreateDRAC(context.Context, *CreateDRACRequest) (*DRAC, error)
	// Lists DRACs in the database.
	ListDRACs(context.Context, *ListDRACsRequest) (*ListDRACsResponse, error)
	// Updates a DRAC in the database.
	UpdateDRAC(context.Context, *UpdateDRACRequest) (*DRAC, error)
	// Creates a new physical host in the database.
	CreatePhysicalHost(context.Context, *CreatePhysicalHostRequest) (*PhysicalHost, error)
	// Lists physical hosts in the database.
	ListPhysicalHosts(context.Context, *ListPhysicalHostsRequest) (*ListPhysicalHostsResponse, error)
	// Updates a physical host in the database.
	UpdatePhysicalHost(context.Context, *UpdatePhysicalHostRequest) (*PhysicalHost, error)
	// Finds available VM slots in the database.
	FindVMSlots(context.Context, *FindVMSlotsRequest) (*FindVMSlotsResponse, error)
	// Creates a new VM in the database.
	CreateVM(context.Context, *CreateVMRequest) (*VM, error)
	// Lists VMs in the database.
	ListVMs(context.Context, *ListVMsRequest) (*ListVMsResponse, error)
	// Updates a VM in the database.
	UpdateVM(context.Context, *UpdateVMRequest) (*VM, error)
	// Deletes a physical or virtual host from the database.
	DeleteHost(context.Context, *DeleteHostRequest) (*emptypb.Empty, error)
}

// UnimplementedCrimsonServer can be embedded to have forward compatible implementations.
type UnimplementedCrimsonServer struct {
}

func (*UnimplementedCrimsonServer) ListDatacenters(context.Context, *ListDatacentersRequest) (*ListDatacentersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatacenters not implemented")
}
func (*UnimplementedCrimsonServer) ListFreeIPs(context.Context, *ListFreeIPsRequest) (*ListIPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFreeIPs not implemented")
}
func (*UnimplementedCrimsonServer) ListKVMs(context.Context, *ListKVMsRequest) (*ListKVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKVMs not implemented")
}
func (*UnimplementedCrimsonServer) ListOSes(context.Context, *ListOSesRequest) (*ListOSesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOSes not implemented")
}
func (*UnimplementedCrimsonServer) ListPlatforms(context.Context, *ListPlatformsRequest) (*ListPlatformsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlatforms not implemented")
}
func (*UnimplementedCrimsonServer) ListRacks(context.Context, *ListRacksRequest) (*ListRacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRacks not implemented")
}
func (*UnimplementedCrimsonServer) ListSwitches(context.Context, *ListSwitchesRequest) (*ListSwitchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwitches not implemented")
}
func (*UnimplementedCrimsonServer) ListVLANs(context.Context, *ListVLANsRequest) (*ListVLANsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVLANs not implemented")
}
func (*UnimplementedCrimsonServer) CreateMachine(context.Context, *CreateMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachine not implemented")
}
func (*UnimplementedCrimsonServer) DeleteMachine(context.Context, *DeleteMachineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (*UnimplementedCrimsonServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (*UnimplementedCrimsonServer) RenameMachine(context.Context, *RenameMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameMachine not implemented")
}
func (*UnimplementedCrimsonServer) UpdateMachine(context.Context, *UpdateMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachine not implemented")
}
func (*UnimplementedCrimsonServer) CreateNIC(context.Context, *CreateNICRequest) (*NIC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNIC not implemented")
}
func (*UnimplementedCrimsonServer) DeleteNIC(context.Context, *DeleteNICRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNIC not implemented")
}
func (*UnimplementedCrimsonServer) ListNICs(context.Context, *ListNICsRequest) (*ListNICsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNICs not implemented")
}
func (*UnimplementedCrimsonServer) UpdateNIC(context.Context, *UpdateNICRequest) (*NIC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNIC not implemented")
}
func (*UnimplementedCrimsonServer) CreateDRAC(context.Context, *CreateDRACRequest) (*DRAC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDRAC not implemented")
}
func (*UnimplementedCrimsonServer) ListDRACs(context.Context, *ListDRACsRequest) (*ListDRACsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDRACs not implemented")
}
func (*UnimplementedCrimsonServer) UpdateDRAC(context.Context, *UpdateDRACRequest) (*DRAC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDRAC not implemented")
}
func (*UnimplementedCrimsonServer) CreatePhysicalHost(context.Context, *CreatePhysicalHostRequest) (*PhysicalHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhysicalHost not implemented")
}
func (*UnimplementedCrimsonServer) ListPhysicalHosts(context.Context, *ListPhysicalHostsRequest) (*ListPhysicalHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhysicalHosts not implemented")
}
func (*UnimplementedCrimsonServer) UpdatePhysicalHost(context.Context, *UpdatePhysicalHostRequest) (*PhysicalHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhysicalHost not implemented")
}
func (*UnimplementedCrimsonServer) FindVMSlots(context.Context, *FindVMSlotsRequest) (*FindVMSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindVMSlots not implemented")
}
func (*UnimplementedCrimsonServer) CreateVM(context.Context, *CreateVMRequest) (*VM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (*UnimplementedCrimsonServer) ListVMs(context.Context, *ListVMsRequest) (*ListVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMs not implemented")
}
func (*UnimplementedCrimsonServer) UpdateVM(context.Context, *UpdateVMRequest) (*VM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVM not implemented")
}
func (*UnimplementedCrimsonServer) DeleteHost(context.Context, *DeleteHostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHost not implemented")
}

func RegisterCrimsonServer(s prpc.Registrar, srv CrimsonServer) {
	s.RegisterService(&_Crimson_serviceDesc, srv)
}

func _Crimson_ListDatacenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatacentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListDatacenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListDatacenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListDatacenters(ctx, req.(*ListDatacentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListFreeIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFreeIPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListFreeIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListFreeIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListFreeIPs(ctx, req.(*ListFreeIPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListKVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListKVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListKVMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListKVMs(ctx, req.(*ListKVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListOSes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOSesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListOSes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListOSes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListOSes(ctx, req.(*ListOSesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListPlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListPlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListPlatforms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListPlatforms(ctx, req.(*ListPlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListRacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListRacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListRacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListRacks(ctx, req.(*ListRacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwitchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListSwitches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListSwitches(ctx, req.(*ListSwitchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListVLANs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVLANsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListVLANs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListVLANs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListVLANs(ctx, req.(*ListVLANsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/CreateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).CreateMachine(ctx, req.(*CreateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_RenameMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).RenameMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/RenameMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).RenameMachine(ctx, req.(*RenameMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_UpdateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).UpdateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/UpdateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).UpdateMachine(ctx, req.(*UpdateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_CreateNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNICRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).CreateNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/CreateNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).CreateNIC(ctx, req.(*CreateNICRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_DeleteNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNICRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).DeleteNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/DeleteNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).DeleteNIC(ctx, req.(*DeleteNICRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListNICs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNICsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListNICs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListNICs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListNICs(ctx, req.(*ListNICsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_UpdateNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNICRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).UpdateNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/UpdateNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).UpdateNIC(ctx, req.(*UpdateNICRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_CreateDRAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDRACRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).CreateDRAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/CreateDRAC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).CreateDRAC(ctx, req.(*CreateDRACRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListDRACs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDRACsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListDRACs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListDRACs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListDRACs(ctx, req.(*ListDRACsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_UpdateDRAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDRACRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).UpdateDRAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/UpdateDRAC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).UpdateDRAC(ctx, req.(*UpdateDRACRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_CreatePhysicalHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhysicalHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).CreatePhysicalHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/CreatePhysicalHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).CreatePhysicalHost(ctx, req.(*CreatePhysicalHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListPhysicalHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhysicalHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListPhysicalHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListPhysicalHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListPhysicalHosts(ctx, req.(*ListPhysicalHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_UpdatePhysicalHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhysicalHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).UpdatePhysicalHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/UpdatePhysicalHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).UpdatePhysicalHost(ctx, req.(*UpdatePhysicalHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_FindVMSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindVMSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).FindVMSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/FindVMSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).FindVMSlots(ctx, req.(*FindVMSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/CreateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).CreateVM(ctx, req.(*CreateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListVMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListVMs(ctx, req.(*ListVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_UpdateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).UpdateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/UpdateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).UpdateVM(ctx, req.(*UpdateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_DeleteHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).DeleteHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/DeleteHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).DeleteHost(ctx, req.(*DeleteHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crimson_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crimson.Crimson",
	HandlerType: (*CrimsonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDatacenters",
			Handler:    _Crimson_ListDatacenters_Handler,
		},
		{
			MethodName: "ListFreeIPs",
			Handler:    _Crimson_ListFreeIPs_Handler,
		},
		{
			MethodName: "ListKVMs",
			Handler:    _Crimson_ListKVMs_Handler,
		},
		{
			MethodName: "ListOSes",
			Handler:    _Crimson_ListOSes_Handler,
		},
		{
			MethodName: "ListPlatforms",
			Handler:    _Crimson_ListPlatforms_Handler,
		},
		{
			MethodName: "ListRacks",
			Handler:    _Crimson_ListRacks_Handler,
		},
		{
			MethodName: "ListSwitches",
			Handler:    _Crimson_ListSwitches_Handler,
		},
		{
			MethodName: "ListVLANs",
			Handler:    _Crimson_ListVLANs_Handler,
		},
		{
			MethodName: "CreateMachine",
			Handler:    _Crimson_CreateMachine_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _Crimson_DeleteMachine_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _Crimson_ListMachines_Handler,
		},
		{
			MethodName: "RenameMachine",
			Handler:    _Crimson_RenameMachine_Handler,
		},
		{
			MethodName: "UpdateMachine",
			Handler:    _Crimson_UpdateMachine_Handler,
		},
		{
			MethodName: "CreateNIC",
			Handler:    _Crimson_CreateNIC_Handler,
		},
		{
			MethodName: "DeleteNIC",
			Handler:    _Crimson_DeleteNIC_Handler,
		},
		{
			MethodName: "ListNICs",
			Handler:    _Crimson_ListNICs_Handler,
		},
		{
			MethodName: "UpdateNIC",
			Handler:    _Crimson_UpdateNIC_Handler,
		},
		{
			MethodName: "CreateDRAC",
			Handler:    _Crimson_CreateDRAC_Handler,
		},
		{
			MethodName: "ListDRACs",
			Handler:    _Crimson_ListDRACs_Handler,
		},
		{
			MethodName: "UpdateDRAC",
			Handler:    _Crimson_UpdateDRAC_Handler,
		},
		{
			MethodName: "CreatePhysicalHost",
			Handler:    _Crimson_CreatePhysicalHost_Handler,
		},
		{
			MethodName: "ListPhysicalHosts",
			Handler:    _Crimson_ListPhysicalHosts_Handler,
		},
		{
			MethodName: "UpdatePhysicalHost",
			Handler:    _Crimson_UpdatePhysicalHost_Handler,
		},
		{
			MethodName: "FindVMSlots",
			Handler:    _Crimson_FindVMSlots_Handler,
		},
		{
			MethodName: "CreateVM",
			Handler:    _Crimson_CreateVM_Handler,
		},
		{
			MethodName: "ListVMs",
			Handler:    _Crimson_ListVMs_Handler,
		},
		{
			MethodName: "UpdateVM",
			Handler:    _Crimson_UpdateVM_Handler,
		},
		{
			MethodName: "DeleteHost",
			Handler:    _Crimson_DeleteHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/machine-db/api/crimson/v1/crimson.proto",
}
